BeliefUpdates:
  { clock(Old) } UpdateClock(New) { not clock(Old), clock(New) }
  { true } AddReading(at(X,Y),Value,Agent,Clock) { reading(at(X,Y),Value,Agent,Clock) }
  { position(X,Y) } UpdatePosition(X1,Y1) { not position(X,Y), position(X1,Y1) }
  { points(X) } UpdatePoints(X1) { not points(X), points(X1) }
  { position(X,Y) } UpdatePosition(X1,Y1) { not position(X,Y), position(X1,Y1) }

PC-rules:

///////////// Moving

moveTo(X,Y) <- position(X2,Y2) and Y2 < Y and raise(Y2,NewY) | { 
    updatePos(X2,NewY); moveTo(X,Y)
}
moveTo(X,Y) <- position(X2,Y2) and X2 < X and raise(X2,NewX) | { 
    updatePos(NewX,Y2); moveTo(X,Y)
}
moveTo(X,Y) <- position(X2,Y2) and X2 > X and lower(X2,NewX) | { 
    updatePos(NewX,Y2); moveTo(X,Y)
}
moveTo(X,Y) <- position(X2,Y2) and Y2 > Y and lower(Y2,NewY) | { 
    updatePos(X2,NewY); moveTo(X,Y)
}
moveTo(X,Y) <- position(X,Y) | { skip }

updatePos(NewX,NewY) <- position(X,Y) | {
    
   // B(clock(Clock));
    UpdatePosition(NewX,NewY)
  //  @ctenv(write(status(position(NewX,NewY),Clock),-1),_)   
} 

event(obligation([Goal],Deadline,[Sanction]),ctenv) <- true | {
   adoptObligation(Goal, Deadline, Sanction)
}

event(prohibition([State],[Sanction]),ctenv) <- true | {
   adoptProhibition(State,Sanction)
}

event(clock(Clock),ctenv) <- true | {
   UpdateClock(Clock)
}
event(points(Points),ctenv) <- true | {
   UpdatePoints(Points)
}
event(position(X,Y,Clock),ctenv) <- true | {
   UpdatePosition(X,Y)
}

event(FUNCTION, NAME) <- true | {
	@ctenv( functionToList(FUNCTION), LIST); 
	if B(LIST=[actionresult([TYPE,ID])]) then { 
		//Received a proposal
		if B(TYPE=proposal) then {
			ReceivedMessage(TYPE,ID,open);
			//make response
			adopta(received(TYPE,ID,closed))
		}
	}
	else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then {	
		// Received a response
		if B(TYPE=response) then {
			ReceivedMessage(RESPONSE,ID)
		} 
	}
	else if B(LIST=[actionresult([TYPE])]) then {
		// Received an event
		ReceivedEvent(TYPE)
	}
	else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then {	
		// Received a proposal
		if B(TYPE=proposal) then {
			ReceivedProposal(AGENT,ID,RESPONSE)
			//adopta(receivedP(AGENT,ID,RESPONSE))
		}
	}	
}


adoptProhibition(at(X,Y,_), reduce(_,Value)) <- true | {
	B(clock(Clock));
    aprohibition(at(X,Y,Clock) -> reduce(Value))
}
adoptProhibition(color(Color,Thing), reduce(_,Value)) <- true | {
    aprohibition(color(Color) -> reduce(Value))
}
adoptProhibition(rejectRequests(Thing), reduce(_,Value)) <- true | {
    aprohibition(rejectRequests -> reduce(Value))
}
adoptProhibition(moveTooFast(Thing), reduce(_,Value)) <- true | {
    aprohibition(moveTooFast -> reduce(Value))
}

adoptObligation(at(X,Y,_), D, reduce(_,Value)) <- true | {
	B(clock(Clock));
    adopta(at(X,Y,Clock) : D -> reduce(Value))
}
adoptObligation(surround(X,Y), D, reduce(Group,Sanction)) <- true | {
    adopta(surround(X,Y) : D -> reduce(Sanction))
}
adoptObligation(color(Color,Thing), D, reduce(Group,Sanction)) <- true | {
    adopta(color(Color) : D -> reduce(Sanction))
}
adoptObligation(acceptRequests(Thing), D, reduce(Group,Sanction)) <- true | {
    adopta(acceptRequests : D -> reduce(Sanction))
}
adoptObligation(makeMove(X,Y,Thing), D, reduce(Group,Sanction)) <- true | {
    adopta(makeMove(X,Y) : D -> reduce(Sanction))
}

Sanctions:
	reduce(50)  -> 1,
	reduce(100) -> 2,
	reduce(150) -> 3,
	reduce(200) -> 4,
	reduce(250) -> 5,
	reduce(300) -> 6,
	reduce(400) -> 7, 
	reduce(500) -> 8,
	reduce(700) -> 9,
	reduce(1000) -> 10
