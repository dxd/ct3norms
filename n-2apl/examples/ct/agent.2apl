Include: norms.2apl

Beliefs:
useColor(Color,V) :- position(X,Y,_),tile(Color,X,Y).
at(X,Y,V) :- position(X,Y,W).
at(X,Y) :- position(X,Y,W).
initialized :- initialized(yes).
raise(X,NewX):- NewX is X + 1.
lower(X,NewX):- NewX is X - 1.

points(1000).
clock(0).
initialized(no).
phase(none).


Goals:
initialized, update, respond

BeliefUpdates:
{ clock(Old) } 												UpdateClock(New) 				{ not clock(Old), clock(New) }
{ points(X) } 												UpdatePoints(X1) 				{ not points(X), points(X1) }
{ position(X,Y,Clock) } 									UpdatePosition(X1,Y1,Clock) 	{ not position(X,Y,Clock), position(X1,Y1,Clock), moveTooFast(X)}
{ position(X,Y,Clock) and moveTooFast(X) } 					UpdatePosition(X1,Y1,Clock1) 	{ not position(X,Y,Clock), position(X1,Y1,Clock), not moveTooFast(X) }
{ position(X,Y,Clock) } 									UpdatePosition(X1,Y1,Clock1) 	{ not position(X,Y,Clock), position(X1,Y1,Clock)}
{ true } 													UpdateTile(Color,X,Y) 			{ tile(Color,X,Y) }
//{message(TYPE,ID,open)}										CloseMessage(TYPE,ID,RESPONSE)	{not message(TYPE,ID,open), message(TYPE,ID,RESPONSE)}
{true} 														Failed(X) 						{failed(X)}
{chipsNeeded(OLD) or not chipsNeeded(OLD)}					GetChipsNeeded(NEW)				{not chipsNeeded(OLD), chipsNeeded(NEW)}
{chipsRedundant(OLD) or not chipsRedundant(OLD)}			GetChipsRedundant(ID,NEW)		{not chipsRedundant(OLD), chipsRedundant(NEW)}
{true}														GetAgentId(NEW)					{agentId(NEW)}
{true} 														GetAgentPin(X)	 				{agentPin(X)}
{true}											 			GetAgentPos(X,Y,C) 				{position(X,Y,C)}
{true}														GetRole(ID, ROLE)				{role(ID,ROLE)}
{goalId(ID) or not goald(ID)}								GetGoalId(NEWID)				{not goalId(ID), goalId(NEWID)}
{goalPos(TYPE,OLDX,OLDY) or not goalPos(TYPE,OLDX,OLDY)}	GetGoalPos(TYPE,X,Y) 			{not goalPos(TYPE,OLDX,OLDY), goalPos(TYPE,X,Y)}
{chips(PLAYER,CHIPSOLD) or not chips(PLAYER,CHIPSOLD)}		GetChips(PLAYER,CHIPS)			{not chips(PLAYER,CHIPSOLD), chips(PLAYER,CHIPS)}
{agentChips(L) or not agentChips(L)}  						GetAgentChips(LNEW)				{not agentChips(L), agentChips(LNEW)}
{opponentChips(L) or not opponentChips(L)}					GetOpponentChips(LNEW)			{not opponentChips(L), opponentChips(LNEW)}
{true}														GetOpponentId(ID)				{opponentId(ID)}
{true}														GetOpponentPin(PIN)				{opponentPin(PIN)}
{phase(Old)}												GetPhase(Pp)					{not phase(Old), phase(Pp)}
{opponentPos(OLDX,OLDY) or not opponentPos(OLDX,OLDY)}		GetOpponentPos(X,Y)				{not opponentPos(OLDX,OLDY), opponentPos(X,Y)}
{initialized(X)}											Initialize() 					{not initialized(X), initialized(yes), not event(game_initialized)}
{score(ID,OLD) or not score(ID,OLD)}    					GetScore(ID,SCORE)				{not score (ID,OLD), score(ID,SCORE)}
{scoreCurrentChips(ID,OLD) or not scoreCurrentChips(ID,OLD)}	GetScoreCurrentChips(ID,S)	{not scoreCurrentChips(ID,OLD), scoreCurrentChips(ID,S)}
{true}														GetScoreAfterExchange(ID,SCORE)	{scoreAfterExchange(ID,SCORE)}
{true}														MakeProposal(X)					{proposal(X)}
{true}														MakeResponse(ID)				{response(ID)}
{true}														MoveStepToGoal(MOVED)			{moved(MOVED)}
{event(phasechange)}                                        Updated()                       {not event(phasechange)}
{true}														ReceivedEvent(X)				{event(X)}
{sent(MSGID,ID,open,C)}										ReceivedMessage(RESPONSE,MSGID)	{not sent(MSGID,ID,open,C), sent(MSGID,ID,closed(RESPONSE),C)}
{true}														ReceivedMessage(TYPE,ID,STATUS) {received(TYPE,ID,STATUS)}
{true}														ReceivedProposal(TYPE,ID,STATUS){receivedP(TYPE,ID,STATUS)}
{requestChips(X,Y) or not requestChips(X,Y)}				RequestChips(PIN,CHIPS)			{not requestChips(X,Y), requestChips(PIN,CHIPS)}
// sent a proposal
{true}														Sent(MSGID,ID,STATUS,C)		    {sent(MSGID,ID,STATUS,C)}
// sent an answer
{receivedP(X,ID,open)}								Sent(ANSWER,ID)					{not receivedP(X,ID,open), receivedP(X,ID,closed(ANSWER))}
{true}														Surround(X,Y)					{gsurround(X,Y)}  
{true}														NextStep(X,Y)					{nextStep(X,Y)}
{true}														NoNextStep(X,Y)					{not nextStep(X,Y)}
{true}														NextStep(X,Y,ID)				{nextStep(X,Y,ID)}
{true}														NoNextStep(X,Y,ID)				{not nextStep(X,Y,ID)}
 
Plans:
initialize()

PG-rules:

respond <- receivedP(X,MSGID,open) and agentId(ID) and not scoreAfterExchange(MSGID,Score) | {
		getScoreAfterExchange(ID,MSGID);
		if G(not at(A,B)) then
			makeResponse(MSGID,acceptq);		
} : 10

surround(X,Y,V1) <- role(ID,ra) | {
	[
	Surround(X,Y);
	sendSouth(a10,X,Y,100);
	sendWest(a20,X,Y,100);
	sendEast(a30,X,Y,100);
	sendNorth(a40,X,Y,100);
	color(white,a10,yes,200);
	color(white,a20,yes,200);
	color(white,a30,yes,200);
	color(white,a40,yes,200);
	color(blue,a10,no,100);
	color(blue,a20,no,100);
	color(blue,a30,no,100);
	color(blue,a40,no,100);
	dropgoal(surround(X,Y,V1))
	]
} : 100

useColor(Color,V1) <- (phase(communicationphase) or phase(movementphase)) and at(X1,Y1) and clock(C) | {
	[
	if B(tile(Color,X1,Y1)) then 
		{dropgoal(useColor(Color,V1))}
	else if B(prohibition(useColor(Color,V2))) then {
		if B(V2 > V1) 
			then {dropgoal(useColor(Color,V1))}
	}
	else {findNextStep(Color,V1)}
	]
} : 100

//makeMove(X,Y) <- true | {}

initialized <- event(game_initialized) | {
    Initialize()
} : 10

update <- event(phasechange) |  {
	update()
} : 10

at(X,Y,V1) <- (phase(communicationphase) or phase(movementphase)) and at(X1,Y1) and clock(C) | {
  [ 	
  	findNextStep(neco,V1);
  	
  	if B(receivedP(A,MSGID,open)) then if B(scoreAfterExchange(MSGID,Score)) then {
  		respond(MSGID,V1)
  	}
  ] 
} : 100

PC-rules:

respond(MSGID,V1) <- receivedP(X,MSGID,open) and scoreAfterExchange(MSGID,Score) | {
		
		B(ANSWER = accept);
		if B(Score = no) then { if B(prohibition(rejectRequests(V2))) then {if B(V2 > V1) then {
			B(ANSWER = reject)
		}}};		
  		makeResponse(MSGID,ANSWER)
}

findNextStep(Color,V1) <- not nextStep(X1,Y1) and not nextStep(X1,Y1,Msg) and not sent(ID,IDagent,open,C1) | {
	if G(at(X,Y,V)) then
		{@ctenv( moveStepToGoalTest(Color,X,Y,8), L1)}
	else if B(tile(Color,X,Y)) then
		{@ctenv( moveStepToGoalTest(Color,X,Y,8), L1)};
	if B( L1 = [actionresult([Xa,Ya,Agent,ID])]) then {
		B(clock(Clock));
		
		if B(tile(Color1,Xa,Ya)) then {
			if B(prohibition(useColor(Color1,V2))) then {if B(V1 > V2) then {if B(not ID = no) then {NextStep(Xa,Ya,ID)} else {NextStep(Xa,Ya)}}}
			else { if B(not ID = no) then {NextStep(Xa,Ya,ID)} else {NextStep(Xa,Ya)}}
		};		
		if B(not ID = no) then
			Sent(ID,Agent,open,Clock)
	}
	
}

findNextStep(Color,V1) <- nextStep(X1,Y1) | {
	@ctenv( moveStepToGoal(Color,X1,Y1), L2);
	if B( L2 = [actionresult([X1,Y1])]) then {
		B(clock(Clock));
		UpdatePosition(X1,Y1,Clock)
	};
	NoNextStep(X1,Y1)
}

findNextStep(Color,V1) <- nextStep(X1,Y1,ID) and sent(ID,IDagent,closed(RESPONSE),C) | {
	@ctenv( moveStepToGoal(Color,X1,Y1), L2);
	if B( L2 = [actionresult([X1,Y1])]) then {
		B(clock(Clock));
		UpdatePosition(X1,Y1,Clock)
	};
	NoNextStep(X1,Y1,ID)
}

findNextStep(Color,V1) <- nextStep(X1,Y1,ID) and sent(ID,IDagent,open,C1) and clock(C2) | {
	if B(C2 > C1 + 5) then {
		NoNextStep(X1,Y1,ID);
		ReceivedMessage(noresponse,ID)
		}
}

initialize() <- initialized(no) | {
    getPhase();
    getId();
    B(agentId(ID));
    getRole(ID);
    getPos()
}

sendNorth(Agent,X,Y,S) <- raise(Y,Y1) and gsurround(GX,GY) | {
	@ctenv( setGoal(Agent,X,Y1,GX,GY,S),L)
}
sendSouth(Agent,X,Y,S) <- lower(Y,Y1) and gsurround(GX,GY) | {
	@ctenv( setGoal(Agent,X,Y1,GX,GY,S),L)
}
sendEast(Agent,X,Y,S) <- raise(X,X1) and gsurround(GX,GY) | {
	@ctenv( setGoal(Agent,X1,Y,GX,GY,S),L)
}
sendWest(Agent,X,Y,S) <- lower(X,X1) and gsurround(GX,GY) | {
	@ctenv( setGoal(Agent,X1,Y,GX,GY,S),L)
}

color(Color,Agent,Yes,S) <- true | {
	@ctenv( setColor(Agent,Color,Yes,S),L)
}

update() <- true | {
	getPhase();
    B(clock(Clock));
    if B(event(phasechange)) then Updated()
}

getId() <- true | {
	@ctenv( getAgentId(), L1);
	B( L1 = [actionresult(X)]);
	GetAgentId(X)
}

getPhase() <- true | {
	@ctenv( getPhase(), L1);
	B( L1 = [actionresult(X)]);
	GetPhase(X)
}


getPos() <- true | {
	@ctenv( getAgentPos(), L1);
	B( L1 = [actionresult(  [X,Y] )]);
	B(clock(C));
	GetAgentPos(X,Y,C)
}


// Returns the additional chips that the agent needs to reach its goal
getChipsNeeded(OPPID) <- true | {
	@ctenv( getChipsNeeded(OPPID), L1);
	B( L1 = [actionresult(X)]);
	GetChipsNeeded(X)
}

getChips() <- true | {
	@ctenv( getAgentChips(), L1);
	B( L1 = [actionresult(X)]);
	GetAgentChips(X)
}

getChipsRedundant() <- agentId(ID) | {
    @ctenv( getChipsRedundant(ID), L1);
    B( L1 = [actionresult(X)]);
	GetChipsRedundant(ID,X)
}

getOpponentChips() <- opponentPin(PIN) | {
	@ctenv( getOpponentChips(PIN), L1);
	B( L1 = [actionresult(X)]);
	GetOpponentChips(X)
}

getGoalId(TYPE,X,Y) <- true | {
	@ctenv( getGoalId(TYPE,X,Y), L1);
	if B( L1 = [actionresult(ID)]) then
		GetGoalId(ID)
}

getGoalId() <- goalPos(TYPE,X,Y) | {
	@ctenv( getGoalId(TYPE,X,Y), L1);
	if B( L1 = [actionresult(ID)]) then
		GetGoalId(ID)
}

getGoalPos(TYPE) <- true | {
	@ctenv( getGoalPos(TYPE), L1);
	if B( L1 = [actionresult([X,Y])]) then
		GetGoalPos(TYPE,X,Y)
}

// TODO: can only deal with one opponent...
getOpponentPin() <- true | {
	@ctenv( getOpponentPin(), L1);
	B( L1 = [actionresult(X)]);
	GetOpponentPin(X)
}

// TODO: can only deal with one opponent... 
getOpponentId() <- true | {
	@ctenv( getOpponentId(), L1);
	B( L1 = [actionresult(X)]);
	GetOpponentId(X)
}

// TODO: can only deal with one opponent...
getOpponentPos() <- true | {
	@ctenv( getOpponentPos(), L1);
	B( L1 = [actionresult([X,Y])]);
	GetOpponentPos(X,Y)	
}

getPin() <- true | {
	@ctenv( getAgentPin(), L1);
	B( L1 = [actionresult(X)]);
	GetAgentPin(X)
}


getRole(ID) <- true | {
	@ctenv( getRole(ID), L1);
	B( L1 = [actionresult(X)]);
	GetRole(ID, X)
}

getScoreAfterExchange(ID,MSGID) <- true | {
	//@ctenv( getScoreAfterExchange(ID,MSGID), L1);
	//B( L1 = [actionresult(X)]);
	GetScoreAfterExchange(MSGID,yes)
}


getScore(ID) <- true | {
	@ctenv( getScore(ID), L1);
	B( L1 = [actionresult(X)]);
	GetScore(ID,X)
}	

getScoreCurrentChips(ID) <- true | {
	@ctenv( getScoreCurrentChips(ID), L1);
	B( L1 = [actionresult(X)]);
	GetScoreCurrentChips(ID,X)
}


// TODO: give a goalidentifier to requestChips
requestChips(OPPPIN) <- opponentId(OPPID) | {
	@ctenv(requestChips(OPPPIN,OPPID), L1);
	B( L1 = [actionresult(X)]);
	RequestChips(OPPID,X)
}

sendProposal(PIN, CHIPS) <- clock(C) | {
	@ctenv( sendProposal(PIN,CHIPS), L1);
	B( L1 = [actionresult(X)]);
	Sent(proposal,X,open,C)
}

sendProposal() <- clock(C) | {
	@ctenv( sendProposal(), L1);

	//B( L1 = [actionresult(X)]);
	Sent(proposal,1,open,C)

}

makeProposal()<- opponentPin(PIN) and agentId(ID) | {
	//GetchipsRedundant(ID,CHIPS);
	sendProposal()
}

makeResponse(MSGID,Response) <- true | {
	sendResponse(Response,MSGID)
}

// send a response to the proposer of a proposal that is still open
// the id of the proposer does not have to be included 
// RESPONSE = {accept,reject}
sendResponse(RESPONSE,MSGID) <- true | {
	@ctenv( sendResponse(MSGID,RESPONSE), L1); 
	Sent(RESPONSE,MSGID)
	//dropgoal(received(proposal,MSGID,closed))
}	

///////////// Moving

moveTo(X,Y) <- position(X2,Y2,_) and Y2 < Y and raise(Y2,NewY) | { 
    updatePos(X2,NewY); moveTo(X,Y)
}
moveTo(X,Y) <- position(X2,Y2,_) and X2 < X and raise(X2,NewX) | { 
    updatePos(NewX,Y2); moveTo(X,Y)
}
moveTo(X,Y) <- position(X2,Y2,_) and X2 > X and lower(X2,NewX) | { 
    updatePos(NewX,Y2); moveTo(X,Y)
}
moveTo(X,Y) <- position(X2,Y2,_) and Y2 > Y and lower(Y2,NewY) | { 
    updatePos(X2,NewY); moveTo(X,Y)
}
moveTo(X,Y) <- position(X,Y,_) | { skip }

updatePos(NewX,NewY) <- position(X,Y,_) | {
    
    B(clock(Clock));
    UpdatePosition(NewX,NewY,Clock)
//  @ctenv(write(status(position(NewX,NewY),Clock),-1),_)   
} 

//PR-rules:
//  @blockworld( pickup(), _ ); REST <- true |
//  {
//    @blockworld( sensePosition(), POS );
//    B(POS = [actionresult([X,Y])]);
//    RemoveBomb( X, Y )
//  }