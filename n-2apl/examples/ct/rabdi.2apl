
Include: agent.2apl


Beliefs:
wingame :- reachedGoal. 
reachedGoal :- goalPos(0,X,Y) , agentPos(X,Y).
received(X,Y,closed) :- received(X,Y,closed(Z)).
initialized :- event(game_initiatized), initialized(yes).
initialized(no).
phase(none).

  raise(X,NewX):- NewX is X + 1.
  lower(X,NewX):- NewX is X - 1.

  points(1000).
  position(3, 3).
  clock(0).
ra.


Goals:
initialized, wingame, update


BeliefUpdates:
//{message(TYPE,ID,open)}										CloseMessage(TYPE,ID,RESPONSE)	{not message(TYPE,ID,open), message(TYPE,ID,RESPONSE)}
{true} 														Failed(X) 						{failed(X)}
{chipsNeeded(OLD) or not chipsNeeded(OLD)}					GetChipsNeeded(NEW)				{not chipsNeeded(OLD), chipsNeeded(NEW)}
{chipsRedundant(OLD) or not chipsRedundant(OLD)}			GetChipsRedundant(ID,NEW)		{not chipsRedundant(OLD), chipsRedundant(NEW)}
{true}														GetAgentId(NEW)					{agentId(NEW)}
{true} 														GetAgentPin(X)	 				{agentPin(X)}
{agentPos(OLDX,OLDY) or not agentPos(OLDX,OLDY)} 			GetAgentPos(X,Y) 				{not agentPos(OLDX,OLDY), agentPos(X,Y)}
{role(ID, OLD) or not role(ID, OLD)}						GetRole(ID, ROLE)				{not role(ID,OLD), role(ID,ROLE)}
{goalId(ID) or not goald(ID)}								GetGoalId(NEWID)				{not goalId(ID), goalId(NEWID)}
{goalPos(TYPE,OLDX,OLDY) or not goalPos(TYPE,OLDX,OLDY)}	GetGoalPos(TYPE,X,Y) 			{not goalPos(TYPE,OLDX,OLDY), goalPos(TYPE,X,Y)}
{chips(PLAYER,CHIPSOLD) or not chips(PLAYER,CHIPSOLD)}		GetChips(PLAYER,CHIPS)			{not chips(PLAYER,CHIPSOLD), chips(PLAYER,CHIPS)}
{agentChips(L) or not agentChips(L)}  						GetAgentChips(LNEW)				{not agentChips(L), agentChips(LNEW)}
{opponentChips(L) or not opponentChips(L)}					GetOpponentChips(LNEW)			{not opponentChips(L), opponentChips(LNEW)}
{true}														GetOpponentId(ID)				{opponentId(ID)}
{true}														GetOpponentPin(PIN)				{opponentPin(PIN)}
{phase(Old)}												GetPhase(Pp)					{not phase(Old), phase(Pp)}
{opponentPos(OLDX,OLDY) or not opponentPos(OLDX,OLDY)}		GetOpponentPos(X,Y)				{not opponentPos(OLDX,OLDY), opponentPos(X,Y)}
{initialized(X)}											Initialize() 					{not intitialized(X), initialized(yes)}
{score(ID,OLD) or not score(ID,OLD)}    					GetScore(ID,SCORE)				{not score (ID,OLD), score(ID,SCORE)}
{scoreCurrentChips(ID,OLD) or not scoreCurrentChips(ID,OLD)}	GetScoreCurrentChips(ID,S)	{not scoreCurrentChips(ID,OLD), scoreCurrentChips(ID,S)}
{scoreAfterExchange(ID,OLD) or not scoreAfterExchange(ID,OLD)}GetScoreAfterExchange(ID,SCORE)	{not scoreAfterExchange(ID,OLD), scoreAfterExchange(ID,SCORE)}
{true}														MakeProposal(X)					{proposal(X)}
{true}														MakeResponse(ID)				{response(ID)}
{true}														MoveStepToGoal(MOVED)			{moved(MOVED)}
{event(phasechange)}                                        Updated()                       {not event(phasechange)}
{true}														ReceivedEvent(X)				{event(X)}
{sent(Pp,ID,open)}											ReceivedMessage(RESPONSE,ID)	{not sent(Pp,ID,open), sent(Pp,ID,closed(RESPONSE))}
{true}														ReceivedMessage(TYPE,ID,STATUS) {received(TYPE,ID,STATUS)}
{true}														ReceivedProposal(TYPE,ID,STATUS){receivedP(TYPE,ID,STATUS)}
{requestChips(X,Y) or not requestChips(X,Y)}				RequestChips(PIN,CHIPS)			{not requestChips(X,Y), requestChips(PIN,CHIPS)}
// sent a proposal
{true}														Sent(TYPE,ID,STATUS)		    {sent(TYPE,ID,STATUS)}
// sent an answer
{received(proposal,ID,open)}								Sent(ANSWER,ID)					{not received(proposal,ID,open), received(proposal,ID,closed(ANSWER))}
{gsurround(X,Y) or not gsurround(X,Y)}						Surround(NX,NY)					{not gsurround(X,Y), gsurround(NX,NY)}


Plans:
initialize()


//Goals:
//  at(3,0) :: 20 >> 7
//  reading(5,5) :: 30 >> 1


PG-rules:

//propose <- phase(communicationphase) and not sent(Pp,ID,open) | makeProposal()

//respond <- received(TYPE,ID,open) and phase(communicationphase) | makeResponse(ID)

received(TYPE,ID,closed) <- phase(communicationphase) | makeResponse(ID)
receivedP(TYPE,ID,accept) <- phase(communicationphase) | makeResponse(ID)

initialized <- event(game_initialized) | {
    dropgoal(initialized);
    Initialize()
}

update <- event(phasechange) | update()
//update <- event(normphase) and ra | sendNorms()
update <- phase(communicationphase) and role(X,proposer) and not sent(Pp,ID,open) | makeProposal()
//update <- phase(movementphase) | moveStepToGoal()

at(X,Y,C) <- phase(movementphase) | {

  [moveStepToGoal(neco,X,Y,C)]
    
} : 100

reading(X,Y) <- true | {

   [moveTo(X,Y); 
   dropgoal(reading(X,Y))]
    
} : 10000


makeReading <- position(X,Y) | {

   [dropgoal(makeReading)]
    
} : 100

makeReading(X,Y) <- true | {

   [moveTo(X,Y);
   dropgoal(makeReading(X,Y))]
    
} : 100

surround(X,Y) <- true | {
	[
	Surround(X,Y);
	sendSouth(a10,X,Y);
	sendWest(a20,X,Y);
	sendEast(a30,X,Y);
	sendNorth(a40,X,Y);
	color(green,a10,yes);
	color(green,a20,yes);
	color(green,a30,yes);
	color(green,a40,yes);
	color(green,a10,no);
	color(green,a20,no);
	color(green,a30,no);
	color(green,a40,no);
	dropgoal(surround(X,Y))
	]
}


PC-rules:

sendNorth(Agent,X,Y) <- raise(Y,Y1) and gsurround(GX,GY) | {
	@ctenv( setGoal(Agent,X,Y1,GX,GY),L)
}
sendSouth(Agent,X,Y) <- lower(Y,Y1) and gsurround(GX,GY) | {
	@ctenv( setGoal(Agent,X,Y1,GX,GY),L)
}
sendEast(Agent,X,Y) <- raise(X,X1) and gsurround(GX,GY) | {
	@ctenv( setGoal(Agent,X1,Y,GX,GY),L)
}
sendWest(Agent,X,Y) <- lower(X,X1) and gsurround(GX,GY) | {
	@ctenv( setGoal(Agent,X1,Y,GX,GY),L)
}

color(Color,Agent,Yes) <- true | {
	@ctenv( setColor(Agent,Color,Yes),L)
}

update() <- true | {
	getPhase();
    //getRole(MYID);
    B(clock(Clock));
    if B(phase(feedbackphase)) then  {
    	if G(at(X,Y,C)) then if B(C<Clock) then dropgoal(at(X,Y,C));
    	if G(eastreading(X1,Y1)) then dropgoal(eastreading(X1,Y1));
    	if G(northreading(X2,Y2)) then dropgoal(northreading(X2,Y2));
    	if G(southreading(X3,Y3)) then dropgoal(southreading(X3,Y3))
    };
    	
    if B(event(phasechange)) then Updated()
}

// TODO: clear up?
// extract multiple players from a list of closest players
extractPlayers(X,Y,LIST) <- true | {
	if B(not LIST=[]) then {
		if B(LIST=[PLAYER|REST] or LIST=[[PLAYER]]) then {
			if B(not PLAYER=[]) then {
	    		if B(PLAYER=[NAME,COORX,COORY]) then {
					// BROKEN: ClosePlayer(X,Y,[NAME]);
					extractPlayers(X,Y,REST)
				}
			}
		}
	}
}

getId() <- true | {
	@ctenv( getAgentId(), L1);
	B( L1 = [actionresult(X)]);
	GetAgentId(X)
}

getPhase() <- true | {
	@ctenv( getPhase(), L1);
	B( L1 = [actionresult(X)]);
	GetPhase(X)
}


getPos() <- true | {
	@ctenv( getAgentPos(), L1);
	B( L1 = [actionresult(  [X,Y] )]);
	GetAgentPos(X,Y)
}


// Returns the additional chips that the agent needs to reach its goal
getChipsNeeded(OPPID) <- true | {
	@ctenv( getChipsNeeded(OPPID), L1);
	B( L1 = [actionresult(X)]);
	GetChipsNeeded(X)
}

getChips() <- true | {
	@ctenv( getAgentChips(), L1);
	B( L1 = [actionresult(X)]);
	GetAgentChips(X)
}

getChipsRedundant() <- agentId(ID) | {
    @ctenv( getChipsRedundant(ID), L1);
    B( L1 = [actionresult(X)]);
	GetChipsRedundant(ID,X)
}

getOpponentChips() <- opponentPin(PIN) | {
	@ctenv( getOpponentChips(PIN), L1);
	B( L1 = [actionresult(X)]);
	GetOpponentChips(X)
}

getGoalId(TYPE,X,Y) <- true | {
	@ctenv( getGoalId(TYPE,X,Y), L1);
	if B( L1 = [actionresult(ID)]) then
		GetGoalId(ID)
}

getGoalId() <- goalPos(TYPE,X,Y) | {
	@ctenv( getGoalId(TYPE,X,Y), L1);
	if B( L1 = [actionresult(ID)]) then
		GetGoalId(ID)
}

getGoalPos(TYPE) <- true | {
	@ctenv( getGoalPos(TYPE), L1);
	if B( L1 = [actionresult([X,Y])]) then
		GetGoalPos(TYPE,X,Y)
}

// TODO: can only deal with one opponent...
getOpponentPin() <- true | {
	@ctenv( getOpponentPin(), L1);
	B( L1 = [actionresult(X)]);
	GetOpponentPin(X)
}

// TODO: can only deal with one opponent... 
getOpponentId() <- true | {
	@ctenv( getOpponentId(), L1);
	B( L1 = [actionresult(X)]);
	GetOpponentId(X)
}

// TODO: can only deal with one opponent...
getOpponentPos() <- true | {
	@ctenv( getOpponentPos(), L1);
	B( L1 = [actionresult([X,Y])]);
	GetOpponentPos(X,Y)	
}

getPin() <- true | {
	@ctenv( getAgentPin(), L1);
	B( L1 = [actionresult(X)]);
	GetAgentPin(X)
}




getRole(ID) <- true | {
	@ctenv( getRole(ID), L1);
	B( L1 = [actionresult(X)]);
	GetRole(ID, X)
}

getScoreAfterExchange(ID,MSGID) <- true | {
	@ctenv( getScoreAfterExchange(ID,MSGID), L1);
	B( L1 = [actionresult(X)]);
	GetScoreAfterExchange(ID,X)
}

getScoreAfterExchange(ID,CHIPS) <- true | {
	@ctenv( getScoreAfterExchange(ID,CHIPS), L1);
	B( L1 = [actionresult(X)]);
	GetScoreAfterExchange(ID,X)
}

getScore(ID) <- true | {
	@ctenv( getScore(ID), L1);
	B( L1 = [actionresult(X)]);
	GetScore(ID,X)
}	

getScoreCurrentChips(ID) <- true | {
	@ctenv( getScoreCurrentChips(ID), L1);
	B( L1 = [actionresult(X)]);
	GetScoreCurrentChips(ID,X)
}

initialize() <- initialized(no) | {
	//getPin(); 
	//getOpponentPin(); 
	//getId(); 
	//getOpponentId(); 
	//getPos();
	//getOpponentPos();
	//getGoalPos(0); 
	//if B(goalPos(TYPE,X,Y)) then getGoalId(TYPE,X,Y);
    //if B(agentId(MYID)) then {getRole(MYID)} ;
    getPhase();
	Initialize() 
}

moveStepToGoal(ID,X,Y,C) <- true | {
	@ctenv( moveStepToGoal(X,Y), L1);
	B( L1 = [actionresult(Z)]);
	MoveStepToGoal(Z);
	if B(not false=Z) then {
		B([A,B] = Z);
		UpdatePosition(A,B);
		if B([A,B] = [X,Y])
			then dropgoal(at(X,Y,C))
	}
}

// TODO: give a goalidentifier to requestChips
requestChips(OPPPIN) <- opponentId(OPPID) | {
	@ctenv(requestChips(OPPPIN,OPPID), L1);
	B( L1 = [actionresult(X)]);
	RequestChips(OPPID,X)
}

sendProposal(PIN, CHIPS) <- true | {
	@ctenv( sendProposal(PIN,CHIPS), L1);
	B( L1 = [actionresult(X)]);
	Sent(proposal,X,open)
}

sendProposal() <- true | {
	@ctenv( sendProposal(), L1);

	//B( L1 = [actionresult(X)]);
	Sent(proposal,1,open)

}

makeProposal()<- opponentPin(PIN) and agentId(ID) | {
	//GetchipsRedundant(ID,CHIPS);
	sendProposal()
}

makeResponse(MSGID) <- true | {
sendResponse(accept,MSGID)
}

// send a response to the proposer of a proposal that is still open
// the id of the proposer does not have to be included 
// RESPONSE = {accept,reject}
sendResponse(RESPONSE,MSGID) <- received(proposal,MSGID,open) | {
	@ctenv( sendResponse(RESPONSE,MSGID), L1); 
	Sent(RESPONSE,MSGID);
	dropgoal(received(proposal,MSGID,closed))
}	

orientation() <- true | {
	getChips();
	getOpponentChips()
}