2015-05-27 16:46:08,073 CONFIG [com.gigaspaces.logger] - Log file: /Users/dxd/git/ct3/logs/2015-05-27~16.46-gigaspaces-service-128.243.23.149-40179.log
-------------------------last log tuples start--------------------------------
Time [clock=8, time=2015-05-27 16:29:01.205]
Color [id=null, color=blue, agent=a40, type=no, sanction=1000, time=2015-05-27 16:28:35.217, clock=5]
Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-05-27 16:28:00.962, clock=0]
Tile [id=null, cell=Cell [x=5, y=3], subject=yellow, time=2015-05-27 16:28:00.94, clock=0]
Obligation [subject=a40, obligation=[at(3, 4, a40)], sanction=[reduce(a40, 700)], deadline=31, time=2015-05-27 16:28:33.954, clock=5]
Time [clock=16, time=2015-05-27 16:30:21.225]
Prohibition [subject=a40, prohibition=[color(blue, a40)], sanction=[reduce(a40, 1000)], clock=5, time=2015-05-27 16:28:35.22]
Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-05-27 16:28:00.926, clock=0]
Group [name=g, ra=a10, clock=0, time=2015-05-27 16:28:01.113]
SetGoal [id=null, agent=a10, cell=Cell [x=3, y=2], goal=Cell [x=3, y=3], sanction=100, clock=5, time=2015-05-27 16:28:33.515]
Proposal [id=6829, agent=a20, agent2=a30, clock=13, time=2015-05-27 16:30:00.22]
Time [clock=10, time=2015-05-27 16:29:21.208]
Goal [id=null, cell=Cell [x=3, y=3], agent=null, time=2015-05-27 16:28:00.996, clock=0]
Obligation [subject=a10, obligation=[color(white, a10)], sanction=[reduce(a10, 100)], deadline=25, time=2015-05-27 16:28:34.104, clock=5]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:19.853, clock=15]
Position [subject=a30, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:51.799, clock=7]
Proposal [id=2763, agent=a40, agent2=a20, clock=5, time=2015-05-27 16:28:40.637]
Obligation [subject=a20, obligation=[color(white, a20)], sanction=[reduce(a20, 100)], deadline=25, time=2015-05-27 16:28:34.266, clock=5]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:26.483, clock=10]
Tile [id=null, cell=Cell [x=6, y=4], subject=white, time=2015-05-27 16:28:00.957, clock=0]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:21.373, clock=16]
Time [clock=14, time=2015-05-27 16:30:01.22]
Proposal [id=4519, agent=a30, agent2=a20, clock=6, time=2015-05-27 16:28:43.922]
Time [clock=11, time=2015-05-27 16:29:31.21]
Time [clock=5, time=2015-05-27 16:28:31.196]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:23.712, clock=16]
Response [id=4519, response=accepted, clock=6, time=2015-05-27 16:28:46.0]
Time [clock=1, time=2015-05-27 16:27:51.153]
Time [clock=15, time=2015-05-27 16:30:11.221]
Time [clock=13, time=2015-05-27 16:29:51.215]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:21.079, clock=15]
Response [id=2763, response=accepted, clock=6, time=2015-05-27 16:28:44.367]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:23.594, clock=16]
Color [id=null, color=blue, agent=a20, type=no, sanction=1000, time=2015-05-27 16:28:34.95, clock=5]
Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-05-27 16:28:00.947, clock=0]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:06.942, clock=14]
Time [clock=12, time=2015-05-27 16:29:41.213]
Response [id=6829, response=rejected, clock=14, time=2015-05-27 16:30:03.042]
Color [id=null, color=white, agent=a10, type=yes, sanction=100, time=2015-05-27 16:28:34.093, clock=5]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:06.937, clock=14]
Color [id=null, color=blue, agent=a10, type=no, sanction=1000, time=2015-05-27 16:28:34.773, clock=5]
Time [clock=4, time=2015-05-27 16:28:21.193]
Color [id=null, color=white, agent=a40, type=yes, sanction=100, time=2015-05-27 16:28:34.614, clock=5]
Color [id=null, color=blue, agent=a30, type=no, sanction=1000, time=2015-05-27 16:28:35.1, clock=5]
Tile [id=null, cell=Cell [x=6, y=0], subject=blue, time=2015-05-27 16:28:00.949, clock=0]
Tile [id=null, cell=Cell [x=6, y=1], subject=brown, time=2015-05-27 16:28:00.951, clock=0]
Obligation [subject=a30, obligation=[at(4, 3, a30)], sanction=[reduce(a30, 700)], deadline=31, time=2015-05-27 16:28:33.84, clock=5]
Time [clock=9, time=2015-05-27 16:29:11.206]
Prohibition [subject=a20, prohibition=[color(blue, a20)], sanction=[reduce(a20, 1000)], clock=5, time=2015-05-27 16:28:34.959]
Time [clock=6, time=2015-05-27 16:28:41.2]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:16.276, clock=15]
Prohibition [subject=a40, prohibition=[moveTooFast], sanction=[reduce(a40, 300)], clock=5, time=2015-05-27 16:28:32.195]
Color [id=null, color=white, agent=a20, type=yes, sanction=100, time=2015-05-27 16:28:34.262, clock=5]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:57.634, clock=7]
Time [clock=3, time=2015-05-27 16:28:11.189]
Prohibition [subject=a10, prohibition=[moveTooFast], sanction=[reduce(a10, 300)], clock=5, time=2015-05-27 16:28:32.172]
SetGoal [id=null, agent=a40, cell=Cell [x=3, y=4], goal=Cell [x=3, y=3], sanction=100, clock=5, time=2015-05-27 16:28:33.951]
Obligation [subject=a30, obligation=[color(white, a30)], sanction=[reduce(a30, 100)], deadline=25, time=2015-05-27 16:28:34.425, clock=5]
Color [id=null, color=white, agent=a30, type=yes, sanction=100, time=2015-05-27 16:28:34.422, clock=5]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:13.04, clock=15]
SetGoal [id=null, agent=a20, cell=Cell [x=2, y=3], goal=Cell [x=3, y=3], sanction=100, clock=5, time=2015-05-27 16:28:33.695]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:22.467, clock=16]
Time [clock=2, time=2015-05-27 16:28:01.187]
Obligation [subject=a40, obligation=[color(white, a40)], sanction=[reduce(a40, 100)], deadline=25, time=2015-05-27 16:28:34.617, clock=5]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:15.02, clock=15]
Obligation [subject=a20, obligation=[at(2, 3, a20)], sanction=[reduce(a20, 700)], deadline=31, time=2015-05-27 16:28:33.698, clock=5]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:05.352, clock=14]
Obligation [subject=a10, obligation=[surround(3, 3)], sanction=[reduce(g, 700)], deadline=32, time=2015-05-27 16:28:32.202, clock=5]
SetGoal [id=null, agent=a30, cell=Cell [x=4, y=3], goal=Cell [x=3, y=3], sanction=100, clock=5, time=2015-05-27 16:28:33.837]
Obligation [subject=a10, obligation=[at(3, 2, a10)], sanction=[reduce(a10, 700)], deadline=31, time=2015-05-27 16:28:33.541, clock=5]
Position [subject=a30, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:20.545, clock=15]
Prohibition [subject=a20, prohibition=[rejectRequests], sanction=[reduce(a20, 500)], clock=5, time=2015-05-27 16:28:32.154]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:22.295, clock=16]
Prohibition [subject=a30, prohibition=[rejectRequests], sanction=[reduce(a30, 500)], clock=5, time=2015-05-27 16:28:32.16]
Time [clock=7, time=2015-05-27 16:28:51.202]
Prohibition [subject=a10, prohibition=[color(blue, a10)], sanction=[reduce(a10, 1000)], clock=5, time=2015-05-27 16:28:34.776]
Tile [id=null, cell=Cell [x=6, y=2], subject=white, time=2015-05-27 16:28:00.953, clock=0]
Prohibition [subject=a30, prohibition=[color(blue, a30)], sanction=[reduce(a30, 1000)], clock=5, time=2015-05-27 16:28:35.105]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:03.571, clock=14]
Prohibition [subject=a20, prohibition=[moveTooFast], sanction=[reduce(a20, 300)], clock=5, time=2015-05-27 16:28:32.177]
Prohibition [subject=a10, prohibition=[rejectRequests], sanction=[reduce(a10, 500)], clock=5, time=2015-05-27 16:28:32.144]
Prohibition [subject=a40, prohibition=[rejectRequests], sanction=[reduce(a40, 500)], clock=5, time=2015-05-27 16:28:32.164]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:41.257, clock=12]
Prohibition [subject=a30, prohibition=[moveTooFast], sanction=[reduce(a30, 300)], clock=5, time=2015-05-27 16:28:32.192]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:15.27, clock=15]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:05.511, clock=14]
Tile [id=null, cell=Cell [x=6, y=3], subject=brown, time=2015-05-27 16:28:00.955, clock=0]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:17.303, clock=15]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:01.749, clock=14]
Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-05-27 16:28:00.936, clock=0]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:42.355, clock=12]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:12.773, clock=15]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:03.964, clock=14]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:57.885, clock=7]
Tile [id=null, cell=Cell [x=6, y=5], subject=brown, time=2015-05-27 16:28:00.959, clock=0]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:55.173, clock=13]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:55.545, clock=13]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:39.828, clock=11]
Position [subject=a30, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:08.68, clock=14]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:49.117, clock=12]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:36.718, clock=11]
Tile [id=null, cell=Cell [x=5, y=5], subject=brown, time=2015-05-27 16:28:00.945, clock=0]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:15.941, clock=15]
Tile [id=null, cell=Cell [x=5, y=0], subject=yellow, time=2015-05-27 16:28:00.934, clock=0]
Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-05-27 16:28:00.909, clock=0]
Tile [id=null, cell=Cell [x=3, y=3], subject=blue, time=2015-05-27 16:28:00.892, clock=0]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:49.003, clock=12]
Tile [id=null, cell=Cell [x=3, y=0], subject=white, time=2015-05-27 16:28:00.885, clock=0]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:56.004, clock=7]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:35.062, clock=11]
Tile [id=null, cell=Cell [x=1, y=4], subject=blue, time=2015-05-27 16:28:00.832, clock=0]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:46.794, clock=12]
Position [subject=a30, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:03.592, clock=14]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:28.654, clock=10]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:44.312, clock=12]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:34.406, clock=11]
Position [subject=a30, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:15.001, clock=15]
Tile [id=null, cell=Cell [x=0, y=3], subject=yellow, time=2015-05-27 16:28:00.784, clock=0]
Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-05-27 16:28:00.879, clock=0]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:17.755, clock=15]
Position [subject=a30, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:55.759, clock=7]
Tile [id=null, cell=Cell [x=2, y=0], subject=white, time=2015-05-27 16:28:00.855, clock=0]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:51.704, clock=13]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:40.202, clock=11]
Tile [id=null, cell=Cell [x=1, y=1], subject=yellow, time=2015-05-27 16:28:00.824, clock=0]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:12.494, clock=9]
Tile [id=null, cell=Cell [x=5, y=2], subject=brown, time=2015-05-27 16:28:00.937, clock=0]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:55.091, clock=7]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:54.411, clock=7]
Tile [id=null, cell=Cell [x=0, y=0], subject=brown, time=2015-05-27 16:28:00.736, clock=0]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:25.728, clock=10]
Position [subject=a30, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:57.511, clock=13]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:38.17, clock=11]
Tile [id=null, cell=Cell [x=4, y=5], subject=yellow, time=2015-05-27 16:28:00.929, clock=0]
Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-05-27 16:28:00.916, clock=0]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:52.337, clock=7]
Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-05-27 16:28:00.846, clock=0]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:59.284, clock=13]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:36.581, clock=11]
Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-05-27 16:28:00.861, clock=0]
Position [subject=a30, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:34.492, clock=11]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:01.063, clock=13]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:44.977, clock=12]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:16.838, clock=15]
Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-05-27 16:28:00.932, clock=0]
Tile [id=null, cell=Cell [x=3, y=2], subject=blue, time=2015-05-27 16:28:00.888, clock=0]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:16.494, clock=9]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:17.717, clock=9]
Position [subject=a30, id=null, cell=Cell [x=6, y=5], time=2015-05-27 16:28:46.604, clock=6]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:58.491, clock=13]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:14.321, clock=9]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:35.652, clock=11]
Position [subject=a30, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:46.147, clock=12]
Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-05-27 16:28:00.9, clock=0]
Position [subject=a40, id=null, cell=Cell [x=6, y=1], time=2015-05-27 16:28:45.123, clock=6]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:57.637, clock=13]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:56.816, clock=13]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:53.969, clock=13]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:51.567, clock=13]
Position [subject=a30, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:51.597, clock=13]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:53.242, clock=7]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:53.612, clock=13]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:42.7, clock=12]
Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-05-27 16:28:00.771, clock=0]
Position [subject=a30, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:12.863, clock=9]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:41.739, clock=12]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:13.203, clock=9]
Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-05-27 16:28:00.792, clock=0]
Tile [id=null, cell=Cell [x=4, y=3], subject=blue, time=2015-05-27 16:28:00.922, clock=0]
Position [subject=a30, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:23.251, clock=10]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:40.777, clock=11]
Position [subject=a30, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:39.822, clock=11]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:47.14, clock=12]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:30:18.938, clock=15]
Tile [id=null, cell=Cell [x=4, y=0], subject=brown, time=2015-05-27 16:28:00.907, clock=0]
Position [subject=a30, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:28.518, clock=10]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:37.536, clock=11]
Tile [id=null, cell=Cell [x=3, y=6], subject=white, time=2015-05-27 16:28:00.903, clock=0]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:13.762, clock=9]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:11.395, clock=8]
Position [subject=a30, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:02.117, clock=7]
Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-05-27 16:28:00.896, clock=0]
Tile [id=null, cell=Cell [x=3, y=1], subject=yellow, time=2015-05-27 16:28:00.887, clock=0]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:02.536, clock=7]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:23.361, clock=10]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:56.932, clock=7]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:47.91, clock=6]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:59.951, clock=13]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:42.375, clock=6]
Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-05-27 16:28:00.876, clock=0]
Tile [id=null, cell=Cell [x=2, y=2], subject=brown, time=2015-05-27 16:28:00.864, clock=0]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:32.687, clock=11]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:25.155, clock=10]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:03.118, clock=7]
Tile [id=null, cell=Cell [x=1, y=6], subject=yellow, time=2015-05-27 16:28:00.848, clock=0]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:24.573, clock=10]
Tile [id=null, cell=Cell [x=1, y=3], subject=white, time=2015-05-27 16:28:00.829, clock=0]
Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-05-27 16:28:00.812, clock=0]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:23.443, clock=10]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:04.946, clock=7]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:48.844, clock=6]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:21.513, clock=10]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:24.006, clock=10]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:50.624, clock=6]
Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-05-27 16:28:00.802, clock=0]
Position [subject=a30, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:17.915, clock=9]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:17.055, clock=9]
Position [subject=a30, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:07.883, clock=7]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:01.045, clock=7]
Tile [id=null, cell=Cell [x=2, y=3], subject=blue, time=2015-05-27 16:28:00.866, clock=0]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:46.651, clock=6]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:11.905, clock=9]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:06.07, clock=7]
Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-05-27 16:28:00.789, clock=0]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:03.7, clock=7]
Tile [id=null, cell=Cell [x=1, y=2], subject=white, time=2015-05-27 16:28:00.827, clock=0]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:02.238, clock=7]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:51.7, clock=7]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:49.749, clock=6]
Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-05-27 16:28:00.766, clock=0]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:47.316, clock=6]
Tile [id=null, cell=Cell [x=5, y=4], subject=blue, time=2015-05-27 16:28:00.942, clock=0]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:46.354, clock=6]
Tile [id=null, cell=Cell [x=2, y=4], subject=white, time=2015-05-27 16:28:00.872, clock=0]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:54.286, clock=7]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:37.214, clock=5]
Position [subject=a10, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:07.524, clock=7]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:04.306, clock=7]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:58.456, clock=7]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:28:49.908, clock=6]
Position [subject=a40, id=null, cell=Cell [x=0, y=0], time=2015-05-27 16:29:07.873, clock=7]
-------------------------last log tuples end----------------------------------
[CTAH] started agent 10
[CTAH] Added a new agent to the game by the name of 10.
[ENV] added agent a10
[CTAH] started agent 30
[CTAH] Added a new agent to the game by the name of 30.
[ENV] added agent a30
[CTAH] started agent 40
[CTAH] Added a new agent to the game by the name of 40.
[ENV] added agent a40
#########################Game started
#########################Game started
#########################Game started
setPhases in ClientGameStatus, the current phase is 
setPhases in ClientGameStatus, the current phase is 
setPhases in ClientGameStatus, the current phase is Norm Phase
setPhases in ClientGameStatus, the current phase is 
setPhases in ClientGameStatus, the current phase is Norm Phase
setPhases in ClientGameStatus, the current phase is Norm Phase
#########################Game Initialized
AGENT Thread-13: current phase name: Norm Phase
we have 1 goals
we have GoalWeight: 100  DistWeight: -10  ChipWeight: 5  CommWeight: 0 scoring
#########################Game Initialized
AGENT Thread-11: current phase name: Norm Phase
#########################Game Initialized
AGENT Thread-15: current phase name: Norm Phase
we have 1 goals
we have GoalWeight: 100  DistWeight: -10  ChipWeight: 5  CommWeight: 0 scoring
we have 1 goals
we have GoalWeight: 100  DistWeight: -10  ChipWeight: 5  CommWeight: 0 scoring
[Planbase]:{	initialize
}


[new scheduled]:[initialize]
[After]:{	initialize
}


[Planbase]:{	initialize
}


[new scheduled]:[initialize]
[After]:{	initialize
}


[Planbase]:{	initialize
}


[new scheduled]:[initialize]
[After]:{	initialize
}


Event processed @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[getPhase; getId; B(agentId(ID)); getRole(ID); getPos, @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[Planbase]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[getPhase; getId; B(agentId(ID)); getRole(ID); getPos, @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[Planbase]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[getPhase; getId; B(agentId(ID)); getRole(ID); getPos, @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@5ee819a8
[CTAH] The created APLList : [game_initialized]
[CTAH] Array of Terms: [Lapapl.data.Term;@57ec9545
[CTAH] The created APLList : [game_initialized]
[CTAH] Array of Terms: [Lapapl.data.Term;@65afdbbb
[CTAH] The created APLList : [game_initialized]
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[new scheduled]:[getId; B(agentId(ID)); getRole(ID); getPos, ReceivedEvent(game_initialized)]
[After]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[Planbase]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[new scheduled]:[getId; B(agentId(ID)); getRole(ID); getPos, ReceivedEvent(game_initialized)]
[After]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[Planbase]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[new scheduled]:[getId; B(agentId(ID)); getRole(ID); getPos, ReceivedEvent(game_initialized)]
[After]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[Planbase]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[Initialize, @ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos]
[After]:{	Initialize
},
{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[Initialize, @ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos]
[After]:{	Initialize
},
{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[Initialize, @ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos]
[After]:{	Initialize
},
{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	GetAgentId(2);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[GetAgentId(2); B(agentId(ID)); getRole(ID); getPos]
[After]:{	GetAgentId(2);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	GetAgentId(0);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[GetAgentId(0); B(agentId(ID)); getRole(ID); getPos]
[After]:{	GetAgentId(0);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	GetAgentId(3);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[GetAgentId(3); B(agentId(ID)); getRole(ID); getPos]
[After]:{	GetAgentId(3);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[B(agentId(ID)); getRole(ID); getPos]
[After]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[B(agentId(ID)); getRole(ID); getPos]
[After]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[B(agentId(ID)); getRole(ID); getPos]
[After]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	getRole(2);
	getPos
}


[new scheduled]:[getRole(2); getPos]
[After]:{	getRole(2);
	getPos
}


[Planbase]:{	getRole(0);
	getPos
}


[new scheduled]:[getRole(0); getPos]
[After]:{	getRole(0);
	getPos
}


[Planbase]:{	getRole(3);
	getPos
}


[new scheduled]:[getRole(3); getPos]
[After]:{	getRole(3);
	getPos
}


[Planbase]:{	@ctenv(getRole(2),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(2, X);
	getPos
}


[new scheduled]:[@ctenv(getRole(2),L1,0); B(L1=[actionresult(X)]); GetRole(2, X); getPos]
[After]:{	@ctenv(getRole(2),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(2, X);
	getPos
}


[Planbase]:{	@ctenv(getRole(0),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(0, X);
	getPos
}


[new scheduled]:[@ctenv(getRole(0),L1,0); B(L1=[actionresult(X)]); GetRole(0, X); getPos]
[After]:{	@ctenv(getRole(0),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(0, X);
	getPos
}


[Planbase]:{	@ctenv(getRole(3),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(3, X);
	getPos
}


[new scheduled]:[@ctenv(getRole(3),L1,0); B(L1=[actionresult(X)]); GetRole(3, X); getPos]
[After]:{	@ctenv(getRole(3),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(3, X);
	getPos
}


[Planbase]:{	GetRole(2, none);
	getPos
}


[new scheduled]:[GetRole(2, none); getPos]
[After]:{	GetRole(2, none);
	getPos
}


[Planbase]:{	GetRole(0, ra);
	getPos
}


[new scheduled]:[GetRole(0, ra); getPos]
[After]:{	GetRole(0, ra);
	getPos
}


[Planbase]:{	GetRole(3, none);
	getPos
}


[new scheduled]:[GetRole(3, none); getPos]
[After]:{	GetRole(3, none);
	getPos
}


[Planbase]:{	getPos
}


[new scheduled]:[getPos]
[After]:{	getPos
}


[Planbase]:{	getPos
}


[new scheduled]:[getPos]
[After]:{	getPos
}


[Planbase]:{	getPos
}


[new scheduled]:[getPos]
[After]:{	getPos
}


[Planbase]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[new scheduled]:[@ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)]
[After]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[CTAH] Agentposition: [6,6]
[Planbase]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[new scheduled]:[@ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)]
[After]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[Planbase]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[new scheduled]:[@ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)]
[After]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[CTAH] Agentposition: [0,0]
[CTAH] Agentposition: [0,6]
[Planbase]:{	B(clock(C));
	GetAgentPos(6, 6, C)
}


[new scheduled]:[B(clock(C)); GetAgentPos(6, 6, C)]
[After]:{	B(clock(C));
	GetAgentPos(6, 6, C)
}


[Planbase]:{	B(clock(C));
	GetAgentPos(0, 0, C)
}


[new scheduled]:[B(clock(C)); GetAgentPos(0, 0, C)]
[After]:{	B(clock(C));
	GetAgentPos(0, 0, C)
}


[Planbase]:{	B(clock(C));
	GetAgentPos(0, 6, C)
}


[new scheduled]:[B(clock(C)); GetAgentPos(0, 6, C)]
[After]:{	B(clock(C));
	GetAgentPos(0, 6, C)
}


[Planbase]:{	GetAgentPos(6, 6, 0)
}


[new scheduled]:[GetAgentPos(6, 6, 0)]
[After]:{	GetAgentPos(6, 6, 0)
}


[Planbase]:{	GetAgentPos(0, 0, 0)
}


[new scheduled]:[GetAgentPos(0, 0, 0)]
[After]:{	GetAgentPos(0, 0, 0)
}


[Planbase]:{	GetAgentPos(0, 6, 0)
}


[new scheduled]:[GetAgentPos(0, 6, 0)]
[After]:{	GetAgentPos(0, 6, 0)
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


setPhases in ClientGameStatus, the current phase is Communication Phase
setPhases in ClientGameStatus, the current phase is Communication Phase
setPhases in ClientGameStatus, the current phase is Communication Phase
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[Planbase]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@818b1bc
[CTAH] The created APLList : [phasechange]
[CTAH] Array of Terms: [Lapapl.data.Term;@3d99ea49
[CTAH] The created APLList : [phasechange]
[CTAH] Array of Terms: [Lapapl.data.Term;@6d9d3901
[CTAH] The created APLList : [phasechange]
[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	ReceivedEvent(phasechange)
}


[new scheduled]:[ReceivedEvent(phasechange)]
[After]:{	ReceivedEvent(phasechange)
}


[Planbase]:{	ReceivedEvent(phasechange)
}


[new scheduled]:[ReceivedEvent(phasechange)]
[After]:{	ReceivedEvent(phasechange)
}


[Planbase]:{	ReceivedEvent(phasechange)
}


[new scheduled]:[ReceivedEvent(phasechange)]
[After]:{	ReceivedEvent(phasechange)
}


[Planbase]:


[new scheduled]:[update]
[After]:{	update
}


[Planbase]:


[new scheduled]:[update]
[After]:{	update
}


[Planbase]:


[new scheduled]:[update]
[After]:{	update
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	GetPhase(communicationphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[GetPhase(communicationphase); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	GetPhase(communicationphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	GetPhase(communicationphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[GetPhase(communicationphase); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	GetPhase(communicationphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	GetPhase(communicationphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[GetPhase(communicationphase); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	GetPhase(communicationphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[if B(event(phasechange)) then Updated]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[if B(event(phasechange)) then Updated]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[if B(event(phasechange)) then Updated]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	Updated
}


[new scheduled]:[Updated]
[After]:{	Updated
}


[Planbase]:{	Updated
}


[new scheduled]:[Updated]
[After]:{	Updated
}


[Planbase]:{	Updated
}


[new scheduled]:[Updated]
[After]:{	Updated
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Time [clock=1, time=2015-05-27 16:46:19.298]
object notification: Tile [id=null, cell=Cell [x=0, y=0], subject=brown, time=2015-05-27 16:46:19.508, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-05-27 16:46:19.536, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-05-27 16:46:19.537, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=0], subject=brown, time=2015-05-27 16:46:19.508, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-05-27 16:46:19.536, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=3], subject=yellow, time=2015-05-27 16:46:19.539, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-05-27 16:46:19.537, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=0], subject=brown, time=2015-05-27 16:46:19.508, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-05-27 16:46:19.536, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-05-27 16:46:19.537, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=3], subject=yellow, time=2015-05-27 16:46:19.539, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-05-27 16:46:19.54, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-05-27 16:46:19.542, clock=0]
[Planbase]:


[new scheduled]:[]
[After]:


org notification: Tile [id=null, cell=Cell [x=0, y=3], subject=yellow, time=2015-05-27 16:46:19.539, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-05-27 16:46:19.54, clock=0]
org notification: Time [clock=1, time=2015-05-27 16:46:19.298]
object notification: Time [clock=1, time=2015-05-27 16:46:19.298]
object notification: Time [clock=1, time=2015-05-27 16:46:19.298]
object notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-05-27 16:46:19.543, clock=0]
[Planbase]:


[new scheduled]:[]
[After]:


object notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-05-27 16:46:19.544, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=0], subject=brown, time=2015-05-27 16:46:19.508, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=1], subject=yellow, time=2015-05-27 16:46:19.545, clock=0]
org notification: Goal [id=null, cell=Cell [x=3, y=3], agent=null, time=2015-05-27 16:46:19.652, clock=0]
Event processed UpdateClock(1)
Event processed UpdateTile(brown, 0, 0)
object notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-05-27 16:46:19.542, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=2], subject=white, time=2015-05-27 16:46:19.546, clock=0]
object notification: Time [clock=2, time=2015-05-27 16:46:29.312]
org notification: Group [name=g, ra=a10, clock=0, time=2015-05-27 16:46:19.712]
object notification: Time [clock=3, time=2015-05-27 16:46:39.315]
object notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-05-27 16:46:19.543, clock=0]
org notification: Time [clock=2, time=2015-05-27 16:46:29.312]
object notification: Tile [id=null, cell=Cell [x=1, y=3], subject=white, time=2015-05-27 16:46:19.547, clock=0]
object notification: Time [clock=4, time=2015-05-27 16:46:49.317]
object notification: Tile [id=null, cell=Cell [x=1, y=4], subject=blue, time=2015-05-27 16:46:19.548, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-05-27 16:46:19.549, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=6], subject=yellow, time=2015-05-27 16:46:19.55, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-05-27 16:46:19.544, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=1], subject=yellow, time=2015-05-27 16:46:19.545, clock=0]
object notification: Time [clock=5, time=2015-05-27 16:46:59.32]
object notification: Tile [id=null, cell=Cell [x=1, y=2], subject=white, time=2015-05-27 16:46:19.546, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=3], subject=white, time=2015-05-27 16:46:19.547, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=4], subject=blue, time=2015-05-27 16:46:19.548, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-05-27 16:46:19.549, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=6], subject=yellow, time=2015-05-27 16:46:19.55, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=0], subject=white, time=2015-05-27 16:46:19.551, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-05-27 16:46:19.552, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=2], subject=brown, time=2015-05-27 16:46:19.554, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=3], subject=blue, time=2015-05-27 16:46:19.555, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=4], subject=white, time=2015-05-27 16:46:19.557, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-05-27 16:46:19.559, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-05-27 16:46:19.561, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=0], subject=white, time=2015-05-27 16:46:19.563, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=1], subject=yellow, time=2015-05-27 16:46:19.565, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=2], subject=blue, time=2015-05-27 16:46:19.567, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=3], subject=blue, time=2015-05-27 16:46:19.57, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-05-27 16:46:19.572, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-05-27 16:46:19.573, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=6], subject=white, time=2015-05-27 16:46:19.575, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=0], subject=brown, time=2015-05-27 16:46:19.577, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-05-27 16:46:19.579, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-05-27 16:46:19.581, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=3], subject=blue, time=2015-05-27 16:46:19.583, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-05-27 16:46:19.585, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=5], subject=yellow, time=2015-05-27 16:46:19.587, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-05-27 16:46:19.589, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=0], subject=yellow, time=2015-05-27 16:46:19.59, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-05-27 16:46:19.592, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=2], subject=brown, time=2015-05-27 16:46:19.594, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=3], subject=yellow, time=2015-05-27 16:46:19.598, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=4], subject=blue, time=2015-05-27 16:46:19.601, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=5], subject=brown, time=2015-05-27 16:46:19.603, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-05-27 16:46:19.605, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=0], subject=blue, time=2015-05-27 16:46:19.607, clock=0]
[Planbase]:


[new scheduled]:[]
[After]:


object notification: Tile [id=null, cell=Cell [x=6, y=1], subject=brown, time=2015-05-27 16:46:19.609, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=2], subject=white, time=2015-05-27 16:46:19.611, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=3], subject=brown, time=2015-05-27 16:46:19.613, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=4], subject=white, time=2015-05-27 16:46:19.614, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=5], subject=brown, time=2015-05-27 16:46:19.616, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-05-27 16:46:19.618, clock=0]
object notification: Time [clock=2, time=2015-05-27 16:46:29.312]
object notification: Time [clock=3, time=2015-05-27 16:46:39.315]
object notification: Time [clock=2, time=2015-05-27 16:46:29.312]
object notification: Time [clock=3, time=2015-05-27 16:46:39.315]
object notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-05-27 16:46:19.536, clock=0]
object notification: Time [clock=4, time=2015-05-27 16:46:49.317]
object notification: Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-05-27 16:46:19.537, clock=0]
object notification: Time [clock=5, time=2015-05-27 16:46:59.32]
object notification: Tile [id=null, cell=Cell [x=0, y=3], subject=yellow, time=2015-05-27 16:46:19.539, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-05-27 16:46:19.54, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-05-27 16:46:19.542, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-05-27 16:46:19.543, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-05-27 16:46:19.544, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=1], subject=yellow, time=2015-05-27 16:46:19.545, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=2], subject=white, time=2015-05-27 16:46:19.546, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=3], subject=white, time=2015-05-27 16:46:19.547, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=4], subject=blue, time=2015-05-27 16:46:19.548, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-05-27 16:46:19.549, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=6], subject=yellow, time=2015-05-27 16:46:19.55, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=0], subject=white, time=2015-05-27 16:46:19.551, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-05-27 16:46:19.552, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=2], subject=brown, time=2015-05-27 16:46:19.554, clock=0]
object notification: Prohibition [subject=a30, prohibition=[rejectRequests], sanction=[reduce(a30, 500)], clock=5, time=2015-05-27 16:47:06.473]
object notification: Prohibition [subject=a40, prohibition=[rejectRequests], sanction=[reduce(a40, 500)], clock=5, time=2015-05-27 16:47:06.475]
object notification: Prohibition [subject=a30, prohibition=[moveTooFast], sanction=[reduce(a30, 300)], clock=5, time=2015-05-27 16:47:06.483]
object notification: Prohibition [subject=a10, prohibition=[rejectRequests], sanction=[reduce(a10, 500)], clock=5, time=2015-05-27 16:47:06.463]
object notification: Prohibition [subject=a40, prohibition=[moveTooFast], sanction=[reduce(a40, 300)], clock=5, time=2015-05-27 16:47:06.486]
object notification: Time [clock=4, time=2015-05-27 16:46:49.317]
object notification: Prohibition [subject=a10, prohibition=[moveTooFast], sanction=[reduce(a10, 300)], clock=5, time=2015-05-27 16:47:06.478]
object notification: Time [clock=5, time=2015-05-27 16:46:59.32]
org notification: Time [clock=3, time=2015-05-27 16:46:39.315]
object notification: Obligation [subject=a10, obligation=[surround(3, 3)], sanction=[reduce(g, 700)], deadline=31, time=2015-05-27 16:47:06.505, clock=5]
object notification: Tile [id=null, cell=Cell [x=2, y=0], subject=white, time=2015-05-27 16:46:19.551, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=3], subject=blue, time=2015-05-27 16:46:19.555, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-05-27 16:46:19.552, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=4], subject=white, time=2015-05-27 16:46:19.557, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=2], subject=brown, time=2015-05-27 16:46:19.554, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-05-27 16:46:19.559, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-05-27 16:46:19.561, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=3], subject=blue, time=2015-05-27 16:46:19.555, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=0], subject=white, time=2015-05-27 16:46:19.563, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=4], subject=white, time=2015-05-27 16:46:19.557, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=1], subject=yellow, time=2015-05-27 16:46:19.565, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=2], subject=blue, time=2015-05-27 16:46:19.567, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-05-27 16:46:19.559, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=3], subject=blue, time=2015-05-27 16:46:19.57, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-05-27 16:46:19.572, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-05-27 16:46:19.561, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-05-27 16:46:19.573, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-05-27 16:46:19.54, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=0], subject=white, time=2015-05-27 16:46:19.563, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=1], subject=yellow, time=2015-05-27 16:46:19.565, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=2], subject=blue, time=2015-05-27 16:46:19.567, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=3], subject=blue, time=2015-05-27 16:46:19.57, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=6], subject=white, time=2015-05-27 16:46:19.575, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-05-27 16:46:19.572, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=0], subject=brown, time=2015-05-27 16:46:19.577, clock=0]
[Planbase]:{	UpdateClock(1)
},
{	UpdateTile(brown, 0, 0)
}


object notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-05-27 16:46:19.573, clock=0]
[new scheduled]:[UpdateClock(1), UpdateTile(brown, 0, 0)]
[After]:{	UpdateClock(1)
},
{	UpdateTile(brown, 0, 0)
}


object notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-05-27 16:46:19.579, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-05-27 16:46:19.581, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=6], subject=white, time=2015-05-27 16:46:19.575, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=3], subject=blue, time=2015-05-27 16:46:19.583, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-05-27 16:46:19.585, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=0], subject=brown, time=2015-05-27 16:46:19.577, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=5], subject=yellow, time=2015-05-27 16:46:19.587, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-05-27 16:46:19.589, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-05-27 16:46:19.579, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=0], subject=yellow, time=2015-05-27 16:46:19.59, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-05-27 16:46:19.592, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-05-27 16:46:19.581, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=2], subject=brown, time=2015-05-27 16:46:19.594, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=3], subject=yellow, time=2015-05-27 16:46:19.598, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=4], subject=blue, time=2015-05-27 16:46:19.601, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=3], subject=blue, time=2015-05-27 16:46:19.583, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=5], subject=brown, time=2015-05-27 16:46:19.603, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-05-27 16:46:19.605, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-05-27 16:46:19.585, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=0], subject=blue, time=2015-05-27 16:46:19.607, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=5], subject=yellow, time=2015-05-27 16:46:19.587, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=1], subject=brown, time=2015-05-27 16:46:19.609, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=2], subject=white, time=2015-05-27 16:46:19.611, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=3], subject=brown, time=2015-05-27 16:46:19.613, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=4], subject=white, time=2015-05-27 16:46:19.614, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=5], subject=brown, time=2015-05-27 16:46:19.616, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-05-27 16:46:19.618, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-05-27 16:46:19.589, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=0], subject=yellow, time=2015-05-27 16:46:19.59, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-05-27 16:46:19.592, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=2], subject=brown, time=2015-05-27 16:46:19.594, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=3], subject=yellow, time=2015-05-27 16:46:19.598, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=4], subject=blue, time=2015-05-27 16:46:19.601, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=5], subject=brown, time=2015-05-27 16:46:19.603, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-05-27 16:46:19.605, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=0], subject=blue, time=2015-05-27 16:46:19.607, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=1], subject=brown, time=2015-05-27 16:46:19.609, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=2], subject=white, time=2015-05-27 16:46:19.611, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=3], subject=brown, time=2015-05-27 16:46:19.613, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=4], subject=white, time=2015-05-27 16:46:19.614, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=5], subject=brown, time=2015-05-27 16:46:19.616, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-05-27 16:46:19.618, clock=0]
org notification: Time [clock=4, time=2015-05-27 16:46:49.317]
org notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-05-27 16:46:19.542, clock=0]
org notification: Time [clock=5, time=2015-05-27 16:46:59.32]
org notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-05-27 16:46:19.543, clock=0]
Event processed UpdateTile(brown, 0, 0)
Event processed UpdateTile(brown, 0, 1)
Event processed UpdateTile(white, 0, 2)
Event processed UpdateTile(yellow, 0, 3)
Event processed UpdateTile(brown, 0, 4)
Event processed UpdateClock(1)
Event processed UpdateTile(blue, 0, 5)
Event processed UpdateTile(brown, 0, 6)
Event processed UpdateTile(brown, 1, 0)
Event processed UpdateTile(yellow, 1, 1)
Event processed UpdateTile(white, 1, 2)
Event processed UpdateTile(white, 1, 3)
Event processed UpdateTile(blue, 1, 4)
Event processed UpdateTile(brown, 1, 5)
Event processed UpdateTile(yellow, 1, 6)
Event processed UpdateTile(white, 2, 0)
Event processed UpdateTile(white, 2, 1)
Event processed UpdateTile(brown, 2, 2)
Event processed UpdateTile(blue, 2, 3)
Event processed UpdateTile(white, 2, 4)
Event processed UpdateTile(brown, 2, 5)
Event processed UpdateTile(brown, 2, 6)
Event processed UpdateTile(white, 3, 0)
Event processed UpdateTile(yellow, 3, 1)
Event processed UpdateTile(blue, 3, 2)
Event processed UpdateTile(blue, 3, 3)
Event processed UpdateTile(yellow, 3, 4)
Event processed UpdateTile(yellow, 3, 5)
Event processed UpdateTile(white, 3, 6)
org notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-05-27 16:46:19.544, clock=0]
Event processed UpdateTile(brown, 4, 0)
Event processed UpdateTile(blue, 4, 1)
Event processed UpdateTile(yellow, 4, 2)
Event processed UpdateTile(blue, 4, 3)
Event processed UpdateTile(brown, 4, 4)
Event processed UpdateTile(yellow, 4, 5)
Event processed UpdateTile(brown, 4, 6)
Event processed UpdateTile(yellow, 5, 0)
Event processed UpdateTile(white, 5, 1)
Event processed UpdateTile(brown, 5, 2)
Event processed UpdateTile(yellow, 5, 3)
Event processed UpdateTile(brown, 0, 0)
Event processed UpdateTile(brown, 0, 1)
Event processed UpdateTile(blue, 5, 4)
Event processed UpdateTile(white, 0, 2)
Event processed UpdateTile(yellow, 0, 3)
Event processed UpdateTile(brown, 0, 4)
Event processed UpdateClock(2)
Event processed UpdateTile(blue, 0, 5)
Event processed UpdateClock(3)
Event processed UpdateClock(1)
Event processed UpdateTile(brown, 0, 1)
org notification: Tile [id=null, cell=Cell [x=1, y=1], subject=yellow, time=2015-05-27 16:46:19.545, clock=0]
Event processed UpdateTile(brown, 0, 6)
Event processed UpdateTile(white, 0, 2)
Event processed UpdateTile(brown, 1, 0)
Event processed UpdateTile(yellow, 0, 3)
Event processed UpdateTile(brown, 5, 5)
Event processed UpdateTile(yellow, 1, 1)
Event processed UpdateTile(white, 5, 6)
Event processed UpdateTile(brown, 0, 4)
Event processed UpdateTile(white, 1, 2)
Event processed UpdateClock(2)
Event processed UpdateTile(blue, 6, 0)
Event processed UpdateTile(blue, 0, 5)
Event processed UpdateClock(3)
Event processed UpdateTile(brown, 6, 1)
Event processed UpdateTile(brown, 0, 6)
Event processed UpdateTile(white, 1, 3)
Event processed UpdateTile(white, 6, 2)
Event processed UpdateTile(brown, 1, 0)
Event processed UpdateClock(4)
Event processed UpdateTile(brown, 6, 3)
Event processed UpdateTile(yellow, 1, 1)
Event processed UpdateTile(blue, 1, 4)
org notification: Tile [id=null, cell=Cell [x=1, y=2], subject=white, time=2015-05-27 16:46:19.546, clock=0]
Event processed UpdateTile(white, 1, 2)
Event processed UpdateTile(brown, 1, 5)
Event processed UpdateTile(white, 1, 3)
Event processed UpdateTile(yellow, 1, 6)
Event processed UpdateTile(white, 6, 4)
Event processed UpdateTile(blue, 1, 4)
Event processed UpdateClock(5)
Event processed UpdateTile(brown, 1, 5)
Event processed adoptProhibition(rejectRequests, reduce(a40, 500))
Event processed UpdateTile(brown, 6, 5)
Event processed adoptProhibition(moveTooFast, reduce(a40, 300))
Event processed UpdateTile(yellow, 1, 6)
Event processed UpdateTile(white, 6, 6)
Event processed UpdateTile(white, 2, 0)
Event processed UpdateTile(white, 2, 0)
Event processed UpdateClock(2)
org notification: Tile [id=null, cell=Cell [x=1, y=3], subject=white, time=2015-05-27 16:46:19.547, clock=0]
Event processed UpdateClock(3)
Event processed UpdateTile(white, 2, 1)
Event processed UpdateTile(white, 2, 1)
Event processed UpdateClock(4)
Event processed UpdateTile(brown, 2, 2)
Event processed UpdateTile(brown, 2, 2)
Event processed adoptProhibition(rejectRequests, reduce(a10, 500))
Event processed UpdateTile(blue, 2, 3)
Event processed UpdateClock(4)
org notification: Tile [id=null, cell=Cell [x=1, y=4], subject=blue, time=2015-05-27 16:46:19.548, clock=0]
Event processed UpdateTile(white, 2, 4)
Event processed adoptProhibition(moveTooFast, reduce(a10, 300))
Event processed UpdateTile(brown, 2, 5)
Event processed UpdateClock(5)
Event processed UpdateTile(brown, 2, 6)
Event processed adoptObligation(surround(3, 3), 31, reduce(g, 700))
Event processed UpdateTile(white, 3, 0)
Event processed UpdateTile(blue, 2, 3)
org notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-05-27 16:46:19.549, clock=0]
Event processed UpdateTile(yellow, 3, 1)
Event processed UpdateTile(white, 2, 4)
Event processed UpdateTile(blue, 3, 2)
Event processed UpdateTile(brown, 2, 5)
Event processed UpdateClock(5)
Event processed UpdateTile(blue, 3, 3)
Event processed UpdateTile(brown, 2, 6)
Event processed adoptProhibition(rejectRequests, reduce(a30, 500))
Event processed UpdateTile(yellow, 3, 4)
org notification: Tile [id=null, cell=Cell [x=1, y=6], subject=yellow, time=2015-05-27 16:46:19.55, clock=0]
Event processed adoptProhibition(moveTooFast, reduce(a30, 300))
Event processed UpdateTile(yellow, 3, 5)
Event processed UpdateTile(white, 3, 0)
Event processed UpdateTile(yellow, 3, 1)
Event processed UpdateTile(blue, 3, 2)
org notification: Tile [id=null, cell=Cell [x=2, y=0], subject=white, time=2015-05-27 16:46:19.551, clock=0]
Event processed UpdateTile(blue, 3, 3)
Event processed UpdateTile(yellow, 3, 4)
Event processed UpdateTile(yellow, 3, 5)
Event processed UpdateTile(white, 3, 6)
Event processed UpdateTile(brown, 4, 0)
[Planbase]:{	UpdateTile(brown, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateClock(1)
},
{	UpdateTile(blue, 0, 5)
},
{	UpdateTile(brown, 0, 6)
},
{	UpdateTile(brown, 1, 0)
},
{	UpdateTile(yellow, 1, 1)
},
{	UpdateTile(white, 1, 2)
},
{	UpdateTile(white, 1, 3)
},
{	UpdateTile(blue, 1, 4)
},
{	UpdateTile(brown, 1, 5)
},
{	UpdateTile(yellow, 1, 6)
},
{	UpdateTile(white, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateTile(brown, 2, 2)
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
},
{	UpdateClock(2)
},
{	UpdateClock(3)
},
{	UpdateClock(4)
},
{	UpdateClock(5)
},
{	adoptProhibition(rejectRequests, reduce(a30, 500))
},
{	adoptProhibition(moveTooFast, reduce(a30, 300))
}


[new scheduled]:[UpdateTile(brown, 0, 0), UpdateTile(brown, 0, 1), UpdateTile(white, 0, 2), UpdateTile(yellow, 0, 3), UpdateTile(brown, 0, 4), UpdateClock(1), UpdateTile(blue, 0, 5), UpdateTile(brown, 0, 6), UpdateTile(brown, 1, 0), UpdateTile(yellow, 1, 1), UpdateTile(white, 1, 2), UpdateTile(white, 1, 3), UpdateTile(blue, 1, 4), UpdateTile(brown, 1, 5), UpdateTile(yellow, 1, 6), UpdateTile(white, 2, 0), UpdateTile(white, 2, 1), UpdateTile(brown, 2, 2), UpdateTile(blue, 2, 3), UpdateTile(white, 2, 4), UpdateTile(brown, 2, 5), UpdateTile(brown, 2, 6), UpdateTile(white, 3, 0), UpdateTile(yellow, 3, 1), UpdateTile(blue, 3, 2), UpdateTile(blue, 3, 3), UpdateTile(yellow, 3, 4), UpdateTile(yellow, 3, 5), UpdateTile(white, 3, 6), UpdateTile(brown, 4, 0), UpdateTile(blue, 4, 1), UpdateTile(yellow, 4, 2), UpdateTile(blue, 4, 3), UpdateTile(brown, 4, 4), UpdateTile(yellow, 4, 5), UpdateTile(brown, 4, 6), UpdateTile(yellow, 5, 0), UpdateTile(white, 5, 1), UpdateTile(brown, 5, 2), UpdateTile(yellow, 5, 3), UpdateTile(blue, 5, 4), UpdateTile(brown, 5, 5), UpdateTile(white, 5, 6), UpdateTile(blue, 6, 0), UpdateTile(brown, 6, 1), UpdateTile(white, 6, 2), UpdateTile(brown, 6, 3), UpdateTile(white, 6, 4), UpdateTile(brown, 6, 5), UpdateTile(white, 6, 6), UpdateClock(2), UpdateClock(3), UpdateClock(4), UpdateClock(5), adoptProhibition(rejectRequests, reduce(a30, 500)), adoptProhibition(moveTooFast, reduce(a30, 300))]
[After]:{	UpdateTile(brown, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateClock(1)
},
{	UpdateTile(blue, 0, 5)
},
{	UpdateTile(brown, 0, 6)
},
{	UpdateTile(brown, 1, 0)
},
{	UpdateTile(yellow, 1, 1)
},
{	UpdateTile(white, 1, 2)
},
{	UpdateTile(white, 1, 3)
},
{	UpdateTile(blue, 1, 4)
},
{	UpdateTile(brown, 1, 5)
},
{	UpdateTile(yellow, 1, 6)
},
{	UpdateTile(white, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateTile(brown, 2, 2)
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
},
{	UpdateClock(2)
},
{	UpdateClock(3)
},
{	UpdateClock(4)
},
{	UpdateClock(5)
},
{	adoptProhibition(rejectRequests, reduce(a30, 500))
},
{	adoptProhibition(moveTooFast, reduce(a30, 300))
}


org notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-05-27 16:46:19.552, clock=0]
Event processed UpdateTile(blue, 4, 1)
Event processed UpdateTile(white, 3, 6)
Event processed UpdateTile(yellow, 4, 2)
Event processed UpdateTile(brown, 4, 0)
Event processed UpdateTile(blue, 4, 3)
Event processed UpdateTile(blue, 4, 1)
Event processed UpdateTile(brown, 4, 4)
Event processed UpdateTile(yellow, 4, 2)
Event processed UpdateTile(yellow, 4, 5)
Event processed UpdateTile(brown, 4, 6)
Event processed UpdateTile(blue, 4, 3)
Event processed UpdateTile(brown, 4, 4)
Event processed UpdateTile(yellow, 4, 5)
Event processed UpdateTile(brown, 4, 6)
Event processed UpdateTile(yellow, 5, 0)
Event processed UpdateTile(yellow, 5, 0)
Event processed UpdateTile(white, 5, 1)
org notification: Tile [id=null, cell=Cell [x=2, y=2], subject=brown, time=2015-05-27 16:46:19.554, clock=0]
Event processed UpdateTile(brown, 5, 2)
Event processed UpdateTile(yellow, 5, 3)
Event processed UpdateTile(blue, 5, 4)
org notification: Tile [id=null, cell=Cell [x=2, y=3], subject=blue, time=2015-05-27 16:46:19.555, clock=0]
Event processed UpdateTile(white, 5, 1)
Event processed UpdateTile(brown, 5, 2)
Event processed UpdateTile(yellow, 5, 3)
org notification: Tile [id=null, cell=Cell [x=2, y=4], subject=white, time=2015-05-27 16:46:19.557, clock=0]
Event processed UpdateTile(brown, 5, 5)
Event processed UpdateTile(white, 5, 6)
Event processed UpdateTile(blue, 5, 4)
Event processed UpdateTile(blue, 6, 0)
Event processed UpdateTile(brown, 5, 5)
Event processed UpdateTile(brown, 6, 1)
[Planbase]:{	AdoptP(rejectRequests(500));
	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	AdoptP(movedTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[AdoptP(rejectRequests(500)); aprohibition(rejectRequests(500) -> reduce(500), priority 0), AdoptP(movedTooFast(300)); aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	AdoptP(rejectRequests(500));
	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	AdoptP(movedTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


Event processed UpdateTile(white, 6, 2)
Event processed UpdateTile(white, 5, 6)
Event processed UpdateTile(brown, 6, 3)
Event processed UpdateTile(blue, 6, 0)
Event processed UpdateTile(brown, 6, 1)
Event processed UpdateTile(white, 6, 4)
org notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-05-27 16:46:19.559, clock=0]
Event processed UpdateTile(brown, 6, 5)
Event processed UpdateTile(white, 6, 6)
Event processed UpdateTile(white, 6, 2)
Event processed UpdateTile(brown, 6, 3)
Event processed UpdateTile(white, 6, 4)
Event processed UpdateTile(brown, 6, 5)
org notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-05-27 16:46:19.561, clock=0]
Event processed UpdateTile(white, 6, 6)
org notification: Tile [id=null, cell=Cell [x=3, y=0], subject=white, time=2015-05-27 16:46:19.563, clock=0]
org notification: Tile [id=null, cell=Cell [x=3, y=1], subject=yellow, time=2015-05-27 16:46:19.565, clock=0]
org notification: Tile [id=null, cell=Cell [x=3, y=2], subject=blue, time=2015-05-27 16:46:19.567, clock=0]
[Planbase]:{	UpdateTile(brown, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateTile(blue, 0, 5)
},
{	UpdateClock(1)
},
{	UpdateTile(brown, 0, 6)
},
{	UpdateTile(brown, 1, 0)
},
{	UpdateTile(yellow, 1, 1)
},
{	UpdateTile(white, 1, 2)
},
{	UpdateClock(2)
},
{	UpdateClock(3)
},
{	UpdateTile(white, 1, 3)
},
{	UpdateClock(4)
},
{	UpdateTile(blue, 1, 4)
},
{	UpdateTile(brown, 1, 5)
},
{	UpdateTile(yellow, 1, 6)
},
{	UpdateClock(5)
},
{	adoptProhibition(rejectRequests, reduce(a40, 500))
},
{	adoptProhibition(moveTooFast, reduce(a40, 300))
},
{	UpdateTile(white, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateTile(brown, 2, 2)
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
}


[new scheduled]:[UpdateTile(brown, 0, 0), UpdateTile(brown, 0, 1), UpdateTile(white, 0, 2), UpdateTile(yellow, 0, 3), UpdateTile(brown, 0, 4), UpdateTile(blue, 0, 5), UpdateClock(1), UpdateTile(brown, 0, 6), UpdateTile(brown, 1, 0), UpdateTile(yellow, 1, 1), UpdateTile(white, 1, 2), UpdateClock(2), UpdateClock(3), UpdateTile(white, 1, 3), UpdateClock(4), UpdateTile(blue, 1, 4), UpdateTile(brown, 1, 5), UpdateTile(yellow, 1, 6), UpdateClock(5), adoptProhibition(rejectRequests, reduce(a40, 500)), adoptProhibition(moveTooFast, reduce(a40, 300)), UpdateTile(white, 2, 0), UpdateTile(white, 2, 1), UpdateTile(brown, 2, 2), UpdateTile(blue, 2, 3), UpdateTile(white, 2, 4), UpdateTile(brown, 2, 5), UpdateTile(brown, 2, 6), UpdateTile(white, 3, 0), UpdateTile(yellow, 3, 1), UpdateTile(blue, 3, 2), UpdateTile(blue, 3, 3), UpdateTile(yellow, 3, 4), UpdateTile(yellow, 3, 5), UpdateTile(white, 3, 6), UpdateTile(brown, 4, 0), UpdateTile(blue, 4, 1), UpdateTile(yellow, 4, 2), UpdateTile(blue, 4, 3), UpdateTile(brown, 4, 4), UpdateTile(yellow, 4, 5), UpdateTile(brown, 4, 6), UpdateTile(yellow, 5, 0), UpdateTile(white, 5, 1), UpdateTile(brown, 5, 2), UpdateTile(yellow, 5, 3), UpdateTile(blue, 5, 4), UpdateTile(brown, 5, 5), UpdateTile(white, 5, 6), UpdateTile(blue, 6, 0), UpdateTile(brown, 6, 1), UpdateTile(white, 6, 2), UpdateTile(brown, 6, 3), UpdateTile(white, 6, 4), UpdateTile(brown, 6, 5), UpdateTile(white, 6, 6)]
[After]:{	UpdateTile(brown, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateTile(blue, 0, 5)
},
{	UpdateClock(1)
},
{	UpdateTile(brown, 0, 6)
},
{	UpdateTile(brown, 1, 0)
},
{	UpdateTile(yellow, 1, 1)
},
{	UpdateTile(white, 1, 2)
},
{	UpdateClock(2)
},
{	UpdateClock(3)
},
{	UpdateTile(white, 1, 3)
},
{	UpdateClock(4)
},
{	UpdateTile(blue, 1, 4)
},
{	UpdateTile(brown, 1, 5)
},
{	UpdateTile(yellow, 1, 6)
},
{	UpdateClock(5)
},
{	adoptProhibition(rejectRequests, reduce(a40, 500))
},
{	adoptProhibition(moveTooFast, reduce(a40, 300))
},
{	UpdateTile(white, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateTile(brown, 2, 2)
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
}


[Planbase]:{	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[aprohibition(rejectRequests(500) -> reduce(500), priority 0), aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


org notification: Tile [id=null, cell=Cell [x=3, y=3], subject=blue, time=2015-05-27 16:46:19.57, clock=0]
[Planbase]:{	UpdateClock(2)
},
{	UpdateClock(3)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateTile(blue, 0, 5)
},
{	UpdateTile(brown, 0, 6)
},
{	UpdateTile(brown, 1, 0)
},
{	UpdateTile(yellow, 1, 1)
},
{	UpdateTile(white, 1, 2)
},
{	UpdateTile(white, 1, 3)
},
{	UpdateTile(blue, 1, 4)
},
{	UpdateTile(brown, 1, 5)
},
{	UpdateTile(yellow, 1, 6)
},
{	UpdateTile(white, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateTile(brown, 2, 2)
},
{	adoptProhibition(rejectRequests, reduce(a10, 500))
},
{	UpdateClock(4)
},
{	adoptProhibition(moveTooFast, reduce(a10, 300))
},
{	UpdateClock(5)
},
{	adoptObligation(surround(3, 3), 31, reduce(g, 700))
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
}


[new scheduled]:[UpdateClock(2), UpdateClock(3), UpdateTile(brown, 0, 1), UpdateTile(white, 0, 2), UpdateTile(yellow, 0, 3), UpdateTile(brown, 0, 4), UpdateTile(blue, 0, 5), UpdateTile(brown, 0, 6), UpdateTile(brown, 1, 0), UpdateTile(yellow, 1, 1), UpdateTile(white, 1, 2), UpdateTile(white, 1, 3), UpdateTile(blue, 1, 4), UpdateTile(brown, 1, 5), UpdateTile(yellow, 1, 6), UpdateTile(white, 2, 0), UpdateTile(white, 2, 1), UpdateTile(brown, 2, 2), adoptProhibition(rejectRequests, reduce(a10, 500)), UpdateClock(4), adoptProhibition(moveTooFast, reduce(a10, 300)), UpdateClock(5), adoptObligation(surround(3, 3), 31, reduce(g, 700)), UpdateTile(blue, 2, 3), UpdateTile(white, 2, 4), UpdateTile(brown, 2, 5), UpdateTile(brown, 2, 6), UpdateTile(white, 3, 0), UpdateTile(yellow, 3, 1), UpdateTile(blue, 3, 2), UpdateTile(blue, 3, 3), UpdateTile(yellow, 3, 4), UpdateTile(yellow, 3, 5), UpdateTile(white, 3, 6), UpdateTile(brown, 4, 0), UpdateTile(blue, 4, 1), UpdateTile(yellow, 4, 2), UpdateTile(blue, 4, 3), UpdateTile(brown, 4, 4), UpdateTile(yellow, 4, 5), UpdateTile(brown, 4, 6), UpdateTile(yellow, 5, 0), UpdateTile(white, 5, 1), UpdateTile(brown, 5, 2), UpdateTile(yellow, 5, 3), UpdateTile(blue, 5, 4), UpdateTile(brown, 5, 5), UpdateTile(white, 5, 6), UpdateTile(blue, 6, 0), UpdateTile(brown, 6, 1), UpdateTile(white, 6, 2), UpdateTile(brown, 6, 3), UpdateTile(white, 6, 4), UpdateTile(brown, 6, 5), UpdateTile(white, 6, 6)]
[After]:{	UpdateClock(2)
},
{	UpdateClock(3)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateTile(blue, 0, 5)
},
{	UpdateTile(brown, 0, 6)
},
{	UpdateTile(brown, 1, 0)
},
{	UpdateTile(yellow, 1, 1)
},
{	UpdateTile(white, 1, 2)
},
{	UpdateTile(white, 1, 3)
},
{	UpdateTile(blue, 1, 4)
},
{	UpdateTile(brown, 1, 5)
},
{	UpdateTile(yellow, 1, 6)
},
{	UpdateTile(white, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateTile(brown, 2, 2)
},
{	adoptProhibition(rejectRequests, reduce(a10, 500))
},
{	UpdateClock(4)
},
{	adoptProhibition(moveTooFast, reduce(a10, 300))
},
{	UpdateClock(5)
},
{	adoptObligation(surround(3, 3), 31, reduce(g, 700))
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
}


org notification: Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-05-27 16:46:19.572, clock=0]
org notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-05-27 16:46:19.573, clock=0]
org notification: Tile [id=null, cell=Cell [x=3, y=6], subject=white, time=2015-05-27 16:46:19.575, clock=0]
org notification: Tile [id=null, cell=Cell [x=4, y=0], subject=brown, time=2015-05-27 16:46:19.577, clock=0]
org notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-05-27 16:46:19.579, clock=0]
org notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-05-27 16:46:19.581, clock=0]
org notification: Tile [id=null, cell=Cell [x=4, y=3], subject=blue, time=2015-05-27 16:46:19.583, clock=0]
org notification: Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-05-27 16:46:19.585, clock=0]
org notification: Tile [id=null, cell=Cell [x=4, y=5], subject=yellow, time=2015-05-27 16:46:19.587, clock=0]
org notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-05-27 16:46:19.589, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=0], subject=yellow, time=2015-05-27 16:46:19.59, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-05-27 16:46:19.592, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=2], subject=brown, time=2015-05-27 16:46:19.594, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=3], subject=yellow, time=2015-05-27 16:46:19.598, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=4], subject=blue, time=2015-05-27 16:46:19.601, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=5], subject=brown, time=2015-05-27 16:46:19.603, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-05-27 16:46:19.605, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=0], subject=blue, time=2015-05-27 16:46:19.607, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=1], subject=brown, time=2015-05-27 16:46:19.609, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=2], subject=white, time=2015-05-27 16:46:19.611, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=3], subject=brown, time=2015-05-27 16:46:19.613, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=4], subject=white, time=2015-05-27 16:46:19.614, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=5], subject=brown, time=2015-05-27 16:46:19.616, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-05-27 16:46:19.618, clock=0]
[Planbase]:{	AdoptP(rejectRequests(500));
	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	AdoptP(movedTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[AdoptP(rejectRequests(500)); aprohibition(rejectRequests(500) -> reduce(500), priority 0), AdoptP(movedTooFast(300)); aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	AdoptP(rejectRequests(500));
	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	AdoptP(movedTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	AdoptP(rejectRequests(500));
	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	AdoptP(movedTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
},
{	adoptz(surround(3, 3, 700) : 27 May 2015 16:03:47 GMT, priority 10)
}


[new scheduled]:[AdoptP(rejectRequests(500)); aprohibition(rejectRequests(500) -> reduce(500), priority 0), AdoptP(movedTooFast(300)); aprohibition(moveTooFast(300) -> reduce(300), priority 0), adoptz(surround(3, 3, 700) : 27 May 2015 16:03:47 GMT, priority 10)]
[After]:{	AdoptP(rejectRequests(500));
	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	AdoptP(movedTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
},
{	adoptz(surround(3, 3, 700) : 27 May 2015 16:03:47 GMT, priority 10)
}


[Planbase]:{	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[aprohibition(rejectRequests(500) -> reduce(500), priority 0), aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[Planbase]:{	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[Surround(3, 3); sendSouth(a10, 3, 3, 100); sendWest(a20, 3, 3, 100); sendEast(a30, 3, 3, 100); sendNorth(a40, 3, 3, 100); color(white, a10, yes, 100); color(white, a20, yes, 100); color(white, a30, yes, 100); color(white, a40, yes, 100); color(blue, a10, no, 100); color(blue, a20, no, 100); color(blue, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(3, 3, 700) : Infinite, priority 10), aprohibition(rejectRequests(500) -> reduce(500), priority 0), aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	Surround(3, 3);
	sendSouth(a10, 3, 3, 100);
	sendWest(a20, 3, 3, 100);
	sendEast(a30, 3, 3, 100);
	sendNorth(a40, 3, 3, 100);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	sendSouth(a10, 3, 3, 100);
	sendWest(a20, 3, 3, 100);
	sendEast(a30, 3, 3, 100);
	sendNorth(a40, 3, 3, 100);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
}


[new scheduled]:[sendSouth(a10, 3, 3, 100); sendWest(a20, 3, 3, 100); sendEast(a30, 3, 3, 100); sendNorth(a40, 3, 3, 100); color(white, a10, yes, 100); color(white, a20, yes, 100); color(white, a30, yes, 100); color(white, a40, yes, 100); color(blue, a10, no, 100); color(blue, a20, no, 100); color(blue, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(3, 3, 700) : Infinite, priority 10)]
[After]:{	sendSouth(a10, 3, 3, 100);
	sendWest(a20, 3, 3, 100);
	sendEast(a30, 3, 3, 100);
	sendNorth(a40, 3, 3, 100);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
}


[Planbase]:{	@ctenv(setGoal(a10, 3, 2, 3, 3, 100),L,0);
	sendWest(a20, 3, 3, 100);
	sendEast(a30, 3, 3, 100);
	sendNorth(a40, 3, 3, 100);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
}


[new scheduled]:[@ctenv(setGoal(a10, 3, 2, 3, 3, 100),L,0); sendWest(a20, 3, 3, 100); sendEast(a30, 3, 3, 100); sendNorth(a40, 3, 3, 100); color(white, a10, yes, 100); color(white, a20, yes, 100); color(white, a30, yes, 100); color(white, a40, yes, 100); color(blue, a10, no, 100); color(blue, a20, no, 100); color(blue, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(3, 3, 700) : Infinite, priority 10)]
[After]:{	@ctenv(setGoal(a10, 3, 2, 3, 3, 100),L,0);
	sendWest(a20, 3, 3, 100);
	sendEast(a30, 3, 3, 100);
	sendNorth(a40, 3, 3, 100);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
}


agent writes: SetGoal [id=null, agent=a10, cell=Cell [x=3, y=2], goal=Cell [x=3, y=3], sanction=100, clock=5, time=2015-05-27 16:47:07.894]
org notification: SetGoal [id=null, agent=a10, cell=Cell [x=3, y=2], goal=Cell [x=3, y=3], sanction=100, clock=5, time=2015-05-27 16:47:07.894]
object notification: Obligation [subject=a10, obligation=[at(3, 2, a10)], sanction=[reduce(a10, 700)], deadline=31, time=2015-05-27 16:47:07.9, clock=5]
Event processed adoptObligation(at(3, 2, a10), 31, reduce(a10, 700))
[Planbase]:{	@ctenv(setGoal(a20, 2, 3, 3, 3, 100),L,0);
	sendEast(a30, 3, 3, 100);
	sendNorth(a40, 3, 3, 100);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	adoptObligation(at(3, 2, a10), 31, reduce(a10, 700))
}


[new scheduled]:[@ctenv(setGoal(a20, 2, 3, 3, 3, 100),L,0); sendEast(a30, 3, 3, 100); sendNorth(a40, 3, 3, 100); color(white, a10, yes, 100); color(white, a20, yes, 100); color(white, a30, yes, 100); color(white, a40, yes, 100); color(blue, a10, no, 100); color(blue, a20, no, 100); color(blue, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(3, 3, 700) : Infinite, priority 10), adoptObligation(at(3, 2, a10), 31, reduce(a10, 700))]
[After]:{	@ctenv(setGoal(a20, 2, 3, 3, 3, 100),L,0);
	sendEast(a30, 3, 3, 100);
	sendNorth(a40, 3, 3, 100);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	adoptObligation(at(3, 2, a10), 31, reduce(a10, 700))
}


agent writes: SetGoal [id=null, agent=a20, cell=Cell [x=2, y=3], goal=Cell [x=3, y=3], sanction=100, clock=5, time=2015-05-27 16:47:07.972]
org notification: SetGoal [id=null, agent=a20, cell=Cell [x=2, y=3], goal=Cell [x=3, y=3], sanction=100, clock=5, time=2015-05-27 16:47:07.972]
[Planbase]:{	@ctenv(setGoal(a30, 4, 3, 3, 3, 100),L,0);
	sendNorth(a40, 3, 3, 100);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	adoptz(at(3, 2, 700) : 27 May 2015 16:03:47 GMT, priority 10)
}


[new scheduled]:[@ctenv(setGoal(a30, 4, 3, 3, 3, 100),L,0); sendNorth(a40, 3, 3, 100); color(white, a10, yes, 100); color(white, a20, yes, 100); color(white, a30, yes, 100); color(white, a40, yes, 100); color(blue, a10, no, 100); color(blue, a20, no, 100); color(blue, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(3, 3, 700) : Infinite, priority 10), adoptz(at(3, 2, 700) : 27 May 2015 16:03:47 GMT, priority 10)]
[After]:{	@ctenv(setGoal(a30, 4, 3, 3, 3, 100),L,0);
	sendNorth(a40, 3, 3, 100);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	adoptz(at(3, 2, 700) : 27 May 2015 16:03:47 GMT, priority 10)
}


agent writes: SetGoal [id=null, agent=a30, cell=Cell [x=4, y=3], goal=Cell [x=3, y=3], sanction=100, clock=5, time=2015-05-27 16:47:08.056]
org notification: SetGoal [id=null, agent=a30, cell=Cell [x=4, y=3], goal=Cell [x=3, y=3], sanction=100, clock=5, time=2015-05-27 16:47:08.056]
object notification: Obligation [subject=a30, obligation=[at(4, 3, a30)], sanction=[reduce(a30, 700)], deadline=31, time=2015-05-27 16:47:08.06, clock=5]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	@ctenv(setGoal(a40, 3, 4, 3, 3, 100),L,0);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), @ctenv(setGoal(a40, 3, 4, 3, 3, 100),L,0); color(white, a10, yes, 100); color(white, a20, yes, 100); color(white, a30, yes, 100); color(white, a40, yes, 100); color(blue, a10, no, 100); color(blue, a20, no, 100); color(blue, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(3, 3, 700) : Infinite, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(setGoal(a40, 3, 4, 3, 3, 100),L,0);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
}


Event processed adoptObligation(at(4, 3, a30), 31, reduce(a30, 700))
agent writes: SetGoal [id=null, agent=a40, cell=Cell [x=3, y=4], goal=Cell [x=3, y=3], sanction=100, clock=5, time=2015-05-27 16:47:08.183]
org notification: SetGoal [id=null, agent=a40, cell=Cell [x=3, y=4], goal=Cell [x=3, y=3], sanction=100, clock=5, time=2015-05-27 16:47:08.183]
object notification: Obligation [subject=a40, obligation=[at(3, 4, a40)], sanction=[reduce(a40, 700)], deadline=31, time=2015-05-27 16:47:08.186, clock=5]
[Planbase]:{	adoptObligation(at(4, 3, a30), 31, reduce(a30, 700))
}


[new scheduled]:[adoptObligation(at(4, 3, a30), 31, reduce(a30, 700))]
[After]:{	adoptObligation(at(4, 3, a30), 31, reduce(a30, 700))
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(setColor(a10, white, yes, 100),L,0);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), @ctenv(setColor(a10, white, yes, 100),L,0); color(white, a20, yes, 100); color(white, a30, yes, 100); color(white, a40, yes, 100); color(blue, a10, no, 100); color(blue, a20, no, 100); color(blue, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(3, 3, 700) : Infinite, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(setColor(a10, white, yes, 100),L,0);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
}


Event processed adoptObligation(at(3, 4, a40), 31, reduce(a40, 700))
agent writes: Color [id=null, color=white, agent=a10, type=yes, sanction=100, time=2015-05-27 16:47:08.362, clock=5]
[Planbase]:{	adoptz(at(4, 3, 700) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[adoptz(at(4, 3, 700) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	adoptz(at(4, 3, 700) : 27 May 2015 16:03:48 GMT, priority 10)
}


org notification: Color [id=null, color=white, agent=a10, type=yes, sanction=100, time=2015-05-27 16:47:08.362, clock=5]
object notification: Obligation [subject=a10, obligation=[color(white, a10)], sanction=[reduce(a10, 100)], deadline=25, time=2015-05-27 16:47:08.371, clock=5]
[Planbase]:{	adoptObligation(at(3, 4, a40), 31, reduce(a40, 700))
}


[new scheduled]:[adoptObligation(at(3, 4, a40), 31, reduce(a40, 700))]
[After]:{	adoptObligation(at(3, 4, a40), 31, reduce(a40, 700))
}


Event processed adoptObligation(color(white, a10), 25, reduce(a10, 100))
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(setColor(a20, white, yes, 100),L,0);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	adoptObligation(color(white, a10), 25, reduce(a10, 100))
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), @ctenv(setColor(a20, white, yes, 100),L,0); color(white, a30, yes, 100); color(white, a40, yes, 100); color(blue, a10, no, 100); color(blue, a20, no, 100); color(blue, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(3, 3, 700) : Infinite, priority 10), adoptObligation(color(white, a10), 25, reduce(a10, 100))]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(setColor(a20, white, yes, 100),L,0);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	adoptObligation(color(white, a10), 25, reduce(a10, 100))
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	adoptz(at(3, 4, 700) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[adoptz(at(3, 4, 700) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	adoptz(at(3, 4, 700) : 27 May 2015 16:03:48 GMT, priority 10)
}


agent writes: Color [id=null, color=white, agent=a20, type=yes, sanction=100, time=2015-05-27 16:47:08.517, clock=5]
org notification: Color [id=null, color=white, agent=a20, type=yes, sanction=100, time=2015-05-27 16:47:08.517, clock=5]
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(setColor(a30, white, yes, 100),L,0);
	color(white, a40, yes, 100);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), @ctenv(setColor(a30, white, yes, 100),L,0); color(white, a40, yes, 100); color(blue, a10, no, 100); color(blue, a20, no, 100); color(blue, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(3, 3, 700) : Infinite, priority 10), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(setColor(a30, white, yes, 100),L,0);
	color(white, a40, yes, 100);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A1,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A1,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


agent writes: Color [id=null, color=white, agent=a30, type=yes, sanction=100, time=2015-05-27 16:47:08.683, clock=5]
org notification: Color [id=null, color=white, agent=a30, type=yes, sanction=100, time=2015-05-27 16:47:08.683, clock=5]
object notification: Obligation [subject=a30, obligation=[color(white, a30)], sanction=[reduce(a30, 100)], deadline=25, time=2015-05-27 16:47:08.686, clock=5]
Event processed adoptObligation(color(white, a30), 25, reduce(a30, 100))
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(setColor(a40, white, yes, 100),L,0);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
}


[new scheduled]:[if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), @ctenv(setColor(a40, white, yes, 100),L,0); color(blue, a10, no, 100); color(blue, a20, no, 100); color(blue, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(3, 3, 700) : Infinite, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(setColor(a40, white, yes, 100),L,0);
	color(blue, a10, no, 100);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	B([A1,B]=[4,3]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptObligation(color(white, a30), 25, reduce(a30, 100))
}


[new scheduled]:[B([A1,B]=[4,3]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptObligation(color(white, a30), 25, reduce(a30, 100))]
[After]:{	B([A1,B]=[4,3]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptObligation(color(white, a30), 25, reduce(a30, 100))
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A1,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A1,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


agent writes: Color [id=null, color=white, agent=a40, type=yes, sanction=100, time=2015-05-27 16:47:08.821, clock=5]
org notification: Color [id=null, color=white, agent=a40, type=yes, sanction=100, time=2015-05-27 16:47:08.821, clock=5]
object notification: Obligation [subject=a40, obligation=[color(white, a40)], sanction=[reduce(a40, 100)], deadline=25, time=2015-05-27 16:47:08.824, clock=5]
Event processed adoptObligation(color(white, a40), 25, reduce(a40, 100))
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(setColor(a10, blue, no, 100),L,0);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), @ctenv(setColor(a10, blue, no, 100),L,0); color(blue, a20, no, 100); color(blue, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(3, 3, 700) : Infinite, priority 10), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(setColor(a10, blue, no, 100),L,0);
	color(blue, a20, no, 100);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 4, 3, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, 4, 3, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 4, 3, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	B([A1,B]=[3,4]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptObligation(color(white, a40), 25, reduce(a40, 100))
}


[new scheduled]:[B([A1,B]=[3,4]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptObligation(color(white, a40), 25, reduce(a40, 100))]
[After]:{	B([A1,B]=[3,4]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptObligation(color(white, a40), 25, reduce(a40, 100))
}


agent writes: Color [id=null, color=blue, agent=a10, type=no, sanction=100, time=2015-05-27 16:47:08.97, clock=5]
org notification: Color [id=null, color=blue, agent=a10, type=no, sanction=100, time=2015-05-27 16:47:08.97, clock=5]
object notification: Prohibition [subject=a10, prohibition=[color(blue, a10)], sanction=[reduce(a10, 100)], clock=5, time=2015-05-27 16:47:08.973]
Event processed adoptProhibition(color(blue, a10), reduce(a10, 100))
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(setColor(a20, blue, no, 100),L,0);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	adoptProhibition(color(blue, a10), reduce(a10, 100))
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), @ctenv(setColor(a20, blue, no, 100),L,0); color(blue, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(3, 3, 700) : Infinite, priority 10), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), adoptProhibition(color(blue, a10), reduce(a10, 100))]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(setColor(a20, blue, no, 100),L,0);
	color(blue, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	adoptProhibition(color(blue, a10), reduce(a10, 100))
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	@ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 4, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 4, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, 3, 4, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 4, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 4, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


agent writes: Color [id=null, color=blue, agent=a20, type=no, sanction=100, time=2015-05-27 16:47:09.122, clock=5]
a30[CTAH] going goal: 4,3 color: neco
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(setColor(a30, blue, no, 100),L,0);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	AdoptP(useColor(blue, 100));
	aprohibition(useColor(blue, 100) -> reduce(100), priority 0)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), @ctenv(setColor(a30, blue, no, 100),L,0); color(blue, a40, no, 100); dropgoal(surround(3, 3, 700) : Infinite, priority 10), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), AdoptP(useColor(blue, 100)); aprohibition(useColor(blue, 100) -> reduce(100), priority 0)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(setColor(a30, blue, no, 100),L,0);
	color(blue, a40, no, 100);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	AdoptP(useColor(blue, 100));
	aprohibition(useColor(blue, 100) -> reduce(100), priority 0)
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, any, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), @ctenv(moveStepToGoalTest(neco, any, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, any, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


agent writes: Color [id=null, color=blue, agent=a30, type=no, sanction=100, time=2015-05-27 16:47:09.281, clock=5]
a40[CTAH] going goal: 3,4 color: neco
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(setColor(a40, blue, no, 100),L,0);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	aprohibition(useColor(blue, 100) -> reduce(100), priority 0)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), @ctenv(setColor(a40, blue, no, 100),L,0); dropgoal(surround(3, 3, 700) : Infinite, priority 10), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), aprohibition(useColor(blue, 100) -> reduce(100), priority 0)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(setColor(a40, blue, no, 100),L,0);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	aprohibition(useColor(blue, 100) -> reduce(100), priority 0)
}


agent writes: Color [id=null, color=blue, agent=a40, type=no, sanction=100, time=2015-05-27 16:47:09.436, clock=6]
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A1,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A1,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	B([A1,B]=[3,2]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[B([A1,B]=[3,2]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	B([A1,B]=[3,2]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(700>100) then @ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a10[CTAH] going goal: 3,2 color: blue
org notification: Color [id=null, color=blue, agent=a20, type=no, sanction=100, time=2015-05-27 16:47:09.122, clock=5]
object notification: Time [clock=6, time=2015-05-27 16:47:09.323]
org notification: Time [clock=6, time=2015-05-27 16:47:09.323]
object notification: Time [clock=6, time=2015-05-27 16:47:09.323]
org notification: Color [id=null, color=blue, agent=a30, type=no, sanction=100, time=2015-05-27 16:47:09.281, clock=5]
object notification: Time [clock=6, time=2015-05-27 16:47:09.323]
object notification: Prohibition [subject=a30, prohibition=[color(blue, a30)], sanction=[reduce(a30, 100)], clock=6, time=2015-05-27 16:47:10.336]
org notification: Color [id=null, color=blue, agent=a40, type=no, sanction=100, time=2015-05-27 16:47:09.436, clock=6]
object notification: Prohibition [subject=a40, prohibition=[color(blue, a40)], sanction=[reduce(a40, 100)], clock=6, time=2015-05-27 16:47:10.347]
a40[CTAH] paths: 1000
a40[CTAH] path: 0
a40[CTAH] path: Path: [6][0] [6][1] [6][2] [6][3] [5][3] [4][3] [4][4] [3][4]

a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] found a chip....: (R:6,C:1)
a40[CTAH] moveStepToGoalTest sent proposal for: [6,1,1,6410]
org notification: Proposal [id=6410, agent=a40, agent2=a20, clock=6, time=2015-05-27 16:47:16.584]
a30[CTAH] paths: 1000
Need to wait 4 more seconds
a10[CTAH] paths: 1000
Need to wait 2 more seconds
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 3
[MSG] i'm: 3
AGENT : got response to offer
org notification: Response [id=6410, response=accepted, clock=6, time=2015-05-27 16:47:18.178]
object notification: Time [clock=7, time=2015-05-27 16:47:19.33]
object notification: Time [clock=7, time=2015-05-27 16:47:19.33]
object notification: Time [clock=7, time=2015-05-27 16:47:19.33]
org notification: Time [clock=7, time=2015-05-27 16:47:19.33]
a10[CTAH] path: 0
a10[CTAH] path: 1
a10[CTAH] path: 2
a10[CTAH] path: 3
a10[CTAH] path: 4
a10[CTAH] path: 5
a10[CTAH] path: 6
a10[CTAH] path: 7
a10[CTAH] path: 8
a10[CTAH] path: 9
a10[CTAH] path: 10
a10[CTAH] path: 11
a10[CTAH] path: 12
a10[CTAH] path: 13
a10[CTAH] path: 14
a10[CTAH] path: 15
a10[CTAH] path: 16
a10[CTAH] path: 17
a10[CTAH] path: 18
a10[CTAH] path: 19
a10[CTAH] path: 20
a10[CTAH] path: 21
a10[CTAH] path: 22
a10[CTAH] path: 23
a10[CTAH] path: 24
a10[CTAH] path: 25
a10[CTAH] path: 26
a10[CTAH] path: 27
a10[CTAH] path: 28
a10[CTAH] path: 29
a10[CTAH] path: 30
a10[CTAH] path: 31
a10[CTAH] path: 32
a10[CTAH] path: 33
a10[CTAH] path: 34
a10[CTAH] path: 35
a10[CTAH] path: 36
a10[CTAH] path: 37
a10[CTAH] path: 38
a10[CTAH] path: 39
a10[CTAH] path: 40
a10[CTAH] path: 41
a10[CTAH] path: 42
a10[CTAH] path: 43
a10[CTAH] path: 44
a10[CTAH] path: 45
a10[CTAH] path: 46
a10[CTAH] path: 47
a10[CTAH] path: 48
a10[CTAH] path: 49
a10[CTAH] path: 50
a10[CTAH] path: 51
a10[CTAH] path: 52
a10[CTAH] path: 53
a10[CTAH] path: 54
a10[CTAH] path: 55
a10[CTAH] path: 56
a10[CTAH] path: 57
a10[CTAH] path: 58
a10[CTAH] path: 59
a10[CTAH] path: 60
a10[CTAH] path: 61
a10[CTAH] path: 62
a10[CTAH] path: 63
a10[CTAH] path: 64
a10[CTAH] path: 65
a10[CTAH] path: 66
a10[CTAH] path: 67
a10[CTAH] path: 68
a10[CTAH] path: 69
a10[CTAH] path: 70
a10[CTAH] path: 71
a10[CTAH] path: 72
a10[CTAH] path: 73
a10[CTAH] path: 74
a10[CTAH] path: 75
a10[CTAH] path: 76
a10[CTAH] path: 77
a10[CTAH] path: 78
a10[CTAH] path: 79
a10[CTAH] path: 80
a10[CTAH] path: 81
a10[CTAH] path: 82
a10[CTAH] path: 83
a10[CTAH] path: 84
a10[CTAH] path: 85
a10[CTAH] path: 86
a10[CTAH] path: 87
a10[CTAH] path: 88
a10[CTAH] path: 89
a10[CTAH] path: 90
a10[CTAH] path: 91
a10[CTAH] path: 92
a10[CTAH] path: 93
a10[CTAH] path: 94
a10[CTAH] path: 95
a10[CTAH] path: 96
a10[CTAH] path: 97
a10[CTAH] path: 98
a10[CTAH] path: 99
a10[CTAH] path: 100
a10[CTAH] path: 101
a10[CTAH] path: 102
a10[CTAH] path: 103
a10[CTAH] path: 104
a10[CTAH] path: 105
a10[CTAH] path: 106
a10[CTAH] path: 107
a10[CTAH] path: 108
a10[CTAH] path: 109
a10[CTAH] path: 110
a10[CTAH] path: 111
a10[CTAH] path: 112
a10[CTAH] path: 113
a10[CTAH] path: 114
a10[CTAH] path: 115
a10[CTAH] path: 116
a10[CTAH] path: 117
a10[CTAH] path: 118
a10[CTAH] path: 119
a10[CTAH] path: 120
a10[CTAH] path: 121
a10[CTAH] path: 122
a10[CTAH] path: 123
a10[CTAH] path: 124
a10[CTAH] path: 125
a10[CTAH] path: 126
a10[CTAH] path: 127
a10[CTAH] path: 128
a10[CTAH] path: 129
a10[CTAH] path: 130
a10[CTAH] path: 131
a10[CTAH] path: 132
a10[CTAH] path: 133
a10[CTAH] path: 134
a10[CTAH] path: 135
a10[CTAH] path: 136
a10[CTAH] path: 137
a10[CTAH] path: 138
a10[CTAH] path: 139
a10[CTAH] path: 140
a10[CTAH] path: 141
a10[CTAH] path: 142
a10[CTAH] path: 143
a10[CTAH] path: 144
a10[CTAH] path: 145
a10[CTAH] path: 146
a10[CTAH] path: 147
a10[CTAH] path: 148
a10[CTAH] path: 149
a10[CTAH] path: 150
a10[CTAH] path: 151
a10[CTAH] path: 152
a10[CTAH] path: 153
a10[CTAH] path: 154
a10[CTAH] path: 155
a10[CTAH] path: 156
a10[CTAH] path: 157
a10[CTAH] path: 158
a10[CTAH] path: 159
a10[CTAH] path: 160
a10[CTAH] path: 161
a10[CTAH] path: 162
a10[CTAH] path: 163
a10[CTAH] path: 164
a10[CTAH] path: 165
a10[CTAH] path: 166
a10[CTAH] path: 167
a10[CTAH] path: 168
a10[CTAH] path: 169
a10[CTAH] path: 170
a10[CTAH] path: 171
a10[CTAH] path: 172
a10[CTAH] path: 173
a10[CTAH] path: 174
a10[CTAH] path: 175
a10[CTAH] path: 176
a10[CTAH] path: 177
a10[CTAH] path: 178
a10[CTAH] path: 179
a10[CTAH] path: 180
a10[CTAH] path: 181
a10[CTAH] path: 182
a10[CTAH] path: 183
a10[CTAH] path: 184
a10[CTAH] path: 185
a10[CTAH] path: 186
a10[CTAH] path: 187
a10[CTAH] path: 188
a10[CTAH] path: 189
a10[CTAH] path: 190
a10[CTAH] path: 191
a10[CTAH] path: 192
a10[CTAH] path: 193
a10[CTAH] path: 194
a10[CTAH] path: 195
a10[CTAH] path: 196
a10[CTAH] path: 197
a10[CTAH] path: 198
a10[CTAH] path: 199
a10[CTAH] path: 200
a10[CTAH] path: 201
a10[CTAH] path: 202
a10[CTAH] path: 203
a10[CTAH] path: 204
a10[CTAH] path: 205
a10[CTAH] path: 206
a10[CTAH] path: 207
a10[CTAH] path: 208
a10[CTAH] path: 209
a10[CTAH] path: 210
a10[CTAH] path: 211
a10[CTAH] path: 212
a10[CTAH] path: 213
a10[CTAH] path: 214
a10[CTAH] path: 215
a10[CTAH] path: 216
a10[CTAH] path: 217
a10[CTAH] path: 218
a10[CTAH] path: 219
a10[CTAH] path: 220
a10[CTAH] path: 221
a10[CTAH] path: 222
a10[CTAH] path: 223
a10[CTAH] path: 224
a10[CTAH] path: 225
a10[CTAH] path: 226
a10[CTAH] path: 227
a10[CTAH] path: 228
a10[CTAH] path: 229
a10[CTAH] path: 230
a10[CTAH] path: 231
a10[CTAH] path: 232
a10[CTAH] path: 233
a10[CTAH] path: 234
a10[CTAH] path: 235
a10[CTAH] path: 236
a10[CTAH] path: 237
a10[CTAH] path: 238
a10[CTAH] path: 239
a10[CTAH] path: 240
a10[CTAH] path: 241
a10[CTAH] path: 242
a10[CTAH] path: 243
a10[CTAH] path: 244
a10[CTAH] path: 245
a10[CTAH] path: 246
a10[CTAH] path: 247
a10[CTAH] path: 248
a10[CTAH] path: 249
a10[CTAH] path: 250
a10[CTAH] path: 251
a10[CTAH] path: 252
a10[CTAH] path: 253
a10[CTAH] path: 254
a10[CTAH] path: 255
a10[CTAH] path: 256
a10[CTAH] path: 257
a10[CTAH] path: 258
a10[CTAH] path: 259
a10[CTAH] path: 260
a10[CTAH] path: 261
a10[CTAH] path: 262
a10[CTAH] path: 263
a10[CTAH] path: 264
a10[CTAH] path: 265
a10[CTAH] path: 266
a10[CTAH] path: 267
a10[CTAH] path: 268
a10[CTAH] path: 269
a10[CTAH] path: 270
a10[CTAH] path: 271
a10[CTAH] path: 272
a10[CTAH] path: 273
a10[CTAH] path: 274
a10[CTAH] path: 275
a10[CTAH] path: 276
a10[CTAH] path: 277
a10[CTAH] path: 278
a10[CTAH] path: 279
a10[CTAH] path: 280
a10[CTAH] path: 281
a10[CTAH] path: 282
a10[CTAH] path: 283
a10[CTAH] path: 284
a10[CTAH] path: 285
a10[CTAH] path: 286
a10[CTAH] path: 287
a10[CTAH] path: 288
a10[CTAH] path: 289
a10[CTAH] path: 290
a10[CTAH] path: 291
a10[CTAH] path: 292
a10[CTAH] path: 293
a10[CTAH] path: 294
a10[CTAH] path: 295
a10[CTAH] path: 296
a10[CTAH] path: 297
a10[CTAH] path: 298
a10[CTAH] path: 299
a10[CTAH] path: 300
a10[CTAH] path: 301
a10[CTAH] path: 302
a10[CTAH] path: 303
a10[CTAH] path: 304
a10[CTAH] path: 305
a10[CTAH] path: 306
a10[CTAH] path: 307
a10[CTAH] path: 308
a10[CTAH] path: 309
a10[CTAH] path: 310
a10[CTAH] path: 311
a10[CTAH] path: 312
a10[CTAH] path: 313
a10[CTAH] path: 314
a10[CTAH] path: 315
a10[CTAH] path: 316
a10[CTAH] path: 317
a10[CTAH] path: 318
a10[CTAH] path: 319
a10[CTAH] path: 320
a10[CTAH] path: 321
a10[CTAH] path: 322
a10[CTAH] path: 323
a10[CTAH] path: 324
a10[CTAH] path: 325
a10[CTAH] path: 326
a10[CTAH] path: 327
a10[CTAH] path: 328
a10[CTAH] path: 329
a10[CTAH] path: 330
a10[CTAH] path: 331
a10[CTAH] path: 332
a10[CTAH] path: 333
a10[CTAH] path: 334
a10[CTAH] path: 335
a10[CTAH] path: 336
a10[CTAH] path: 337
a10[CTAH] path: 338
a10[CTAH] path: 339
a10[CTAH] path: 340
a10[CTAH] path: 341
a10[CTAH] path: 342
a10[CTAH] path: 343
a10[CTAH] path: 344
a10[CTAH] path: 345
a10[CTAH] path: 346
a10[CTAH] path: 347
a10[CTAH] path: 348
a10[CTAH] path: 349
a10[CTAH] path: 350
a10[CTAH] path: 351
a10[CTAH] path: 352
a10[CTAH] path: 353
a10[CTAH] path: 354
a10[CTAH] path: 355
a10[CTAH] path: 356
a10[CTAH] path: 357
a10[CTAH] path: 358
a10[CTAH] path: 359
a10[CTAH] path: 360
a10[CTAH] path: 361
a10[CTAH] path: 362
a10[CTAH] path: 363
a10[CTAH] path: 364
a10[CTAH] path: 365
a10[CTAH] path: 366
a10[CTAH] path: 367
a10[CTAH] path: 368
a10[CTAH] path: 369
a10[CTAH] path: 370
a10[CTAH] path: 371
a10[CTAH] path: 372
a10[CTAH] path: 373
a10[CTAH] path: 374
a10[CTAH] path: 375
a10[CTAH] path: 376
a10[CTAH] path: 377
a10[CTAH] path: 378
a10[CTAH] path: 379
a10[CTAH] path: 380
a10[CTAH] path: 381
a10[CTAH] path: 382
a10[CTAH] path: 383
a10[CTAH] path: 384
a10[CTAH] path: 385
a10[CTAH] path: 386
a10[CTAH] path: 387
a10[CTAH] path: 388
a10[CTAH] path: 389
a10[CTAH] path: 390
a10[CTAH] path: 391
a10[CTAH] path: 392
a10[CTAH] path: 393
a10[CTAH] path: 394
a10[CTAH] path: 395
a10[CTAH] path: 396
a10[CTAH] path: 397
a10[CTAH] path: 398
a10[CTAH] path: 399
a10[CTAH] path: 400
a10[CTAH] path: 401
a10[CTAH] path: 402
a10[CTAH] path: 403
a10[CTAH] path: 404
a10[CTAH] path: 405
a10[CTAH] path: 406
a10[CTAH] path: 407
a10[CTAH] path: 408
a10[CTAH] path: 409
a10[CTAH] path: 410
a10[CTAH] path: 411
a10[CTAH] path: 412
a10[CTAH] path: 413
a10[CTAH] path: 414
a10[CTAH] path: 415
a10[CTAH] path: 416
a10[CTAH] path: 417
a10[CTAH] path: 418
a10[CTAH] path: 419
a10[CTAH] path: 420
a10[CTAH] path: 421
a10[CTAH] path: 422
a10[CTAH] path: 423
a10[CTAH] path: 424
a10[CTAH] path: 425
a10[CTAH] path: 426
a10[CTAH] path: 427
a10[CTAH] path: 428
a10[CTAH] path: 429
a10[CTAH] path: 430
a10[CTAH] path: 431
a10[CTAH] path: 432
a10[CTAH] path: 433
a10[CTAH] path: 434
a10[CTAH] path: 435
a10[CTAH] path: 436
a10[CTAH] path: 437
a10[CTAH] path: 438
a10[CTAH] path: 439
a10[CTAH] path: 440
a10[CTAH] path: 441
a10[CTAH] path: 442
a10[CTAH] path: 443
a10[CTAH] path: 444
a10[CTAH] path: 445
a10[CTAH] path: 446
a10[CTAH] path: 447
a10[CTAH] path: 448
a10[CTAH] path: 449
a10[CTAH] path: 450
a10[CTAH] path: 451
a10[CTAH] path: 452
a10[CTAH] path: 453
a10[CTAH] path: 454
a10[CTAH] path: 455
a10[CTAH] path: 456
a10[CTAH] path: 457
a10[CTAH] path: 458
a10[CTAH] path: 459
a10[CTAH] path: 460
a10[CTAH] path: 461
a10[CTAH] path: 462
a10[CTAH] path: 463
a10[CTAH] path: 464
a10[CTAH] path: 465
a10[CTAH] path: 466
a10[CTAH] path: 467
a10[CTAH] path: 468
a10[CTAH] path: 469
a10[CTAH] path: 470
a10[CTAH] path: 471
a10[CTAH] path: 472
a10[CTAH] path: 473
a10[CTAH] path: 474
a10[CTAH] path: 475
a10[CTAH] path: 476
a10[CTAH] path: 477
a10[CTAH] path: 478
a10[CTAH] path: 479
a10[CTAH] path: 480
a10[CTAH] path: 481
a10[CTAH] path: 482
a10[CTAH] path: 483
a10[CTAH] path: 484
a10[CTAH] path: 485
a10[CTAH] path: 486
a10[CTAH] path: 487
a10[CTAH] path: 488
a10[CTAH] path: 489
a10[CTAH] path: 490
a10[CTAH] path: 491
a10[CTAH] path: 492
a10[CTAH] path: 493
a10[CTAH] path: 494
a10[CTAH] path: 495
a10[CTAH] path: 496
a10[CTAH] path: 497
a10[CTAH] path: 498
a10[CTAH] path: 499
a10[CTAH] path: 500
a10[CTAH] path: 501
a10[CTAH] path: 502
a10[CTAH] path: 503
a10[CTAH] path: 504
a10[CTAH] path: 505
a10[CTAH] path: 506
a10[CTAH] path: 507
a10[CTAH] path: 508
a10[CTAH] path: 509
a10[CTAH] path: 510
a10[CTAH] path: 511
a10[CTAH] path: 512
a10[CTAH] path: 513
a10[CTAH] path: 514
a10[CTAH] path: 515
a10[CTAH] path: 516
a10[CTAH] path: 517
a10[CTAH] path: 518
a10[CTAH] path: 519
a10[CTAH] path: 520
a10[CTAH] path: 521
a10[CTAH] path: 522
a10[CTAH] path: 523
a10[CTAH] path: 524
a10[CTAH] path: 525
a10[CTAH] path: 526
a10[CTAH] path: 527
a10[CTAH] path: 528
a10[CTAH] path: 529
a10[CTAH] path: 530
a10[CTAH] path: 531
a10[CTAH] path: 532
a10[CTAH] path: 533
a10[CTAH] path: 534
a10[CTAH] path: 535
a10[CTAH] path: 536
a10[CTAH] path: 537
a10[CTAH] path: 538
a10[CTAH] path: 539
a10[CTAH] path: 540
a10[CTAH] path: 541
a10[CTAH] path: 542
a10[CTAH] path: 543
a10[CTAH] path: 544
a10[CTAH] path: 545
a10[CTAH] path: 546
a10[CTAH] path: 547
a10[CTAH] path: 548
a10[CTAH] path: 549
a10[CTAH] path: 550
a10[CTAH] path: 551
a10[CTAH] path: 552
a10[CTAH] path: 553
a10[CTAH] path: 554
a10[CTAH] path: 555
a10[CTAH] path: 556
a10[CTAH] path: 557
a10[CTAH] path: 558
a10[CTAH] path: 559
a10[CTAH] path: 560
a10[CTAH] path: 561
a10[CTAH] path: 562
a10[CTAH] path: 563
a10[CTAH] path: 564
a10[CTAH] path: 565
a10[CTAH] path: 566
a10[CTAH] path: 567
a10[CTAH] path: 568
a10[CTAH] path: 569
a10[CTAH] path: 570
a10[CTAH] path: 571
a10[CTAH] path: 572
a10[CTAH] path: 573
a10[CTAH] path: 574
a10[CTAH] path: 575
a10[CTAH] path: 576
a10[CTAH] path: 577
a10[CTAH] path: 578
a10[CTAH] path: 579
a10[CTAH] path: 580
a10[CTAH] path: 581
a10[CTAH] path: 582
a10[CTAH] path: 583
a10[CTAH] path: 584
a10[CTAH] path: 585
a10[CTAH] path: 586
a10[CTAH] path: 587
a10[CTAH] path: 588
a10[CTAH] path: 589
a10[CTAH] path: 590
a10[CTAH] path: 591
a10[CTAH] path: 592
a10[CTAH] path: 593
a10[CTAH] path: 594
a10[CTAH] path: 595
a10[CTAH] path: 596
a10[CTAH] path: 597
a10[CTAH] path: 598
a10[CTAH] path: 599
a10[CTAH] path: 600
a10[CTAH] path: 601
a10[CTAH] path: 602
a10[CTAH] path: 603
a10[CTAH] path: 604
a10[CTAH] path: 605
a10[CTAH] path: 606
a10[CTAH] path: 607
a10[CTAH] path: 608
a10[CTAH] path: 609
a10[CTAH] path: 610
a10[CTAH] path: 611
a10[CTAH] path: 612
a10[CTAH] path: 613
a10[CTAH] path: 614
a10[CTAH] path: 615
a10[CTAH] path: 616
a10[CTAH] path: 617
a10[CTAH] path: 618
a10[CTAH] path: 619
a10[CTAH] path: 620
a10[CTAH] path: 621
a10[CTAH] path: 622
a10[CTAH] path: 623
a10[CTAH] path: 624
a10[CTAH] path: 625
a10[CTAH] path: 626
a10[CTAH] path: 627
a10[CTAH] path: 628
a10[CTAH] path: 629
a10[CTAH] path: 630
a10[CTAH] path: 631
a10[CTAH] path: 632
a10[CTAH] path: 633
a10[CTAH] path: 634
a10[CTAH] path: 635
a10[CTAH] path: 636
a10[CTAH] path: 637
a10[CTAH] path: 638
a10[CTAH] path: 639
a10[CTAH] path: 640
a10[CTAH] path: 641
a10[CTAH] path: 642
a10[CTAH] path: 643
a10[CTAH] path: 644
a10[CTAH] path: 645
a10[CTAH] path: 646
a10[CTAH] path: 647
a10[CTAH] path: 648
a10[CTAH] path: 649
a10[CTAH] path: 650
a10[CTAH] path: 651
a10[CTAH] path: 652
a10[CTAH] path: 653
a10[CTAH] path: 654
a10[CTAH] path: 655
a10[CTAH] path: 656
a10[CTAH] path: 657
a10[CTAH] path: 658
a10[CTAH] path: 659
a10[CTAH] path: 660
a10[CTAH] path: 661
a10[CTAH] path: 662
a10[CTAH] path: 663
a10[CTAH] path: 664
a10[CTAH] path: 665
a10[CTAH] path: 666
a10[CTAH] path: 667
a10[CTAH] path: 668
a10[CTAH] path: 669
a10[CTAH] path: 670
a10[CTAH] path: 671
a10[CTAH] path: 672
a10[CTAH] path: 673
a10[CTAH] path: 674
a10[CTAH] path: 675
a10[CTAH] path: 676
a10[CTAH] path: 677
a10[CTAH] path: 678
a10[CTAH] path: 679
a10[CTAH] path: 680
a10[CTAH] path: 681
a10[CTAH] path: 682
a10[CTAH] path: 683
a10[CTAH] path: 684
a10[CTAH] path: 685
a10[CTAH] path: 686
a10[CTAH] path: 687
a10[CTAH] path: 688
a10[CTAH] path: 689
a10[CTAH] path: 690
a10[CTAH] path: 691
a10[CTAH] path: 692
a10[CTAH] path: 693
a10[CTAH] path: 694
a10[CTAH] path: 695
a10[CTAH] path: 696
a10[CTAH] path: 697
a10[CTAH] path: 698
a10[CTAH] path: 699
a10[CTAH] path: 700
a10[CTAH] path: 701
a10[CTAH] path: 702
a10[CTAH] path: 703
a10[CTAH] path: 704
a10[CTAH] path: 705
a10[CTAH] path: 706
a10[CTAH] path: 707
a10[CTAH] path: 708
a10[CTAH] path: 709
a10[CTAH] path: 710
a10[CTAH] path: 711
a10[CTAH] path: 712
a10[CTAH] path: 713
a10[CTAH] path: 714
a10[CTAH] path: 715
a10[CTAH] path: 716
a10[CTAH] path: 717
a10[CTAH] path: 718
a10[CTAH] path: 719
a10[CTAH] path: 720
a10[CTAH] path: 721
a10[CTAH] path: 722
a10[CTAH] path: 723
a10[CTAH] path: 724
a10[CTAH] path: 725
a10[CTAH] path: 726
a10[CTAH] path: 727
a10[CTAH] path: 728
a10[CTAH] path: 729
a10[CTAH] path: 730
a10[CTAH] path: 731
a10[CTAH] path: 732
a10[CTAH] path: 733
a10[CTAH] path: 734
a10[CTAH] path: 735
a10[CTAH] path: 736
a10[CTAH] path: 737
a10[CTAH] path: 738
a10[CTAH] path: 739
a10[CTAH] path: 740
a10[CTAH] path: 741
a10[CTAH] path: 742
a10[CTAH] path: 743
a10[CTAH] path: 744
a10[CTAH] path: 745
a10[CTAH] path: 746
a10[CTAH] path: 747
a10[CTAH] path: 748
a10[CTAH] path: 749
a10[CTAH] path: 750
a10[CTAH] path: 751
a10[CTAH] path: 752
a10[CTAH] path: 753
a10[CTAH] path: 754
a10[CTAH] path: 755
a10[CTAH] path: 756
a10[CTAH] path: 757
a10[CTAH] path: 758
a10[CTAH] path: 759
a10[CTAH] path: 760
a10[CTAH] path: 761
a10[CTAH] path: 762
a10[CTAH] path: 763
a10[CTAH] path: 764
a10[CTAH] path: 765
a10[CTAH] path: 766
a10[CTAH] path: 767
a10[CTAH] path: 768
a10[CTAH] path: 769
a10[CTAH] path: 770
a10[CTAH] path: 771
a10[CTAH] path: 772
a10[CTAH] path: 773
a10[CTAH] path: 774
a10[CTAH] path: 775
a10[CTAH] path: 776
a10[CTAH] path: 777
a10[CTAH] path: 778
a10[CTAH] path: 779
a10[CTAH] path: 780
a10[CTAH] path: 781
a10[CTAH] path: 782
a10[CTAH] path: 783
a10[CTAH] path: 784
a10[CTAH] path: 785
a10[CTAH] path: 786
a10[CTAH] path: 787
a10[CTAH] path: 788
a10[CTAH] path: 789
a10[CTAH] path: 790
a10[CTAH] path: 791
a10[CTAH] path: 792
a10[CTAH] path: 793
a10[CTAH] path: 794
a10[CTAH] path: 795
a10[CTAH] path: 796
a10[CTAH] path: 797
a10[CTAH] path: 798
a10[CTAH] path: 799
a10[CTAH] path: 800
a10[CTAH] path: 801
a10[CTAH] path: 802
a10[CTAH] path: 803
a10[CTAH] path: 804
a10[CTAH] path: 805
a10[CTAH] path: 806
a10[CTAH] path: 807
a10[CTAH] path: 808
a10[CTAH] path: 809
a10[CTAH] path: 810
a10[CTAH] path: 811
a10[CTAH] path: 812
a10[CTAH] path: 813
a10[CTAH] path: 814
a10[CTAH] path: 815
a10[CTAH] path: 816
a10[CTAH] path: 817
a10[CTAH] path: 818
a10[CTAH] path: 819
a10[CTAH] path: 820
a10[CTAH] path: 821
a10[CTAH] path: 822
a10[CTAH] path: 823
a10[CTAH] path: 824
a10[CTAH] path: 825
a10[CTAH] path: 826
a10[CTAH] path: 827
a10[CTAH] path: 828
a10[CTAH] path: 829
a10[CTAH] path: 830
a10[CTAH] path: 831
a10[CTAH] path: 832
a10[CTAH] path: 833
a10[CTAH] path: 834
a10[CTAH] path: 835
a10[CTAH] path: 836
a10[CTAH] path: 837
a10[CTAH] path: 838
a10[CTAH] path: 839
a10[CTAH] path: 840
a10[CTAH] path: 841
a10[CTAH] path: 842
a10[CTAH] path: 843
a10[CTAH] path: 844
a10[CTAH] path: 845
a10[CTAH] path: 846
a10[CTAH] path: 847
a10[CTAH] path: 848
a10[CTAH] path: 849
a10[CTAH] path: 850
a10[CTAH] path: 851
a10[CTAH] path: 852
a10[CTAH] path: 853
a10[CTAH] path: 854
a10[CTAH] path: 855
a10[CTAH] path: 856
a10[CTAH] path: 857
a10[CTAH] path: 858
a10[CTAH] path: 859
a10[CTAH] path: 860
a10[CTAH] path: 861
a10[CTAH] path: 862
a10[CTAH] path: 863
a10[CTAH] path: 864
a10[CTAH] path: 865
a10[CTAH] path: 866
a10[CTAH] path: 867
a10[CTAH] path: 868
a10[CTAH] path: 869
a10[CTAH] path: 870
a10[CTAH] path: 871
a10[CTAH] path: 872
a10[CTAH] path: 873
a10[CTAH] path: 874
a10[CTAH] path: 875
a10[CTAH] path: 876
a10[CTAH] path: 877
a10[CTAH] path: 878
a10[CTAH] path: 879
a10[CTAH] path: 880
a10[CTAH] path: 881
a10[CTAH] path: 882
a10[CTAH] path: 883
a10[CTAH] path: 884
a10[CTAH] path: 885
a10[CTAH] path: 886
a10[CTAH] path: 887
a10[CTAH] path: 888
a10[CTAH] path: 889
a10[CTAH] path: 890
a10[CTAH] path: 891
a10[CTAH] path: 892
a10[CTAH] path: 893
a10[CTAH] path: 894
a10[CTAH] path: 895
a10[CTAH] path: 896
a10[CTAH] path: 897
a10[CTAH] path: 898
a10[CTAH] path: 899
a10[CTAH] path: 900
a10[CTAH] path: 901
a10[CTAH] path: 902
a10[CTAH] path: 903
a10[CTAH] path: 904
a10[CTAH] path: 905
a10[CTAH] path: 906
a10[CTAH] path: 907
a10[CTAH] path: 908
a10[CTAH] path: 909
a10[CTAH] path: 910
a10[CTAH] path: 911
a10[CTAH] path: 912
a10[CTAH] path: 913
a10[CTAH] path: 914
a10[CTAH] path: 915
a10[CTAH] path: 916
a10[CTAH] path: 917
a10[CTAH] path: 918
a10[CTAH] path: 919
a10[CTAH] path: 920
a10[CTAH] path: 921
a10[CTAH] path: 922
a10[CTAH] path: 923
a10[CTAH] path: 924
a10[CTAH] path: 925
a10[CTAH] path: 926
a10[CTAH] path: 927
a10[CTAH] path: 928
a10[CTAH] path: 929
a10[CTAH] path: 930
a10[CTAH] path: 931
a10[CTAH] path: 932
a10[CTAH] path: 933
a10[CTAH] path: 934
a10[CTAH] path: 935
a10[CTAH] path: 936
a10[CTAH] path: 937
a10[CTAH] path: 938
a10[CTAH] path: 939
a10[CTAH] path: 940
a10[CTAH] path: 941
a10[CTAH] path: 942
a10[CTAH] path: 943
a10[CTAH] path: 944
a10[CTAH] path: 945
a10[CTAH] path: 946
a10[CTAH] path: 947
a10[CTAH] path: 948
a10[CTAH] path: 949
a10[CTAH] path: 950
a10[CTAH] path: 951
a10[CTAH] path: 952
a10[CTAH] path: 953
a10[CTAH] path: 954
a10[CTAH] path: 955
a10[CTAH] path: 956
a10[CTAH] path: 957
a10[CTAH] path: 958
a10[CTAH] path: 959
a10[CTAH] path: 960
a10[CTAH] path: 961
a10[CTAH] path: 962
a10[CTAH] path: 963
a10[CTAH] path: 964
a10[CTAH] path: 965
a10[CTAH] path: 966
a10[CTAH] path: 967
a10[CTAH] path: 968
a10[CTAH] path: 969
a10[CTAH] path: 970
a10[CTAH] path: 971
a10[CTAH] path: 972
a10[CTAH] path: 973
a10[CTAH] path: 974
a10[CTAH] path: 975
a10[CTAH] path: 976
a10[CTAH] path: 977
a10[CTAH] path: 978
a10[CTAH] path: 979
a10[CTAH] path: 980
a10[CTAH] path: 981
a10[CTAH] path: 982
a10[CTAH] path: 983
a10[CTAH] path: 984
a10[CTAH] path: 985
a10[CTAH] path: 986
a10[CTAH] path: 987
a10[CTAH] path: 988
a10[CTAH] path: 989
a10[CTAH] path: 990
a10[CTAH] path: 991
a10[CTAH] path: 992
a10[CTAH] path: 993
a10[CTAH] path: 994
a10[CTAH] path: 995
a10[CTAH] path: 996
a10[CTAH] path: 997
a10[CTAH] path: 998
a10[CTAH] path: 999
a10[CTAH] moveStepToGoalTest havent found anything
Event processed UpdateClock(6)
Event processed adoptProhibition(color(blue, a40), reduce(a40, 100))
Event processed @ctenv(functionToList(message(response, 6410, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed UpdateClock(7)
Event processed UpdateClock(6)
Event processed UpdateClock(7)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 6, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6410=no)
							then	{	NextStep(6, 1, 6410)
								}
							else	{	NextStep(6, 1)
								}
						}
				}
			else	{	if	B(not 6410=no)
					then	{	NextStep(6, 1, 6410)
						}
					else	{	NextStep(6, 1)
						}
				}
		};
	if	B(not 6410=no)
	then	{	Sent(6410, 1, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(6)
},
{	adoptProhibition(color(blue, a40), reduce(a40, 100))
},
{	@ctenv(functionToList(message(response, 6410, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
},
{	UpdateClock(7)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 6, 1)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 6410=no) then NextStep(6, 1, 6410) else NextStep(6, 1) else if B(not 6410=no) then NextStep(6, 1, 6410) else NextStep(6, 1); if B(not 6410=no) then Sent(6410, 1, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(6), adoptProhibition(color(blue, a40), reduce(a40, 100)), @ctenv(functionToList(message(response, 6410, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), UpdateClock(7)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 6, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6410=no)
							then	{	NextStep(6, 1, 6410)
								}
							else	{	NextStep(6, 1)
								}
						}
				}
			else	{	if	B(not 6410=no)
					then	{	NextStep(6, 1, 6410)
						}
					else	{	NextStep(6, 1)
						}
				}
		};
	if	B(not 6410=no)
	then	{	Sent(6410, 1, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(6)
},
{	adoptProhibition(color(blue, a40), reduce(a40, 100))
},
{	@ctenv(functionToList(message(response, 6410, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
},
{	UpdateClock(7)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(6)
},
{	UpdateClock(7)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(6), UpdateClock(7)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(6)
},
{	UpdateClock(7)
}


[CTAH] Array of Terms: [Lapapl.data.Term;@2f0017a7
[CTAH] The created APLList : [response,6410,accept]
[Planbase]:{	if	B(tile(Color1, 6, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6410=no)
							then	{	NextStep(6, 1, 6410)
								}
							else	{	NextStep(6, 1)
								}
						}
				}
			else	{	if	B(not 6410=no)
					then	{	NextStep(6, 1, 6410)
						}
					else	{	NextStep(6, 1)
						}
				}
		};
	if	B(not 6410=no)
	then	{	Sent(6410, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	AdoptP(useColor(blue, 100));
	aprohibition(useColor(blue, 100) -> reduce(100), priority 0)
},
{	if	B([actionresult([response,6410,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,6410,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,6410,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B(tile(Color1, 6, 1)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 6410=no) then NextStep(6, 1, 6410) else NextStep(6, 1) else if B(not 6410=no) then NextStep(6, 1, 6410) else NextStep(6, 1); if B(not 6410=no) then Sent(6410, 1, open, 5); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), AdoptP(useColor(blue, 100)); aprohibition(useColor(blue, 100) -> reduce(100), priority 0), if B([actionresult([response,6410,accept])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([response,6410,accept])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([response,6410,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(tile(Color1, 6, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6410=no)
							then	{	NextStep(6, 1, 6410)
								}
							else	{	NextStep(6, 1)
								}
						}
				}
			else	{	if	B(not 6410=no)
					then	{	NextStep(6, 1, 6410)
						}
					else	{	NextStep(6, 1)
						}
				}
		};
	if	B(not 6410=no)
	then	{	Sent(6410, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	AdoptP(useColor(blue, 100));
	aprohibition(useColor(blue, 100) -> reduce(100), priority 0)
},
{	if	B([actionresult([response,6410,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,6410,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,6410,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(brown, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 6410=no)
					then	{	NextStep(6, 1, 6410)
						}
					else	{	NextStep(6, 1)
						}
				}
		}
	else	{	if	B(not 6410=no)
			then	{	NextStep(6, 1, 6410)
				}
			else	{	NextStep(6, 1)
				}
		};
	if	B(not 6410=no)
	then	{	Sent(6410, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	aprohibition(useColor(blue, 100) -> reduce(100), priority 0)
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 6410)
		}
}


[new scheduled]:[if B(prohibition(useColor(brown, V2))) then if B(700>V2) then if B(not 6410=no) then NextStep(6, 1, 6410) else NextStep(6, 1) else if B(not 6410=no) then NextStep(6, 1, 6410) else NextStep(6, 1); if B(not 6410=no) then Sent(6410, 1, open, 5); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), aprohibition(useColor(blue, 100) -> reduce(100), priority 0), if B(response=response) then ReceivedMessage(accept, 6410)]
[After]:{	if	B(prohibition(useColor(brown, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 6410=no)
					then	{	NextStep(6, 1, 6410)
						}
					else	{	NextStep(6, 1)
						}
				}
		}
	else	{	if	B(not 6410=no)
			then	{	NextStep(6, 1, 6410)
				}
			else	{	NextStep(6, 1)
				}
		};
	if	B(not 6410=no)
	then	{	Sent(6410, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	aprohibition(useColor(blue, 100) -> reduce(100), priority 0)
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 6410)
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A1,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A1,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(not 6410=no)
	then	{	NextStep(6, 1, 6410)
		}
	else	{	NextStep(6, 1)
		};
	if	B(not 6410=no)
	then	{	Sent(6410, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(accept, 6410)
}


[new scheduled]:[if B(not 6410=no) then NextStep(6, 1, 6410) else NextStep(6, 1); if B(not 6410=no) then Sent(6410, 1, open, 5); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), ReceivedMessage(accept, 6410)]
[After]:{	if	B(not 6410=no)
	then	{	NextStep(6, 1, 6410)
		}
	else	{	NextStep(6, 1)
		};
	if	B(not 6410=no)
	then	{	Sent(6410, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(accept, 6410)
}


[Planbase]:{	B([A1,B]=[3,2]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[B([A1,B]=[3,2]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	B([A1,B]=[3,2]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	NextStep(6, 1, 6410);
	if	B(not 6410=no)
	then	{	Sent(6410, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(accept, 6410)
}


[new scheduled]:[NextStep(6, 1, 6410); if B(not 6410=no) then Sent(6410, 1, open, 5); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), ReceivedMessage(accept, 6410)]
[After]:{	NextStep(6, 1, 6410);
	if	B(not 6410=no)
	then	{	Sent(6410, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(accept, 6410)
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(not 6410=no)
	then	{	Sent(6410, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(accept, 6410)
}


[new scheduled]:[if B(not 6410=no) then Sent(6410, 1, open, 5); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), ReceivedMessage(accept, 6410)]
[After]:{	if	B(not 6410=no)
	then	{	Sent(6410, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(accept, 6410)
}


[Planbase]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(700>100) then @ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	Sent(6410, 1, open, 5);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(accept, 6410)
}


[new scheduled]:[Sent(6410, 1, open, 5); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), ReceivedMessage(accept, 6410)]
[After]:{	Sent(6410, 1, open, 5);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(accept, 6410)
}


[Planbase]:{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a10[CTAH] going goal: 3,2 color: blue
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoal(neco, 6, 1),L2,0);
	if	B(L2=[actionresult([6,1])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 1, Clock)
		};
	NoNextStep(6, 1, 6410);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoal(neco, 6, 1),L2,0); if B(L2=[actionresult([6,1])]) then {B(clock(Clock)); UpdatePosition(6, 1, Clock)}; NoNextStep(6, 1, 6410); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoal(neco, 6, 1),L2,0);
	if	B(L2=[actionresult([6,1])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 1, Clock)
		};
	NoNextStep(6, 1, 6410);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a40[CTAH] moveStepToGoal returns: no
object notification: Position [subject=a40, id=null, cell=Cell [x=6, y=1], time=2015-05-27 16:47:20.374, clock=7]
org notification: Position [subject=a40, id=null, cell=Cell [x=6, y=1], time=2015-05-27 16:47:20.374, clock=7]
Event processed UpdatePosition(6, 1, 7)
[Planbase]:{	NoNextStep(6, 1, 6410);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdatePosition(6, 1, 7)
}


[new scheduled]:[NoNextStep(6, 1, 6410); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdatePosition(6, 1, 7)]
[After]:{	NoNextStep(6, 1, 6410);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdatePosition(6, 1, 7)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A1,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A1,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	B([A1,B]=[3,4]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[B([A1,B]=[3,4]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	B([A1,B]=[3,4]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 4, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 4, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, 3, 4, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 4, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 4, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 4, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(700>100) then @ctenv(moveStepToGoalTest(blue, no, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 4, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(blue, no, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(blue, no, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoalTest(blue, no, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a40[CTAH] going goal: 3,4 color: blue
a30[CTAH] path: 0
a30[CTAH] path: Path: [6][6] [6][5] [5][5] [4][5] [4][4] [4][3]

a30[CTAH] moveStepToGoalTest proposals: null
a30[CTAH] moveStepToGoalTest proposals: null
a30[CTAH] moveStepToGoalTest proposals: null
a30[CTAH] found a chip....: (R:6,C:5)
a30[CTAH] moveStepToGoalTest sent proposal for: [6,5,1,6943]
org notification: Proposal [id=6943, agent=a30, agent2=a20, clock=7, time=2015-05-27 16:47:20.88]
Event processed UpdateClock(6)
Event processed adoptProhibition(color(blue, a30), reduce(a30, 100))
Event processed UpdateClock(7)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 6, 5))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6943=no)
							then	{	NextStep(6, 5, 6943)
								}
							else	{	NextStep(6, 5)
								}
						}
				}
			else	{	if	B(not 6943=no)
					then	{	NextStep(6, 5, 6943)
						}
					else	{	NextStep(6, 5)
						}
				}
		};
	if	B(not 6943=no)
	then	{	Sent(6943, 1, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
},
{	UpdateClock(6)
},
{	adoptProhibition(color(blue, a30), reduce(a30, 100))
},
{	UpdateClock(7)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 6, 5)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 6943=no) then NextStep(6, 5, 6943) else NextStep(6, 5) else if B(not 6943=no) then NextStep(6, 5, 6943) else NextStep(6, 5); if B(not 6943=no) then Sent(6943, 1, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10), UpdateClock(6), adoptProhibition(color(blue, a30), reduce(a30, 100)), UpdateClock(7)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 6, 5))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6943=no)
							then	{	NextStep(6, 5, 6943)
								}
							else	{	NextStep(6, 5)
								}
						}
				}
			else	{	if	B(not 6943=no)
					then	{	NextStep(6, 5, 6943)
						}
					else	{	NextStep(6, 5)
						}
				}
		};
	if	B(not 6943=no)
	then	{	Sent(6943, 1, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
},
{	UpdateClock(6)
},
{	adoptProhibition(color(blue, a30), reduce(a30, 100))
},
{	UpdateClock(7)
}


[Planbase]:{	if	B(tile(Color1, 6, 5))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6943=no)
							then	{	NextStep(6, 5, 6943)
								}
							else	{	NextStep(6, 5)
								}
						}
				}
			else	{	if	B(not 6943=no)
					then	{	NextStep(6, 5, 6943)
						}
					else	{	NextStep(6, 5)
						}
				}
		};
	if	B(not 6943=no)
	then	{	Sent(6943, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
},
{	AdoptP(useColor(blue, 100));
	aprohibition(useColor(blue, 100) -> reduce(100), priority 0)
}


[new scheduled]:[if B(tile(Color1, 6, 5)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 6943=no) then NextStep(6, 5, 6943) else NextStep(6, 5) else if B(not 6943=no) then NextStep(6, 5, 6943) else NextStep(6, 5); if B(not 6943=no) then Sent(6943, 1, open, 5); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10), AdoptP(useColor(blue, 100)); aprohibition(useColor(blue, 100) -> reduce(100), priority 0)]
[After]:{	if	B(tile(Color1, 6, 5))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6943=no)
							then	{	NextStep(6, 5, 6943)
								}
							else	{	NextStep(6, 5)
								}
						}
				}
			else	{	if	B(not 6943=no)
					then	{	NextStep(6, 5, 6943)
						}
					else	{	NextStep(6, 5)
						}
				}
		};
	if	B(not 6943=no)
	then	{	Sent(6943, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
},
{	AdoptP(useColor(blue, 100));
	aprohibition(useColor(blue, 100) -> reduce(100), priority 0)
}


[Planbase]:{	if	B(prohibition(useColor(brown, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 6943=no)
					then	{	NextStep(6, 5, 6943)
						}
					else	{	NextStep(6, 5)
						}
				}
		}
	else	{	if	B(not 6943=no)
			then	{	NextStep(6, 5, 6943)
				}
			else	{	NextStep(6, 5)
				}
		};
	if	B(not 6943=no)
	then	{	Sent(6943, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
},
{	aprohibition(useColor(blue, 100) -> reduce(100), priority 0)
}


[new scheduled]:[if B(prohibition(useColor(brown, V2))) then if B(700>V2) then if B(not 6943=no) then NextStep(6, 5, 6943) else NextStep(6, 5) else if B(not 6943=no) then NextStep(6, 5, 6943) else NextStep(6, 5); if B(not 6943=no) then Sent(6943, 1, open, 5); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10), aprohibition(useColor(blue, 100) -> reduce(100), priority 0)]
[After]:{	if	B(prohibition(useColor(brown, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 6943=no)
					then	{	NextStep(6, 5, 6943)
						}
					else	{	NextStep(6, 5)
						}
				}
		}
	else	{	if	B(not 6943=no)
			then	{	NextStep(6, 5, 6943)
				}
			else	{	NextStep(6, 5)
				}
		};
	if	B(not 6943=no)
	then	{	Sent(6943, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
},
{	aprohibition(useColor(blue, 100) -> reduce(100), priority 0)
}


[Planbase]:{	if	B(not 6943=no)
	then	{	NextStep(6, 5, 6943)
		}
	else	{	NextStep(6, 5)
		};
	if	B(not 6943=no)
	then	{	Sent(6943, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(not 6943=no) then NextStep(6, 5, 6943) else NextStep(6, 5); if B(not 6943=no) then Sent(6943, 1, open, 5); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(not 6943=no)
	then	{	NextStep(6, 5, 6943)
		}
	else	{	NextStep(6, 5)
		};
	if	B(not 6943=no)
	then	{	Sent(6943, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	NextStep(6, 5, 6943);
	if	B(not 6943=no)
	then	{	Sent(6943, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[NextStep(6, 5, 6943); if B(not 6943=no) then Sent(6943, 1, open, 5); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	NextStep(6, 5, 6943);
	if	B(not 6943=no)
	then	{	Sent(6943, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(not 6943=no)
	then	{	Sent(6943, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(not 6943=no) then Sent(6943, 1, open, 5); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(not 6943=no)
	then	{	Sent(6943, 1, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	Sent(6943, 1, open, 5);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[Sent(6943, 1, open, 5); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	Sent(6943, 1, open, 5);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(6, 5, 6943); ReceivedMessage(noresponse, 6943)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(6, 5, 6943); ReceivedMessage(noresponse, 6943)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(6, 5, 6943); ReceivedMessage(noresponse, 6943)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(6, 5, 6943); ReceivedMessage(noresponse, 6943)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(6, 5, 6943); ReceivedMessage(noresponse, 6943)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(6, 5, 6943); ReceivedMessage(noresponse, 6943)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(6, 5, 6943); ReceivedMessage(noresponse, 6943)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(6, 5, 6943); ReceivedMessage(noresponse, 6943)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(6, 5, 6943); ReceivedMessage(noresponse, 6943)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(6, 5, 6943); ReceivedMessage(noresponse, 6943)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(6, 5, 6943); ReceivedMessage(noresponse, 6943)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscourseMessage
[MSG] Message is of type: basicproposal
[MSG] Message is for: 3
[MSG] i'm: 3
Received a proposal creating event
org notification: Proposal [id=7652, agent=a20, agent2=a40, clock=7, time=2015-05-27 16:47:23.062]
[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(6, 5, 6943); ReceivedMessage(noresponse, 6943)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(6, 5, 6943); ReceivedMessage(noresponse, 6943)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(6, 5, 6943); ReceivedMessage(noresponse, 6943)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(6, 5, 6943); ReceivedMessage(noresponse, 6943)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 2
[MSG] i'm: 2
AGENT : got response to offer
org notification: Response [id=6943, response=accepted, clock=7, time=2015-05-27 16:47:23.906]
Event processed @ctenv(functionToList(message(response, 6943, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
},
{	@ctenv(functionToList(message(response, 6943, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(6, 5, 6943); ReceivedMessage(noresponse, 6943)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10), @ctenv(functionToList(message(response, 6943, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
},
{	@ctenv(functionToList(message(response, 6943, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@6363b169
[CTAH] The created APLList : [response,6943,accept]
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
},
{	if	B([actionresult([response,6943,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,6943,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,6943,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10), if B([actionresult([response,6943,accept])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([response,6943,accept])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([response,6943,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
},
{	if	B([actionresult([response,6943,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,6943,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,6943,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 6943)
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10), if B(response=response) then ReceivedMessage(accept, 6943)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 6943)
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
},
{	ReceivedMessage(accept, 6943)
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(6, 5, 6943); ReceivedMessage(noresponse, 6943)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10), ReceivedMessage(accept, 6943)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(6, 5, 6943);
			ReceivedMessage(noresponse, 6943)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
},
{	ReceivedMessage(accept, 6943)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	@ctenv(moveStepToGoal(neco, 6, 5),L2,0);
	if	B(L2=[actionresult([6,5])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 5, Clock)
		};
	NoNextStep(6, 5, 6943);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[@ctenv(moveStepToGoal(neco, 6, 5),L2,0); if B(L2=[actionresult([6,5])]) then {B(clock(Clock)); UpdatePosition(6, 5, Clock)}; NoNextStep(6, 5, 6943); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	@ctenv(moveStepToGoal(neco, 6, 5),L2,0);
	if	B(L2=[actionresult([6,5])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 5, Clock)
		};
	NoNextStep(6, 5, 6943);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


Need to wait 4 more seconds
org notification: Position [subject=a30, id=null, cell=Cell [x=6, y=5], time=2015-05-27 16:47:24.32, clock=7]
object notification: Position [subject=a30, id=null, cell=Cell [x=6, y=5], time=2015-05-27 16:47:24.32, clock=7]
a40[CTAH] paths: 1000
a40[CTAH] path: 0
a40[CTAH] path: 1
a40[CTAH] path: 2
a40[CTAH] path: 3
a40[CTAH] path: 4
a40[CTAH] path: 5
a40[CTAH] path: 6
a40[CTAH] path: 7
a40[CTAH] path: 8
a40[CTAH] path: 9
a40[CTAH] path: 10
a40[CTAH] path: 11
a40[CTAH] path: 12
a40[CTAH] path: 13
a40[CTAH] path: 14
a40[CTAH] path: 15
a40[CTAH] path: 16
a40[CTAH] path: 17
a40[CTAH] path: 18
a40[CTAH] path: 19
a40[CTAH] path: 20
a40[CTAH] path: 21
a40[CTAH] path: 22
a40[CTAH] path: 23
a40[CTAH] path: 24
a40[CTAH] path: 25
a40[CTAH] path: 26
a40[CTAH] path: 27
a40[CTAH] path: 28
a40[CTAH] path: 29
a40[CTAH] path: 30
a40[CTAH] path: 31
a40[CTAH] path: 32
a40[CTAH] path: 33
a40[CTAH] path: 34
a40[CTAH] path: 35
a40[CTAH] path: 36
a40[CTAH] path: 37
a40[CTAH] path: 38
a40[CTAH] path: 39
a40[CTAH] path: 40
a40[CTAH] path: 41
a40[CTAH] path: 42
a40[CTAH] path: 43
a40[CTAH] path: 44
a40[CTAH] path: 45
a40[CTAH] path: 46
a40[CTAH] path: 47
a40[CTAH] path: 48
a40[CTAH] path: 49
a40[CTAH] path: 50
a40[CTAH] path: 51
a40[CTAH] path: 52
a40[CTAH] path: 53
a40[CTAH] path: 54
a40[CTAH] path: 55
a40[CTAH] path: 56
a40[CTAH] path: 57
a40[CTAH] path: 58
a40[CTAH] path: 59
a40[CTAH] path: 60
a40[CTAH] path: 61
a40[CTAH] path: 62
a40[CTAH] path: 63
a40[CTAH] path: 64
a40[CTAH] path: Path: [6][1] [6][2] [6][3] [6][4] [6][5] [5][5] [4][5] [4][4] [3][4]

a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] found a chip....: (R:6,C:2)
a40[CTAH] moveStepToGoalTest sent proposal for: [6,2,0,971]
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscourseMessage
[MSG] Message is of type: basicproposal
[MSG] Message is for: 0
[MSG] i'm: 0
Received a proposal creating event
org notification: Proposal [id=971, agent=a40, agent2=a10, clock=7, time=2015-05-27 16:47:26.002]
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 3
[MSG] i'm: 3
AGENT : got response to offer
Event processed @ctenv(functionToList(proposal(proposal, 1, 7652, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 6, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 971=no)
							then	{	NextStep(6, 2, 971)
								}
							else	{	NextStep(6, 2)
								}
						}
				}
			else	{	if	B(not 971=no)
					then	{	NextStep(6, 2, 971)
						}
					else	{	NextStep(6, 2)
						}
				}
		};
	if	B(not 971=no)
	then	{	Sent(971, 0, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	@ctenv(functionToList(proposal(proposal, 1, 7652, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 6, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 971=no) then NextStep(6, 2, 971) else NextStep(6, 2) else if B(not 971=no) then NextStep(6, 2, 971) else NextStep(6, 2); if B(not 971=no) then Sent(971, 0, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), @ctenv(functionToList(proposal(proposal, 1, 7652, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 6, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 971=no)
							then	{	NextStep(6, 2, 971)
								}
							else	{	NextStep(6, 2)
								}
						}
				}
			else	{	if	B(not 971=no)
					then	{	NextStep(6, 2, 971)
						}
					else	{	NextStep(6, 2)
						}
				}
		};
	if	B(not 971=no)
	then	{	Sent(971, 0, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	@ctenv(functionToList(proposal(proposal, 1, 7652, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@7eed1b6f
[CTAH] The created APLList : [proposal,1,7652,open]
[Planbase]:{	if	B(tile(Color1, 6, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 971=no)
							then	{	NextStep(6, 2, 971)
								}
							else	{	NextStep(6, 2)
								}
						}
				}
			else	{	if	B(not 971=no)
					then	{	NextStep(6, 2, 971)
						}
					else	{	NextStep(6, 2)
						}
				}
		};
	if	B(not 971=no)
	then	{	Sent(971, 0, open, 7)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,1,7652,open])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([proposal,1,7652,open])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([proposal,1,7652,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B(tile(Color1, 6, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 971=no) then NextStep(6, 2, 971) else NextStep(6, 2) else if B(not 971=no) then NextStep(6, 2, 971) else NextStep(6, 2); if B(not 971=no) then Sent(971, 0, open, 7); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([proposal,1,7652,open])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([proposal,1,7652,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,1,7652,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(tile(Color1, 6, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 971=no)
							then	{	NextStep(6, 2, 971)
								}
							else	{	NextStep(6, 2)
								}
						}
				}
			else	{	if	B(not 971=no)
					then	{	NextStep(6, 2, 971)
						}
					else	{	NextStep(6, 2)
						}
				}
		};
	if	B(not 971=no)
	then	{	Sent(971, 0, open, 7)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,1,7652,open])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([proposal,1,7652,open])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([proposal,1,7652,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(white, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 971=no)
					then	{	NextStep(6, 2, 971)
						}
					else	{	NextStep(6, 2)
						}
				}
		}
	else	{	if	B(not 971=no)
			then	{	NextStep(6, 2, 971)
				}
			else	{	NextStep(6, 2)
				}
		};
	if	B(not 971=no)
	then	{	Sent(971, 0, open, 7)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,1,7652,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,1,7652,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(white, V2))) then if B(700>V2) then if B(not 971=no) then NextStep(6, 2, 971) else NextStep(6, 2) else if B(not 971=no) then NextStep(6, 2, 971) else NextStep(6, 2); if B(not 971=no) then Sent(971, 0, open, 7); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([proposal,1,7652,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,1,7652,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(prohibition(useColor(white, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 971=no)
					then	{	NextStep(6, 2, 971)
						}
					else	{	NextStep(6, 2)
						}
				}
		}
	else	{	if	B(not 971=no)
			then	{	NextStep(6, 2, 971)
				}
			else	{	NextStep(6, 2)
				}
		};
	if	B(not 971=no)
	then	{	Sent(971, 0, open, 7)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,1,7652,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,1,7652,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	if	B(not 971=no)
	then	{	NextStep(6, 2, 971)
		}
	else	{	NextStep(6, 2)
		};
	if	B(not 971=no)
	then	{	Sent(971, 0, open, 7)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,1,7652,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[new scheduled]:[if B(not 971=no) then NextStep(6, 2, 971) else NextStep(6, 2); if B(not 971=no) then Sent(971, 0, open, 7); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([proposal,1,7652,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(not 971=no)
	then	{	NextStep(6, 2, 971)
		}
	else	{	NextStep(6, 2)
		};
	if	B(not 971=no)
	then	{	Sent(971, 0, open, 7)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,1,7652,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[Planbase]:{	NextStep(6, 2, 971);
	if	B(not 971=no)
	then	{	Sent(971, 0, open, 7)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(1, 7652, open)
		}
}


[new scheduled]:[NextStep(6, 2, 971); if B(not 971=no) then Sent(971, 0, open, 7); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B(proposal=proposal) then ReceivedProposal(1, 7652, open)]
[After]:{	NextStep(6, 2, 971);
	if	B(not 971=no)
	then	{	Sent(971, 0, open, 7)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(1, 7652, open)
		}
}


[Planbase]:{	if	B(not 971=no)
	then	{	Sent(971, 0, open, 7)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedProposal(1, 7652, open)
}


[new scheduled]:[if B(not 971=no) then Sent(971, 0, open, 7); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), ReceivedProposal(1, 7652, open)]
[After]:{	if	B(not 971=no)
	then	{	Sent(971, 0, open, 7)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedProposal(1, 7652, open)
}


[Planbase]:{	Sent(971, 0, open, 7);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[getScoreAfterExchange(3, 7652); if G(at(A, B, C)) then skip else makeResponse(7652, accept), Sent(971, 0, open, 7); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	getScoreAfterExchange(3, 7652);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(7652, accept)
		}
},
{	Sent(971, 0, open, 7);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	GetScoreAfterExchange(7652, yes);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(7652, accept)
		}
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[GetScoreAfterExchange(7652, yes); if G(at(A, B, C)) then skip else makeResponse(7652, accept), if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	GetScoreAfterExchange(7652, yes);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(7652, accept)
		}
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(7652, accept)
		}
},
{	if	B(scoreAfterExchange(7652, Score))
	then	{	respond(7652, 700)
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if G(at(A, B, C)) then skip else makeResponse(7652, accept), if B(scoreAfterExchange(7652, Score)) then respond(7652, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(7652, accept)
		}
},
{	if	B(scoreAfterExchange(7652, Score))
	then	{	respond(7652, 700)
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	skip
},
{	respond(7652, 700)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[skip, respond(7652, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	skip
},
{	respond(7652, 700)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	B(ANSWER=accept);
	if	B(not yes=yes)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2<700)
					then	{	B(ANSWER=reject)
						}
				}
		};
	makeResponse(7652, ANSWER)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[B(ANSWER=accept); if B(not yes=yes) then if B(prohibition(rejectRequests(V2))) then if B(V2<700) then B(ANSWER=reject); makeResponse(7652, ANSWER), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	B(ANSWER=accept);
	if	B(not yes=yes)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2<700)
					then	{	B(ANSWER=reject)
						}
				}
		};
	makeResponse(7652, ANSWER)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(not yes=yes)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2<700)
					then	{	B(accept=reject)
						}
				}
		};
	makeResponse(7652, accept)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(not yes=yes) then if B(prohibition(rejectRequests(V2))) then if B(V2<700) then B(accept=reject); makeResponse(7652, accept), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(not yes=yes)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2<700)
					then	{	B(accept=reject)
						}
				}
		};
	makeResponse(7652, accept)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	makeResponse(7652, accept)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[makeResponse(7652, accept), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	makeResponse(7652, accept)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	sendResponse(accept, 7652)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[sendResponse(accept, 7652), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	sendResponse(accept, 7652)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(sendResponse(7652, accept),L1,0);
	Sent(accept, 7652)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(sendResponse(7652, accept),L1,0); Sent(accept, 7652), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(sendResponse(7652, accept),L1,0);
	Sent(accept, 7652)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a40[CTAH] sent response: Discourse Message...
From PerGameId: 3.
To PerGameId: 1.

org notification: Response [id=7652, response=rejected, clock=7, time=2015-05-27 16:47:26.862]
[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a10[CTAH] paths: 1000
Need to wait 2 more seconds
[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a30[CTAH] moveStepToGoal returns: [6,5]
[Planbase]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


Event processed UpdatePosition(6, 5, 7)
[Planbase]:{	B(clock(Clock));
	UpdatePosition(6, 5, Clock);
	NoNextStep(6, 5, 6943);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
},
{	UpdatePosition(6, 5, 7)
}


[new scheduled]:[B(clock(Clock)); UpdatePosition(6, 5, Clock); NoNextStep(6, 5, 6943); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10), UpdatePosition(6, 5, 7)]
[After]:{	B(clock(Clock));
	UpdatePosition(6, 5, Clock);
	NoNextStep(6, 5, 6943);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
},
{	UpdatePosition(6, 5, 7)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	UpdatePosition(6, 5, 7);
	NoNextStep(6, 5, 6943);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[new scheduled]:[UpdatePosition(6, 5, 7); NoNextStep(6, 5, 6943); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)]
[After]:{	UpdatePosition(6, 5, 7);
	NoNextStep(6, 5, 6943);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 16:03:48 GMT, priority 10)
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	NoNextStep(6, 5, 6943);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), NoNextStep(6, 5, 6943); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	NoNextStep(6, 5, 6943);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A1,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A1,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	B([A1,B]=[4,3]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[B([A1,B]=[4,3]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	B([A1,B]=[4,3]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 4, 3, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, 4, 3, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 4, 3, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(700>100) then @ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a30[CTAH] going goal: 4,3 color: blue
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


object notification: Time [clock=8, time=2015-05-27 16:47:29.332]
object notification: Time [clock=8, time=2015-05-27 16:47:29.332]
org notification: Time [clock=8, time=2015-05-27 16:47:29.332]
object notification: Time [clock=8, time=2015-05-27 16:47:29.332]
[Planbase]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


Event processed UpdateClock(8)
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(8)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(8)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(8)
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a10[CTAH] path: 0
a10[CTAH] path: 1
a10[CTAH] path: 2
a10[CTAH] path: 3
a10[CTAH] path: 4
a10[CTAH] path: 5
a10[CTAH] path: 6
a10[CTAH] path: 7
a10[CTAH] path: 8
a10[CTAH] path: 9
a10[CTAH] path: 10
a10[CTAH] path: 11
a10[CTAH] path: 12
a10[CTAH] path: 13
a10[CTAH] path: 14
a10[CTAH] path: 15
a10[CTAH] path: 16
a10[CTAH] path: 17
a10[CTAH] path: 18
a10[CTAH] path: 19
a10[CTAH] path: 20
a10[CTAH] path: 21
a10[CTAH] path: 22
a10[CTAH] path: 23
a10[CTAH] path: 24
a10[CTAH] path: 25
a10[CTAH] path: 26
a10[CTAH] path: 27
a10[CTAH] path: 28
a10[CTAH] path: 29
a10[CTAH] path: 30
a10[CTAH] path: 31
a10[CTAH] path: 32
a10[CTAH] path: 33
a10[CTAH] path: 34
a10[CTAH] path: 35
a10[CTAH] path: 36
a10[CTAH] path: 37
a10[CTAH] path: 38
a10[CTAH] path: 39
a10[CTAH] path: 40
a10[CTAH] path: 41
a10[CTAH] path: 42
a10[CTAH] path: 43
a10[CTAH] path: 44
a10[CTAH] path: 45
a10[CTAH] path: 46
a10[CTAH] path: 47
a10[CTAH] path: 48
a10[CTAH] path: 49
a10[CTAH] path: 50
a10[CTAH] path: 51
a10[CTAH] path: 52
a10[CTAH] path: 53
a10[CTAH] path: 54
a10[CTAH] path: 55
a10[CTAH] path: 56
a10[CTAH] path: 57
a10[CTAH] path: 58
a10[CTAH] path: 59
a10[CTAH] path: 60
a10[CTAH] path: 61
a10[CTAH] path: 62
a10[CTAH] path: 63
a10[CTAH] path: 64
a10[CTAH] path: 65
a10[CTAH] path: 66
a10[CTAH] path: 67
a10[CTAH] path: 68
a10[CTAH] path: 69
a10[CTAH] path: 70
a10[CTAH] path: 71
a10[CTAH] path: 72
a10[CTAH] path: 73
a10[CTAH] path: 74
a10[CTAH] path: 75
a10[CTAH] path: 76
a10[CTAH] path: 77
a10[CTAH] path: 78
a10[CTAH] path: 79
a10[CTAH] path: 80
a10[CTAH] path: 81
a10[CTAH] path: 82
a10[CTAH] path: 83
a10[CTAH] path: 84
a10[CTAH] path: 85
a10[CTAH] path: 86
a10[CTAH] path: 87
a10[CTAH] path: 88
a10[CTAH] path: 89
a10[CTAH] path: 90
a10[CTAH] path: 91
a10[CTAH] path: 92
a10[CTAH] path: 93
a10[CTAH] path: 94
a10[CTAH] path: 95
a10[CTAH] path: 96
a10[CTAH] path: 97
a10[CTAH] path: 98
a10[CTAH] path: 99
a10[CTAH] path: 100
a10[CTAH] path: 101
a10[CTAH] path: 102
a10[CTAH] path: 103
a10[CTAH] path: 104
a10[CTAH] path: 105
a10[CTAH] path: 106
a10[CTAH] path: 107
a10[CTAH] path: 108
a10[CTAH] path: 109
a10[CTAH] path: 110
a10[CTAH] path: 111
a10[CTAH] path: 112
a10[CTAH] path: 113
a10[CTAH] path: 114
a10[CTAH] path: 115
a10[CTAH] path: 116
a10[CTAH] path: 117
a10[CTAH] path: 118
a10[CTAH] path: 119
a10[CTAH] path: 120
a10[CTAH] path: 121
a10[CTAH] path: 122
a10[CTAH] path: 123
a10[CTAH] path: 124
a10[CTAH] path: 125
a10[CTAH] path: 126
a10[CTAH] path: 127
a10[CTAH] path: 128
a10[CTAH] path: 129
a10[CTAH] path: 130
a10[CTAH] path: 131
a10[CTAH] path: 132
a10[CTAH] path: 133
a10[CTAH] path: 134
a10[CTAH] path: 135
a10[CTAH] path: 136
a10[CTAH] path: 137
a10[CTAH] path: 138
a10[CTAH] path: 139
a10[CTAH] path: 140
a10[CTAH] path: 141
a10[CTAH] path: 142
a10[CTAH] path: 143
a10[CTAH] path: 144
a10[CTAH] path: 145
a10[CTAH] path: 146
a10[CTAH] path: 147
a10[CTAH] path: 148
a10[CTAH] path: 149
a10[CTAH] path: 150
a10[CTAH] path: 151
a10[CTAH] path: 152
a10[CTAH] path: 153
a10[CTAH] path: 154
a10[CTAH] path: 155
a10[CTAH] path: 156
a10[CTAH] path: 157
a10[CTAH] path: 158
a10[CTAH] path: 159
a10[CTAH] path: 160
a10[CTAH] path: 161
a10[CTAH] path: 162
a10[CTAH] path: 163
a10[CTAH] path: 164
a10[CTAH] path: 165
a10[CTAH] path: 166
a10[CTAH] path: 167
a10[CTAH] path: 168
a10[CTAH] path: 169
a10[CTAH] path: 170
a10[CTAH] path: 171
a10[CTAH] path: 172
a10[CTAH] path: 173
a10[CTAH] path: 174
a10[CTAH] path: 175
a10[CTAH] path: 176
a10[CTAH] path: 177
a10[CTAH] path: 178
a10[CTAH] path: 179
a10[CTAH] path: 180
a10[CTAH] path: 181
a10[CTAH] path: 182
a10[CTAH] path: 183
a10[CTAH] path: 184
a10[CTAH] path: 185
a10[CTAH] path: 186
a10[CTAH] path: 187
a10[CTAH] path: 188
a10[CTAH] path: 189
a10[CTAH] path: 190
a10[CTAH] path: 191
a10[CTAH] path: 192
a10[CTAH] path: 193
a10[CTAH] path: 194
a10[CTAH] path: 195
a10[CTAH] path: 196
a10[CTAH] path: 197
a10[CTAH] path: 198
a10[CTAH] path: 199
a10[CTAH] path: 200
a10[CTAH] path: 201
a10[CTAH] path: 202
a10[CTAH] path: 203
a10[CTAH] path: 204
a10[CTAH] path: 205
a10[CTAH] path: 206
a10[CTAH] path: 207
a10[CTAH] path: 208
a10[CTAH] path: 209
a10[CTAH] path: 210
a10[CTAH] path: 211
a10[CTAH] path: 212
a10[CTAH] path: 213
a10[CTAH] path: 214
a10[CTAH] path: 215
a10[CTAH] path: 216
a10[CTAH] path: 217
a10[CTAH] path: 218
a10[CTAH] path: 219
a10[CTAH] path: 220
a10[CTAH] path: 221
a10[CTAH] path: 222
a10[CTAH] path: 223
a10[CTAH] path: 224
a10[CTAH] path: 225
a10[CTAH] path: 226
a10[CTAH] path: 227
a10[CTAH] path: 228
a10[CTAH] path: 229
a10[CTAH] path: 230
a10[CTAH] path: 231
a10[CTAH] path: 232
a10[CTAH] path: 233
a10[CTAH] path: 234
a10[CTAH] path: 235
a10[CTAH] path: 236
a10[CTAH] path: 237
a10[CTAH] path: 238
a10[CTAH] path: 239
a10[CTAH] path: 240
a10[CTAH] path: 241
a10[CTAH] path: 242
a10[CTAH] path: 243
a10[CTAH] path: 244
a10[CTAH] path: 245
a10[CTAH] path: 246
a10[CTAH] path: 247
a10[CTAH] path: 248
a10[CTAH] path: 249
a10[CTAH] path: 250
a10[CTAH] path: 251
a10[CTAH] path: 252
a10[CTAH] path: 253
a10[CTAH] path: 254
a10[CTAH] path: 255
a10[CTAH] path: 256
a10[CTAH] path: 257
a10[CTAH] path: 258
a10[CTAH] path: 259
a10[CTAH] path: 260
a10[CTAH] path: 261
a10[CTAH] path: 262
a10[CTAH] path: 263
a10[CTAH] path: 264
a10[CTAH] path: 265
a10[CTAH] path: 266
a10[CTAH] path: 267
a10[CTAH] path: 268
a10[CTAH] path: 269
a10[CTAH] path: 270
a10[CTAH] path: 271
a10[CTAH] path: 272
a10[CTAH] path: 273
a10[CTAH] path: 274
a10[CTAH] path: 275
a10[CTAH] path: 276
a10[CTAH] path: 277
a10[CTAH] path: 278
a10[CTAH] path: 279
a10[CTAH] path: 280
a10[CTAH] path: 281
a10[CTAH] path: 282
a10[CTAH] path: 283
a10[CTAH] path: 284
a10[CTAH] path: 285
a10[CTAH] path: 286
a10[CTAH] path: 287
a10[CTAH] path: 288
a10[CTAH] path: 289
a10[CTAH] path: 290
a10[CTAH] path: 291
a10[CTAH] path: 292
a10[CTAH] path: 293
a10[CTAH] path: 294
a10[CTAH] path: 295
a10[CTAH] path: 296
a10[CTAH] path: 297
a10[CTAH] path: 298
a10[CTAH] path: 299
a10[CTAH] path: 300
a10[CTAH] path: 301
a10[CTAH] path: 302
a10[CTAH] path: 303
a10[CTAH] path: 304
a10[CTAH] path: 305
a10[CTAH] path: 306
a10[CTAH] path: 307
a10[CTAH] path: 308
a10[CTAH] path: 309
a10[CTAH] path: 310
a10[CTAH] path: 311
a10[CTAH] path: 312
a10[CTAH] path: 313
a10[CTAH] path: 314
a10[CTAH] path: 315
a10[CTAH] path: 316
a10[CTAH] path: 317
a10[CTAH] path: 318
a10[CTAH] path: 319
a10[CTAH] path: 320
a10[CTAH] path: 321
a10[CTAH] path: 322
a10[CTAH] path: 323
a10[CTAH] path: 324
a10[CTAH] path: 325
a10[CTAH] path: 326
a10[CTAH] path: 327
a10[CTAH] path: 328
a10[CTAH] path: 329
a10[CTAH] path: 330
a10[CTAH] path: 331
a10[CTAH] path: 332
a10[CTAH] path: 333
a10[CTAH] path: 334
a10[CTAH] path: 335
a10[CTAH] path: 336
a10[CTAH] path: 337
a10[CTAH] path: 338
a10[CTAH] path: 339
a10[CTAH] path: 340
a10[CTAH] path: 341
a10[CTAH] path: 342
a10[CTAH] path: 343
a10[CTAH] path: 344
a10[CTAH] path: 345
a10[CTAH] path: 346
a10[CTAH] path: 347
a10[CTAH] path: 348
a10[CTAH] path: 349
a10[CTAH] path: 350
a10[CTAH] path: 351
a10[CTAH] path: 352
a10[CTAH] path: 353
a10[CTAH] path: 354
a10[CTAH] path: 355
a10[CTAH] path: 356
a10[CTAH] path: 357
a10[CTAH] path: 358
a10[CTAH] path: 359
a10[CTAH] path: 360
a10[CTAH] path: 361
a10[CTAH] path: 362
a10[CTAH] path: 363
a10[CTAH] path: 364
a10[CTAH] path: 365
a10[CTAH] path: 366
a10[CTAH] path: 367
a10[CTAH] path: 368
a10[CTAH] path: 369
a10[CTAH] path: 370
a10[CTAH] path: 371
a10[CTAH] path: 372
a10[CTAH] path: 373
a10[CTAH] path: 374
a10[CTAH] path: 375
a10[CTAH] path: 376
a10[CTAH] path: 377
a10[CTAH] path: 378
a10[CTAH] path: 379
a10[CTAH] path: 380
a10[CTAH] path: 381
a10[CTAH] path: 382
a10[CTAH] path: 383
a10[CTAH] path: 384
a10[CTAH] path: 385
a10[CTAH] path: 386
a10[CTAH] path: 387
a10[CTAH] path: 388
a10[CTAH] path: 389
[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a10[CTAH] path: 390
a10[CTAH] path: 391
[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
a10[CTAH] path: 392
a10[CTAH] path: 393
a10[CTAH] path: 394
a10[CTAH] path: 395
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a10[CTAH] path: 396
a10[CTAH] path: 397
a10[CTAH] path: 398
a10[CTAH] path: 399
a10[CTAH] path: 400
a10[CTAH] path: 401
a10[CTAH] path: 402
a10[CTAH] path: 403
a10[CTAH] path: 404
a10[CTAH] path: 405
a10[CTAH] path: 406
a10[CTAH] path: 407
a10[CTAH] path: 408
a10[CTAH] path: 409
a10[CTAH] path: 410
a10[CTAH] path: 411
a10[CTAH] path: 412
a10[CTAH] path: 413
a10[CTAH] path: 414
a10[CTAH] path: 415
a10[CTAH] path: 416
a10[CTAH] path: 417
a10[CTAH] path: 418
a10[CTAH] path: 419
a10[CTAH] path: 420
a10[CTAH] path: 421
a10[CTAH] path: 422
a10[CTAH] path: 423
a10[CTAH] path: 424
a10[CTAH] path: 425
a10[CTAH] path: 426
a10[CTAH] path: 427
a10[CTAH] path: 428
a10[CTAH] path: 429
a10[CTAH] path: 430
a10[CTAH] path: 431
a10[CTAH] path: 432
a10[CTAH] path: 433
a10[CTAH] path: 434
a10[CTAH] path: 435
a10[CTAH] path: 436
a10[CTAH] path: 437
a10[CTAH] path: 438
a10[CTAH] path: 439
a10[CTAH] path: 440
a10[CTAH] path: 441
a10[CTAH] path: 442
a10[CTAH] path: 443
a10[CTAH] path: 444
a10[CTAH] path: 445
a10[CTAH] path: 446
a10[CTAH] path: 447
a10[CTAH] path: 448
a10[CTAH] path: 449
a10[CTAH] path: 450
a10[CTAH] path: 451
a10[CTAH] path: 452
a10[CTAH] path: 453
a10[CTAH] path: 454
a10[CTAH] path: 455
a10[CTAH] path: 456
a10[CTAH] path: 457
a10[CTAH] path: 458
a10[CTAH] path: 459
a10[CTAH] path: 460
a10[CTAH] path: 461
a10[CTAH] path: 462
a10[CTAH] path: 463
a10[CTAH] path: 464
a10[CTAH] path: 465
a10[CTAH] path: 466
a10[CTAH] path: 467
a10[CTAH] path: 468
a10[CTAH] path: 469
a10[CTAH] path: 470
a10[CTAH] path: 471
a10[CTAH] path: 472
a10[CTAH] path: 473
a10[CTAH] path: 474
a10[CTAH] path: 475
a10[CTAH] path: 476
a10[CTAH] path: 477
a10[CTAH] path: 478
a10[CTAH] path: 479
a10[CTAH] path: 480
a10[CTAH] path: 481
a10[CTAH] path: 482
a10[CTAH] path: 483
a10[CTAH] path: 484
a10[CTAH] path: 485
a10[CTAH] path: 486
a10[CTAH] path: 487
a10[CTAH] path: 488
a10[CTAH] path: 489
a10[CTAH] path: 490
a10[CTAH] path: 491
a10[CTAH] path: 492
a10[CTAH] path: 493
a10[CTAH] path: 494
a10[CTAH] path: 495
a10[CTAH] path: 496
a10[CTAH] path: 497
a10[CTAH] path: 498
a10[CTAH] path: 499
a10[CTAH] path: 500
a10[CTAH] path: 501
a10[CTAH] path: 502
a10[CTAH] path: 503
a10[CTAH] path: 504
a10[CTAH] path: 505
a10[CTAH] path: 506
a10[CTAH] path: 507
a10[CTAH] path: 508
a10[CTAH] path: 509
a10[CTAH] path: 510
a10[CTAH] path: 511
a10[CTAH] path: 512
a10[CTAH] path: 513
a10[CTAH] path: 514
a10[CTAH] path: 515
a10[CTAH] path: 516
a10[CTAH] path: 517
a10[CTAH] path: 518
a10[CTAH] path: 519
a10[CTAH] path: 520
a10[CTAH] path: 521
a10[CTAH] path: 522
a10[CTAH] path: 523
a10[CTAH] path: 524
a10[CTAH] path: 525
a10[CTAH] path: 526
a10[CTAH] path: 527
a10[CTAH] path: 528
a10[CTAH] path: 529
a10[CTAH] path: 530
a10[CTAH] path: 531
a10[CTAH] path: 532
a10[CTAH] path: 533
a10[CTAH] path: 534
a10[CTAH] path: 535
a10[CTAH] path: 536
a10[CTAH] path: 537
a10[CTAH] path: 538
a10[CTAH] path: 539
a10[CTAH] path: 540
a10[CTAH] path: 541
a10[CTAH] path: 542
a10[CTAH] path: 543
a10[CTAH] path: 544
a10[CTAH] path: 545
a10[CTAH] path: 546
a10[CTAH] path: 547
a10[CTAH] path: 548
a10[CTAH] path: 549
a10[CTAH] path: 550
a10[CTAH] path: 551
a10[CTAH] path: 552
a10[CTAH] path: 553
a10[CTAH] path: 554
a10[CTAH] path: 555
a10[CTAH] path: 556
a10[CTAH] path: 557
a10[CTAH] path: 558
a10[CTAH] path: 559
a10[CTAH] path: 560
a10[CTAH] path: 561
a10[CTAH] path: 562
a10[CTAH] path: 563
a10[CTAH] path: 564
a10[CTAH] path: 565
a10[CTAH] path: 566
a10[CTAH] path: 567
a10[CTAH] path: 568
a10[CTAH] path: 569
a10[CTAH] path: 570
a10[CTAH] path: 571
a10[CTAH] path: 572
a10[CTAH] path: 573
a10[CTAH] path: 574
a10[CTAH] path: 575
a10[CTAH] path: 576
a10[CTAH] path: 577
a10[CTAH] path: 578
a10[CTAH] path: 579
a10[CTAH] path: 580
a10[CTAH] path: 581
a10[CTAH] path: 582
a10[CTAH] path: 583
a10[CTAH] path: 584
a10[CTAH] path: 585
a10[CTAH] path: 586
a10[CTAH] path: 587
a10[CTAH] path: 588
a10[CTAH] path: 589
a10[CTAH] path: 590
a10[CTAH] path: 591
a10[CTAH] path: 592
a10[CTAH] path: 593
a10[CTAH] path: 594
a10[CTAH] path: 595
a10[CTAH] path: 596
a10[CTAH] path: 597
a10[CTAH] path: 598
a10[CTAH] path: 599
a10[CTAH] path: 600
a10[CTAH] path: 601
a10[CTAH] path: 602
a10[CTAH] path: 603
a10[CTAH] path: 604
a10[CTAH] path: 605
a10[CTAH] path: 606
a10[CTAH] path: 607
a10[CTAH] path: 608
a10[CTAH] path: 609
a10[CTAH] path: 610
a10[CTAH] path: 611
a10[CTAH] path: 612
a10[CTAH] path: 613
a10[CTAH] path: 614
a10[CTAH] path: 615
a10[CTAH] path: 616
a10[CTAH] path: 617
a10[CTAH] path: 618
a10[CTAH] path: 619
a10[CTAH] path: 620
a10[CTAH] path: 621
a10[CTAH] path: 622
a10[CTAH] path: 623
a10[CTAH] path: 624
a10[CTAH] path: 625
a10[CTAH] path: 626
a10[CTAH] path: 627
a10[CTAH] path: 628
a10[CTAH] path: 629
a10[CTAH] path: 630
a10[CTAH] path: 631
a10[CTAH] path: 632
a10[CTAH] path: 633
a10[CTAH] path: 634
a10[CTAH] path: 635
a10[CTAH] path: 636
a10[CTAH] path: 637
a10[CTAH] path: 638
a10[CTAH] path: 639
a10[CTAH] path: 640
a10[CTAH] path: 641
a10[CTAH] path: 642
a10[CTAH] path: 643
a10[CTAH] path: 644
a10[CTAH] path: 645
a10[CTAH] path: 646
a10[CTAH] path: 647
a10[CTAH] path: 648
a10[CTAH] path: 649
a10[CTAH] path: 650
a10[CTAH] path: 651
a10[CTAH] path: 652
a10[CTAH] path: 653
a10[CTAH] path: 654
a10[CTAH] path: 655
a10[CTAH] path: 656
a10[CTAH] path: 657
a10[CTAH] path: 658
a10[CTAH] path: 659
a10[CTAH] path: 660
a10[CTAH] path: 661
a10[CTAH] path: 662
a10[CTAH] path: 663
a10[CTAH] path: 664
a10[CTAH] path: 665
a10[CTAH] path: 666
a10[CTAH] path: 667
a10[CTAH] path: 668
a10[CTAH] path: 669
a10[CTAH] path: 670
a10[CTAH] path: 671
a10[CTAH] path: 672
a10[CTAH] path: 673
a10[CTAH] path: 674
a10[CTAH] path: 675
a10[CTAH] path: 676
a10[CTAH] path: 677
a10[CTAH] path: 678
a10[CTAH] path: 679
a10[CTAH] path: 680
a10[CTAH] path: 681
a10[CTAH] path: 682
a10[CTAH] path: 683
a10[CTAH] path: 684
a10[CTAH] path: 685
a10[CTAH] path: 686
a10[CTAH] path: 687
a10[CTAH] path: 688
a10[CTAH] path: 689
a10[CTAH] path: 690
a10[CTAH] path: 691
a10[CTAH] path: 692
a10[CTAH] path: 693
a10[CTAH] path: 694
a10[CTAH] path: 695
a10[CTAH] path: 696
a10[CTAH] path: 697
a10[CTAH] path: 698
a10[CTAH] path: 699
a10[CTAH] path: 700
a10[CTAH] path: 701
a10[CTAH] path: 702
a10[CTAH] path: 703
a10[CTAH] path: 704
a10[CTAH] path: 705
a10[CTAH] path: 706
a10[CTAH] path: 707
a10[CTAH] path: 708
a10[CTAH] path: 709
a10[CTAH] path: 710
a10[CTAH] path: 711
a10[CTAH] path: 712
a10[CTAH] path: 713
a10[CTAH] path: 714
a10[CTAH] path: 715
a10[CTAH] path: 716
a10[CTAH] path: 717
a10[CTAH] path: 718
a10[CTAH] path: 719
a10[CTAH] path: 720
a10[CTAH] path: 721
a10[CTAH] path: 722
a10[CTAH] path: 723
a10[CTAH] path: 724
a10[CTAH] path: 725
a10[CTAH] path: 726
a10[CTAH] path: 727
a10[CTAH] path: 728
a10[CTAH] path: 729
a10[CTAH] path: 730
a10[CTAH] path: 731
a10[CTAH] path: 732
a10[CTAH] path: 733
a10[CTAH] path: 734
a10[CTAH] path: 735
a10[CTAH] path: 736
a10[CTAH] path: 737
a10[CTAH] path: 738
a10[CTAH] path: 739
a10[CTAH] path: 740
a10[CTAH] path: 741
a10[CTAH] path: 742
a10[CTAH] path: 743
a10[CTAH] path: 744
a10[CTAH] path: 745
a10[CTAH] path: 746
a10[CTAH] path: 747
a10[CTAH] path: 748
a10[CTAH] path: 749
a10[CTAH] path: 750
a10[CTAH] path: 751
a10[CTAH] path: 752
a10[CTAH] path: 753
a10[CTAH] path: 754
a10[CTAH] path: 755
a10[CTAH] path: 756
a10[CTAH] path: 757
a10[CTAH] path: 758
a10[CTAH] path: 759
a10[CTAH] path: 760
a10[CTAH] path: 761
a10[CTAH] path: 762
a10[CTAH] path: 763
a10[CTAH] path: 764
a10[CTAH] path: 765
a10[CTAH] path: 766
a10[CTAH] path: 767
a10[CTAH] path: 768
a10[CTAH] path: 769
a10[CTAH] path: 770
a10[CTAH] path: 771
a10[CTAH] path: 772
a10[CTAH] path: 773
a10[CTAH] path: 774
a10[CTAH] path: 775
a10[CTAH] path: 776
a10[CTAH] path: 777
a10[CTAH] path: 778
a10[CTAH] path: 779
a10[CTAH] path: 780
a10[CTAH] path: 781
a10[CTAH] path: 782
a10[CTAH] path: 783
a10[CTAH] path: 784
a10[CTAH] path: 785
a10[CTAH] path: 786
a10[CTAH] path: 787
a10[CTAH] path: 788
a10[CTAH] path: 789
a10[CTAH] path: 790
a10[CTAH] path: 791
a10[CTAH] path: 792
a10[CTAH] path: 793
a10[CTAH] path: 794
a10[CTAH] path: 795
a10[CTAH] path: 796
a10[CTAH] path: 797
a10[CTAH] path: 798
a10[CTAH] path: 799
a10[CTAH] path: 800
a10[CTAH] path: 801
a10[CTAH] path: 802
a10[CTAH] path: 803
a10[CTAH] path: 804
a10[CTAH] path: 805
a10[CTAH] path: 806
a10[CTAH] path: 807
a10[CTAH] path: 808
a10[CTAH] path: 809
a10[CTAH] path: 810
a10[CTAH] path: 811
a10[CTAH] path: 812
a10[CTAH] path: 813
a10[CTAH] path: 814
a10[CTAH] path: 815
a10[CTAH] path: 816
a10[CTAH] path: 817
a10[CTAH] path: 818
a10[CTAH] path: 819
a10[CTAH] path: 820
a10[CTAH] path: 821
a10[CTAH] path: 822
a10[CTAH] path: 823
a10[CTAH] path: 824
a10[CTAH] path: 825
a10[CTAH] path: 826
a10[CTAH] path: 827
a10[CTAH] path: 828
a10[CTAH] path: 829
a10[CTAH] path: 830
a10[CTAH] path: 831
a10[CTAH] path: 832
a10[CTAH] path: 833
a10[CTAH] path: 834
a10[CTAH] path: 835
a10[CTAH] path: 836
a10[CTAH] path: 837
a10[CTAH] path: 838
a10[CTAH] path: 839
a10[CTAH] path: 840
a10[CTAH] path: 841
a10[CTAH] path: 842
a10[CTAH] path: 843
a10[CTAH] path: 844
a10[CTAH] path: 845
a10[CTAH] path: 846
a10[CTAH] path: 847
a10[CTAH] path: 848
a10[CTAH] path: 849
a10[CTAH] path: 850
a10[CTAH] path: 851
a10[CTAH] path: 852
a10[CTAH] path: 853
a10[CTAH] path: 854
a10[CTAH] path: 855
a10[CTAH] path: 856
a10[CTAH] path: 857
a10[CTAH] path: 858
a10[CTAH] path: 859
a10[CTAH] path: 860
a10[CTAH] path: 861
a10[CTAH] path: 862
a10[CTAH] path: 863
a10[CTAH] path: 864
a10[CTAH] path: 865
a10[CTAH] path: 866
a10[CTAH] path: 867
a10[CTAH] path: 868
a10[CTAH] path: 869
a10[CTAH] path: 870
a10[CTAH] path: 871
a10[CTAH] path: 872
a10[CTAH] path: 873
a10[CTAH] path: 874
a10[CTAH] path: 875
a10[CTAH] path: 876
a10[CTAH] path: 877
a10[CTAH] path: 878
a10[CTAH] path: 879
a10[CTAH] path: 880
a10[CTAH] path: 881
a10[CTAH] path: 882
a10[CTAH] path: 883
a10[CTAH] path: 884
a10[CTAH] path: 885
a10[CTAH] path: 886
a10[CTAH] path: 887
a10[CTAH] path: 888
a10[CTAH] path: 889
a10[CTAH] path: 890
a10[CTAH] path: 891
a10[CTAH] path: 892
a10[CTAH] path: 893
a10[CTAH] path: 894
a10[CTAH] path: 895
a10[CTAH] path: 896
a10[CTAH] path: 897
a10[CTAH] path: 898
a10[CTAH] path: 899
a10[CTAH] path: 900
a10[CTAH] path: 901
a10[CTAH] path: 902
a10[CTAH] path: 903
a10[CTAH] path: 904
a10[CTAH] path: 905
a10[CTAH] path: 906
a10[CTAH] path: 907
a10[CTAH] path: 908
a10[CTAH] path: 909
a10[CTAH] path: 910
a10[CTAH] path: 911
a10[CTAH] path: 912
a10[CTAH] path: 913
a10[CTAH] path: 914
a10[CTAH] path: 915
a10[CTAH] path: 916
a10[CTAH] path: 917
a10[CTAH] path: 918
a10[CTAH] path: 919
a10[CTAH] path: 920
a10[CTAH] path: 921
a10[CTAH] path: 922
a10[CTAH] path: 923
a10[CTAH] path: 924
a10[CTAH] path: 925
a10[CTAH] path: 926
a10[CTAH] path: 927
a10[CTAH] path: 928
a10[CTAH] path: 929
a10[CTAH] path: 930
a10[CTAH] path: 931
a10[CTAH] path: 932
a10[CTAH] path: 933
a10[CTAH] path: 934
a10[CTAH] path: 935
a10[CTAH] path: 936
a10[CTAH] path: 937
a10[CTAH] path: 938
a10[CTAH] path: 939
a10[CTAH] path: 940
a10[CTAH] path: 941
a10[CTAH] path: 942
a10[CTAH] path: 943
a10[CTAH] path: 944
a10[CTAH] path: 945
a10[CTAH] path: 946
a10[CTAH] path: 947
a10[CTAH] path: 948
a10[CTAH] path: 949
a10[CTAH] path: 950
a10[CTAH] path: 951
a10[CTAH] path: 952
a10[CTAH] path: 953
a10[CTAH] path: 954
a10[CTAH] path: 955
a10[CTAH] path: 956
a10[CTAH] path: 957
a10[CTAH] path: 958
a10[CTAH] path: 959
a10[CTAH] path: 960
a10[CTAH] path: 961
a10[CTAH] path: 962
a10[CTAH] path: 963
a10[CTAH] path: 964
a10[CTAH] path: 965
a10[CTAH] path: 966
a10[CTAH] path: 967
a10[CTAH] path: 968
a10[CTAH] path: 969
a10[CTAH] path: 970
a10[CTAH] path: 971
a10[CTAH] path: 972
a10[CTAH] path: 973
a10[CTAH] path: 974
a10[CTAH] path: 975
a10[CTAH] path: 976
a10[CTAH] path: 977
a10[CTAH] path: 978
a10[CTAH] path: 979
a10[CTAH] path: 980
a10[CTAH] path: 981
a10[CTAH] path: 982
a10[CTAH] path: 983
a10[CTAH] path: 984
a10[CTAH] path: 985
a10[CTAH] path: 986
a10[CTAH] path: 987
a10[CTAH] path: 988
a10[CTAH] path: 989
a10[CTAH] path: 990
a10[CTAH] path: 991
a10[CTAH] path: 992
a10[CTAH] path: 993
a10[CTAH] path: 994
a10[CTAH] path: 995
a10[CTAH] path: 996
a10[CTAH] path: 997
a10[CTAH] path: 998
a10[CTAH] path: 999
a10[CTAH] moveStepToGoalTest havent found anything
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


Event processed @ctenv(functionToList(proposal(proposal, 3, 971, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed UpdateClock(8)
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	@ctenv(functionToList(proposal(proposal, 3, 971, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
},
{	UpdateClock(8)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), @ctenv(functionToList(proposal(proposal, 3, 971, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), UpdateClock(8)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	@ctenv(functionToList(proposal(proposal, 3, 971, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
},
{	UpdateClock(8)
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@6c3d813a
[CTAH] The created APLList : [proposal,3,971,open]
[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,3,971,open])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([proposal,3,971,open])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([proposal,3,971,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([proposal,3,971,open])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([proposal,3,971,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,3,971,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,3,971,open])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([proposal,3,971,open])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([proposal,3,971,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,3,971,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,3,971,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A1,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A1,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([proposal,3,971,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,3,971,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,3,971,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,3,971,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	B([A1,B]=[3,2]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,3,971,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[new scheduled]:[B([A1,B]=[3,2]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([proposal,3,971,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	B([A1,B]=[3,2]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,3,971,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(3, 971, open)
		}
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B(proposal=proposal) then ReceivedProposal(3, 971, open)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(3, 971, open)
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedProposal(3, 971, open)
}


[new scheduled]:[if B(700>100) then @ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), ReceivedProposal(3, 971, open)]
[After]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedProposal(3, 971, open)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[getScoreAfterExchange(0, 971); if G(at(A, B, C)) then skip else makeResponse(971, accept), @ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	getScoreAfterExchange(0, 971);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(971, accept)
		}
},
{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a10[CTAH] going goal: 3,2 color: blue
[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a30[CTAH] paths: 1000
Need to wait 4 more seconds
[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


object notification: Time [clock=9, time=2015-05-27 16:47:39.335]
object notification: Time [clock=9, time=2015-05-27 16:47:39.335]
org notification: Time [clock=9, time=2015-05-27 16:47:39.335]
object notification: Time [clock=9, time=2015-05-27 16:47:39.335]
a10[CTAH] paths: 1000
Need to wait 3 more seconds
a30[CTAH] path: 0
a30[CTAH] path: 1
a30[CTAH] path: 2
a30[CTAH] path: 3
a30[CTAH] path: 4
a30[CTAH] path: 5
a30[CTAH] path: 6
a30[CTAH] path: 7
a30[CTAH] path: 8
a30[CTAH] path: 9
a30[CTAH] path: 10
a30[CTAH] path: 11
a30[CTAH] path: 12
a30[CTAH] path: 13
a30[CTAH] path: 14
a30[CTAH] path: 15
a30[CTAH] path: 16
a30[CTAH] path: 17
a30[CTAH] path: 18
a30[CTAH] path: 19
a30[CTAH] path: 20
a30[CTAH] path: 21
a30[CTAH] path: 22
a30[CTAH] path: 23
a30[CTAH] path: 24
a30[CTAH] path: 25
a30[CTAH] path: 26
a30[CTAH] path: 27
a30[CTAH] path: 28
a30[CTAH] path: 29
a30[CTAH] path: 30
a30[CTAH] path: 31
a30[CTAH] path: 32
a30[CTAH] path: 33
a30[CTAH] path: 34
a30[CTAH] path: 35
a30[CTAH] path: 36
a30[CTAH] path: 37
a30[CTAH] path: 38
a30[CTAH] path: 39
a30[CTAH] path: 40
a30[CTAH] path: 41
a30[CTAH] path: 42
a30[CTAH] path: 43
a30[CTAH] path: 44
a30[CTAH] path: 45
a30[CTAH] path: 46
a30[CTAH] path: 47
a30[CTAH] path: 48
a30[CTAH] path: 49
a30[CTAH] path: 50
a30[CTAH] path: 51
a30[CTAH] path: 52
a30[CTAH] path: 53
a30[CTAH] path: 54
a30[CTAH] path: 55
a30[CTAH] path: 56
a30[CTAH] path: 57
a30[CTAH] path: 58
a30[CTAH] path: 59
a30[CTAH] path: 60
a30[CTAH] path: 61
a30[CTAH] path: 62
a30[CTAH] path: 63
a30[CTAH] path: 64
a30[CTAH] path: 65
a30[CTAH] path: 66
a30[CTAH] path: 67
a30[CTAH] path: 68
a30[CTAH] path: 69
a30[CTAH] path: 70
a30[CTAH] path: 71
a30[CTAH] path: 72
a30[CTAH] path: 73
a30[CTAH] path: 74
a30[CTAH] path: 75
a30[CTAH] path: 76
a30[CTAH] path: 77
a30[CTAH] path: 78
a30[CTAH] path: 79
a30[CTAH] path: 80
a30[CTAH] path: 81
a30[CTAH] path: 82
a30[CTAH] path: 83
a30[CTAH] path: 84
a30[CTAH] path: 85
a30[CTAH] path: 86
a30[CTAH] path: 87
a30[CTAH] path: 88
a30[CTAH] path: 89
a30[CTAH] path: 90
a30[CTAH] path: 91
a30[CTAH] path: 92
a30[CTAH] path: 93
a30[CTAH] path: 94
a30[CTAH] path: 95
a30[CTAH] path: 96
a30[CTAH] path: 97
a30[CTAH] path: 98
a30[CTAH] path: 99
a30[CTAH] path: 100
a30[CTAH] path: 101
a30[CTAH] path: 102
a30[CTAH] path: 103
a30[CTAH] path: 104
a30[CTAH] path: 105
a30[CTAH] path: 106
a30[CTAH] path: 107
a30[CTAH] path: 108
a30[CTAH] path: 109
a30[CTAH] path: 110
a30[CTAH] path: 111
a30[CTAH] path: 112
a30[CTAH] path: 113
a30[CTAH] path: 114
a30[CTAH] path: 115
a30[CTAH] path: 116
a30[CTAH] path: 117
a30[CTAH] path: 118
a30[CTAH] path: 119
a30[CTAH] path: 120
a30[CTAH] path: 121
a30[CTAH] path: 122
a30[CTAH] path: 123
a30[CTAH] path: 124
a30[CTAH] path: 125
a30[CTAH] path: 126
a30[CTAH] path: 127
a30[CTAH] path: 128
a30[CTAH] path: 129
a30[CTAH] path: 130
a30[CTAH] path: 131
a30[CTAH] path: 132
a30[CTAH] path: 133
a30[CTAH] path: 134
a30[CTAH] path: 135
a30[CTAH] path: 136
a30[CTAH] path: 137
a30[CTAH] path: 138
a30[CTAH] path: 139
a30[CTAH] path: 140
a30[CTAH] path: 141
a30[CTAH] path: 142
a30[CTAH] path: 143
a30[CTAH] path: 144
a30[CTAH] path: 145
a30[CTAH] path: 146
a30[CTAH] path: 147
a30[CTAH] path: 148
a30[CTAH] path: 149
a30[CTAH] path: 150
a30[CTAH] path: 151
a30[CTAH] path: 152
a30[CTAH] path: 153
a30[CTAH] path: 154
a30[CTAH] path: 155
a30[CTAH] path: 156
a30[CTAH] path: 157
a30[CTAH] path: 158
a30[CTAH] path: 159
a30[CTAH] path: 160
a30[CTAH] path: 161
a30[CTAH] path: 162
a30[CTAH] path: 163
a30[CTAH] path: 164
a30[CTAH] path: 165
a30[CTAH] path: 166
a30[CTAH] path: 167
a30[CTAH] path: 168
a30[CTAH] path: 169
a30[CTAH] path: 170
a30[CTAH] path: 171
a30[CTAH] path: 172
a30[CTAH] path: 173
a30[CTAH] path: 174
a30[CTAH] path: 175
a30[CTAH] path: 176
a30[CTAH] path: 177
a30[CTAH] path: 178
a30[CTAH] path: 179
a30[CTAH] path: 180
a30[CTAH] path: 181
a30[CTAH] path: 182
a30[CTAH] path: 183
a30[CTAH] path: 184
a30[CTAH] path: 185
a30[CTAH] path: 186
a30[CTAH] path: 187
a30[CTAH] path: 188
a30[CTAH] path: 189
a30[CTAH] path: 190
a30[CTAH] path: 191
a30[CTAH] path: 192
a30[CTAH] path: 193
a30[CTAH] path: 194
a30[CTAH] path: 195
a30[CTAH] path: 196
a30[CTAH] path: 197
a30[CTAH] path: 198
a30[CTAH] path: 199
a30[CTAH] path: 200
a30[CTAH] path: 201
a30[CTAH] path: 202
a30[CTAH] path: 203
a30[CTAH] path: 204
a30[CTAH] path: 205
a30[CTAH] path: 206
a30[CTAH] path: 207
a30[CTAH] path: 208
a30[CTAH] path: 209
a30[CTAH] path: 210
a30[CTAH] path: 211
a30[CTAH] path: 212
a30[CTAH] path: 213
a30[CTAH] path: 214
a30[CTAH] path: 215
a30[CTAH] path: 216
a30[CTAH] path: 217
a30[CTAH] path: 218
a30[CTAH] path: 219
a30[CTAH] path: 220
a30[CTAH] path: 221
a30[CTAH] path: 222
a30[CTAH] path: 223
a30[CTAH] path: 224
a30[CTAH] path: 225
a30[CTAH] path: 226
a30[CTAH] path: 227
a30[CTAH] path: 228
a30[CTAH] path: 229
a30[CTAH] path: 230
a30[CTAH] path: 231
a30[CTAH] path: 232
a30[CTAH] path: 233
a30[CTAH] path: 234
a30[CTAH] path: 235
a30[CTAH] path: 236
a30[CTAH] path: 237
a30[CTAH] path: 238
a30[CTAH] path: 239
a30[CTAH] path: 240
a30[CTAH] path: 241
a30[CTAH] path: 242
a30[CTAH] path: 243
a30[CTAH] path: 244
a30[CTAH] path: 245
a30[CTAH] path: 246
a30[CTAH] path: 247
a30[CTAH] path: 248
a30[CTAH] path: 249
a30[CTAH] path: 250
a30[CTAH] path: 251
a30[CTAH] path: 252
a30[CTAH] path: 253
a30[CTAH] path: 254
a30[CTAH] path: 255
a30[CTAH] path: 256
a30[CTAH] path: 257
a30[CTAH] path: 258
a30[CTAH] path: 259
a30[CTAH] path: 260
a30[CTAH] path: 261
a30[CTAH] path: 262
a30[CTAH] path: 263
a30[CTAH] path: 264
a30[CTAH] path: 265
a30[CTAH] path: 266
a30[CTAH] path: 267
a30[CTAH] path: 268
a30[CTAH] path: 269
a30[CTAH] path: 270
a30[CTAH] path: 271
a30[CTAH] path: 272
a30[CTAH] path: 273
a30[CTAH] path: 274
a30[CTAH] path: 275
a30[CTAH] path: 276
a30[CTAH] path: 277
a30[CTAH] path: 278
a30[CTAH] path: 279
a30[CTAH] path: 280
a30[CTAH] path: 281
a30[CTAH] path: 282
a30[CTAH] path: 283
a30[CTAH] path: 284
a30[CTAH] path: 285
a30[CTAH] path: 286
a30[CTAH] path: 287
a30[CTAH] path: 288
a30[CTAH] path: 289
a30[CTAH] path: 290
a30[CTAH] path: 291
a30[CTAH] path: 292
a30[CTAH] path: 293
a30[CTAH] path: 294
a30[CTAH] path: 295
a30[CTAH] path: 296
a30[CTAH] path: 297
a30[CTAH] path: 298
a30[CTAH] path: 299
a30[CTAH] path: 300
a30[CTAH] path: 301
a30[CTAH] path: 302
a30[CTAH] path: 303
a30[CTAH] path: 304
a30[CTAH] path: 305
a30[CTAH] path: 306
a30[CTAH] path: 307
a30[CTAH] path: 308
a30[CTAH] path: 309
a30[CTAH] path: 310
a30[CTAH] path: 311
a30[CTAH] path: 312
a30[CTAH] path: 313
a30[CTAH] path: 314
a30[CTAH] path: 315
a30[CTAH] path: 316
a30[CTAH] path: 317
a30[CTAH] path: 318
a30[CTAH] path: 319
a30[CTAH] path: 320
a30[CTAH] path: 321
a30[CTAH] path: 322
a30[CTAH] path: 323
a30[CTAH] path: 324
a30[CTAH] path: 325
a30[CTAH] path: 326
a30[CTAH] path: 327
a30[CTAH] path: 328
a30[CTAH] path: 329
a30[CTAH] path: 330
a30[CTAH] path: 331
a30[CTAH] path: 332
a30[CTAH] path: 333
a30[CTAH] path: 334
a30[CTAH] path: 335
a30[CTAH] path: 336
a30[CTAH] path: 337
a30[CTAH] path: 338
a30[CTAH] path: 339
a30[CTAH] path: 340
a30[CTAH] path: 341
a30[CTAH] path: 342
a30[CTAH] path: 343
a30[CTAH] path: 344
a30[CTAH] path: 345
a30[CTAH] path: 346
a30[CTAH] path: 347
a30[CTAH] path: 348
a30[CTAH] path: 349
a30[CTAH] path: 350
a30[CTAH] path: 351
a30[CTAH] path: 352
a30[CTAH] path: 353
a30[CTAH] path: 354
a30[CTAH] path: 355
a30[CTAH] path: 356
a30[CTAH] path: 357
a30[CTAH] path: 358
a30[CTAH] path: 359
a30[CTAH] path: 360
a30[CTAH] path: 361
a30[CTAH] path: 362
a30[CTAH] path: 363
a30[CTAH] path: 364
a30[CTAH] path: 365
a30[CTAH] path: 366
a30[CTAH] path: 367
a30[CTAH] path: 368
a30[CTAH] path: 369
a30[CTAH] path: 370
a30[CTAH] path: 371
a30[CTAH] path: 372
a30[CTAH] path: 373
a30[CTAH] path: 374
a30[CTAH] path: 375
a30[CTAH] path: 376
a30[CTAH] path: 377
a30[CTAH] path: 378
a30[CTAH] path: 379
a30[CTAH] path: 380
a30[CTAH] path: 381
a30[CTAH] path: 382
a30[CTAH] path: 383
a30[CTAH] path: 384
a30[CTAH] path: 385
a30[CTAH] path: 386
a30[CTAH] path: 387
a30[CTAH] path: 388
a30[CTAH] path: 389
a30[CTAH] path: 390
a30[CTAH] path: 391
a30[CTAH] path: 392
a30[CTAH] path: 393
a30[CTAH] path: 394
a30[CTAH] path: 395
a30[CTAH] path: 396
a30[CTAH] path: 397
a30[CTAH] path: 398
a30[CTAH] path: 399
a30[CTAH] path: 400
a30[CTAH] path: 401
a30[CTAH] path: 402
a30[CTAH] path: 403
a30[CTAH] path: 404
a30[CTAH] path: 405
a30[CTAH] path: 406
a30[CTAH] path: 407
a30[CTAH] path: 408
a30[CTAH] path: 409
a30[CTAH] path: 410
a30[CTAH] path: 411
a30[CTAH] path: 412
a30[CTAH] path: 413
a30[CTAH] path: 414
a30[CTAH] path: 415
a30[CTAH] path: 416
a30[CTAH] path: 417
a30[CTAH] path: 418
a30[CTAH] path: 419
a30[CTAH] path: 420
a30[CTAH] path: 421
a30[CTAH] path: 422
a30[CTAH] path: 423
a30[CTAH] path: 424
a30[CTAH] path: 425
a30[CTAH] path: 426
a30[CTAH] path: 427
a30[CTAH] path: 428
a30[CTAH] path: 429
a30[CTAH] path: 430
a30[CTAH] path: 431
a30[CTAH] path: 432
a30[CTAH] path: 433
a30[CTAH] path: 434
a30[CTAH] path: 435
a30[CTAH] path: 436
a30[CTAH] path: 437
a30[CTAH] path: 438
a30[CTAH] path: 439
a30[CTAH] path: 440
a30[CTAH] path: 441
a30[CTAH] path: 442
a30[CTAH] path: 443
a30[CTAH] path: 444
a30[CTAH] path: 445
a30[CTAH] path: 446
a30[CTAH] path: 447
a30[CTAH] path: 448
a30[CTAH] path: 449
a30[CTAH] path: 450
a30[CTAH] path: 451
a30[CTAH] path: 452
a30[CTAH] path: 453
a30[CTAH] path: 454
a30[CTAH] path: 455
a30[CTAH] path: 456
a30[CTAH] path: 457
a30[CTAH] path: 458
a30[CTAH] path: 459
a30[CTAH] path: 460
a30[CTAH] path: 461
a30[CTAH] path: 462
a30[CTAH] path: 463
a30[CTAH] path: 464
a30[CTAH] path: 465
a30[CTAH] path: 466
a30[CTAH] path: 467
a30[CTAH] path: 468
a30[CTAH] path: 469
a30[CTAH] path: 470
a30[CTAH] path: 471
a30[CTAH] path: 472
a30[CTAH] path: 473
a30[CTAH] path: 474
a30[CTAH] path: 475
a30[CTAH] path: 476
a30[CTAH] path: 477
a30[CTAH] path: 478
a30[CTAH] path: 479
a30[CTAH] path: 480
a30[CTAH] path: 481
a30[CTAH] path: 482
a30[CTAH] path: 483
a30[CTAH] path: 484
a30[CTAH] path: 485
a30[CTAH] path: 486
a30[CTAH] path: 487
a30[CTAH] path: 488
a30[CTAH] path: 489
a30[CTAH] path: 490
a30[CTAH] path: 491
a30[CTAH] path: 492
a30[CTAH] path: 493
a30[CTAH] path: 494
a30[CTAH] path: 495
a30[CTAH] path: 496
a30[CTAH] path: 497
a30[CTAH] path: 498
a30[CTAH] path: 499
a30[CTAH] path: 500
a30[CTAH] path: 501
a30[CTAH] path: 502
a30[CTAH] path: 503
a30[CTAH] path: 504
a30[CTAH] path: 505
a30[CTAH] path: 506
a30[CTAH] path: 507
a30[CTAH] path: 508
a30[CTAH] path: 509
a30[CTAH] path: 510
a30[CTAH] path: 511
a30[CTAH] path: 512
a30[CTAH] path: 513
a30[CTAH] path: 514
a30[CTAH] path: 515
a30[CTAH] path: 516
a30[CTAH] path: 517
a30[CTAH] path: 518
a30[CTAH] path: 519
a30[CTAH] path: 520
a30[CTAH] path: 521
a30[CTAH] path: 522
a30[CTAH] path: 523
a30[CTAH] path: 524
a30[CTAH] path: 525
a30[CTAH] path: 526
a30[CTAH] path: 527
a30[CTAH] path: 528
a30[CTAH] path: 529
a30[CTAH] path: 530
a30[CTAH] path: 531
a30[CTAH] path: 532
a30[CTAH] path: 533
a30[CTAH] path: 534
a30[CTAH] path: 535
a30[CTAH] path: 536
a30[CTAH] path: 537
a30[CTAH] path: 538
a30[CTAH] path: 539
a30[CTAH] path: 540
a30[CTAH] path: 541
a30[CTAH] path: 542
a30[CTAH] path: 543
a30[CTAH] path: 544
a30[CTAH] path: 545
a30[CTAH] path: 546
a30[CTAH] path: 547
a30[CTAH] path: 548
a30[CTAH] path: 549
a30[CTAH] path: 550
a30[CTAH] path: 551
a30[CTAH] path: 552
a30[CTAH] path: 553
a30[CTAH] path: 554
a30[CTAH] path: 555
a30[CTAH] path: 556
a30[CTAH] path: 557
a30[CTAH] path: 558
a30[CTAH] path: 559
a30[CTAH] path: 560
a30[CTAH] path: 561
a30[CTAH] path: 562
a30[CTAH] path: 563
a30[CTAH] path: 564
a30[CTAH] path: 565
a30[CTAH] path: 566
a30[CTAH] path: 567
a30[CTAH] path: 568
a30[CTAH] path: 569
a30[CTAH] path: 570
a30[CTAH] path: 571
a30[CTAH] path: 572
a30[CTAH] path: 573
a30[CTAH] path: 574
a30[CTAH] path: 575
a30[CTAH] path: 576
a30[CTAH] path: 577
a30[CTAH] path: 578
a30[CTAH] path: 579
a30[CTAH] path: 580
a30[CTAH] path: 581
a30[CTAH] path: 582
a30[CTAH] path: 583
a30[CTAH] path: 584
a30[CTAH] path: 585
a30[CTAH] path: 586
a30[CTAH] path: 587
a30[CTAH] path: 588
a30[CTAH] path: 589
a30[CTAH] path: 590
a30[CTAH] path: 591
a30[CTAH] path: 592
a30[CTAH] path: 593
a30[CTAH] path: 594
a30[CTAH] path: 595
a30[CTAH] path: 596
a30[CTAH] path: 597
a30[CTAH] path: 598
a30[CTAH] path: 599
a30[CTAH] path: 600
a30[CTAH] path: 601
a30[CTAH] path: 602
a30[CTAH] path: 603
a30[CTAH] path: 604
a30[CTAH] path: 605
a30[CTAH] path: 606
a30[CTAH] path: 607
a30[CTAH] path: 608
a30[CTAH] path: 609
a30[CTAH] path: 610
a30[CTAH] path: 611
a30[CTAH] path: 612
a30[CTAH] path: 613
a30[CTAH] path: 614
a30[CTAH] path: 615
a30[CTAH] path: 616
a30[CTAH] path: 617
a30[CTAH] path: 618
a30[CTAH] path: 619
a30[CTAH] path: 620
a30[CTAH] path: 621
a30[CTAH] path: 622
a30[CTAH] path: 623
a30[CTAH] path: 624
a30[CTAH] path: 625
a30[CTAH] path: 626
a30[CTAH] path: 627
a30[CTAH] path: 628
a30[CTAH] path: 629
a30[CTAH] path: 630
a30[CTAH] path: 631
a30[CTAH] path: 632
a30[CTAH] path: 633
a30[CTAH] path: 634
a30[CTAH] path: 635
a30[CTAH] path: 636
a30[CTAH] path: 637
a30[CTAH] path: 638
a30[CTAH] path: 639
a30[CTAH] path: 640
a30[CTAH] path: 641
a30[CTAH] path: 642
a30[CTAH] path: 643
a30[CTAH] path: 644
a30[CTAH] path: 645
a30[CTAH] path: 646
a30[CTAH] path: 647
a30[CTAH] path: 648
a30[CTAH] path: 649
a30[CTAH] path: 650
a30[CTAH] path: 651
a30[CTAH] path: 652
a30[CTAH] path: 653
a30[CTAH] path: 654
a30[CTAH] path: 655
a30[CTAH] path: 656
a30[CTAH] path: 657
a30[CTAH] path: 658
a30[CTAH] path: 659
a30[CTAH] path: 660
a30[CTAH] path: 661
a30[CTAH] path: 662
a30[CTAH] path: 663
a30[CTAH] path: 664
a30[CTAH] path: 665
a30[CTAH] path: 666
a30[CTAH] path: 667
a30[CTAH] path: 668
a30[CTAH] path: 669
a30[CTAH] path: 670
a30[CTAH] path: 671
a30[CTAH] path: 672
a30[CTAH] path: 673
a30[CTAH] path: 674
a30[CTAH] path: 675
a30[CTAH] path: 676
a30[CTAH] path: 677
a30[CTAH] path: 678
a30[CTAH] path: 679
a30[CTAH] path: 680
a30[CTAH] path: 681
a30[CTAH] path: 682
a30[CTAH] path: 683
a30[CTAH] path: 684
a30[CTAH] path: 685
a30[CTAH] path: 686
a30[CTAH] path: 687
a30[CTAH] path: 688
a30[CTAH] path: 689
a30[CTAH] path: 690
a30[CTAH] path: 691
a30[CTAH] path: 692
a30[CTAH] path: 693
a30[CTAH] path: 694
a30[CTAH] path: 695
a30[CTAH] path: 696
a30[CTAH] path: 697
a30[CTAH] path: 698
a30[CTAH] path: 699
a30[CTAH] path: 700
a30[CTAH] path: 701
a30[CTAH] path: 702
a30[CTAH] path: 703
a30[CTAH] path: 704
a30[CTAH] path: 705
a30[CTAH] path: 706
a30[CTAH] path: 707
a30[CTAH] path: 708
a30[CTAH] path: 709
a30[CTAH] path: 710
a30[CTAH] path: 711
a30[CTAH] path: 712
a30[CTAH] path: 713
a30[CTAH] path: 714
a30[CTAH] path: 715
a30[CTAH] path: 716
a30[CTAH] path: 717
a30[CTAH] path: 718
a30[CTAH] path: 719
a30[CTAH] path: 720
a30[CTAH] path: 721
a30[CTAH] path: 722
a30[CTAH] path: 723
a30[CTAH] path: 724
a30[CTAH] path: 725
a30[CTAH] path: 726
a30[CTAH] path: 727
a30[CTAH] path: 728
a30[CTAH] path: 729
a30[CTAH] path: 730
a30[CTAH] path: 731
a30[CTAH] path: 732
a30[CTAH] path: 733
a30[CTAH] path: 734
a30[CTAH] path: 735
a30[CTAH] path: 736
a30[CTAH] path: 737
a30[CTAH] path: 738
a30[CTAH] path: 739
a30[CTAH] path: 740
a30[CTAH] path: 741
a30[CTAH] path: 742
a30[CTAH] path: 743
a30[CTAH] path: 744
a30[CTAH] path: 745
a30[CTAH] path: 746
a30[CTAH] path: 747
a30[CTAH] path: 748
a30[CTAH] path: 749
a30[CTAH] path: 750
a30[CTAH] path: 751
a30[CTAH] path: 752
a30[CTAH] path: 753
a30[CTAH] path: 754
a30[CTAH] path: 755
a30[CTAH] path: 756
a30[CTAH] path: 757
a30[CTAH] path: 758
a30[CTAH] path: 759
a30[CTAH] path: 760
a30[CTAH] path: 761
a30[CTAH] path: 762
a30[CTAH] path: 763
a30[CTAH] path: 764
a30[CTAH] path: 765
a30[CTAH] path: 766
a30[CTAH] path: 767
a30[CTAH] path: 768
a30[CTAH] path: 769
a30[CTAH] path: 770
a30[CTAH] path: 771
a30[CTAH] path: 772
a30[CTAH] path: 773
a30[CTAH] path: 774
a30[CTAH] path: 775
a30[CTAH] path: 776
a30[CTAH] path: 777
a30[CTAH] path: 778
a30[CTAH] path: 779
a30[CTAH] path: 780
a30[CTAH] path: 781
a30[CTAH] path: 782
a30[CTAH] path: 783
a30[CTAH] path: 784
a30[CTAH] path: 785
a30[CTAH] path: 786
a30[CTAH] path: 787
a30[CTAH] path: 788
a30[CTAH] path: 789
a30[CTAH] path: 790
a30[CTAH] path: 791
a30[CTAH] path: 792
a30[CTAH] path: 793
a30[CTAH] path: 794
a30[CTAH] path: 795
a30[CTAH] path: 796
a30[CTAH] path: 797
a30[CTAH] path: 798
a30[CTAH] path: 799
a30[CTAH] path: 800
a30[CTAH] path: 801
a30[CTAH] path: 802
a30[CTAH] path: 803
a30[CTAH] path: 804
a30[CTAH] path: 805
a30[CTAH] path: 806
a30[CTAH] path: 807
a30[CTAH] path: 808
a30[CTAH] path: 809
a30[CTAH] path: 810
a30[CTAH] path: 811
a30[CTAH] path: 812
a30[CTAH] path: 813
a30[CTAH] path: 814
a30[CTAH] path: 815
a30[CTAH] path: 816
a30[CTAH] path: 817
a30[CTAH] path: 818
a30[CTAH] path: 819
a30[CTAH] path: 820
a30[CTAH] path: 821
a30[CTAH] path: 822
a30[CTAH] path: 823
a30[CTAH] path: 824
a30[CTAH] path: 825
a30[CTAH] path: 826
a30[CTAH] path: 827
a30[CTAH] path: 828
a30[CTAH] path: 829
a30[CTAH] path: 830
a30[CTAH] path: 831
a30[CTAH] path: 832
a30[CTAH] path: 833
a30[CTAH] path: 834
a30[CTAH] path: 835
a30[CTAH] path: 836
a30[CTAH] path: 837
a30[CTAH] path: 838
a30[CTAH] path: 839
a30[CTAH] path: 840
a30[CTAH] path: 841
a30[CTAH] path: 842
a30[CTAH] path: 843
a30[CTAH] path: 844
a30[CTAH] path: 845
a30[CTAH] path: 846
a30[CTAH] path: 847
a30[CTAH] path: 848
a30[CTAH] path: 849
a30[CTAH] path: 850
a30[CTAH] path: 851
a30[CTAH] path: 852
a30[CTAH] path: 853
a30[CTAH] path: 854
a30[CTAH] path: 855
a30[CTAH] path: 856
a30[CTAH] path: 857
a30[CTAH] path: 858
a30[CTAH] path: 859
a30[CTAH] path: 860
a30[CTAH] path: 861
a30[CTAH] path: 862
a30[CTAH] path: 863
a30[CTAH] path: 864
a30[CTAH] path: 865
a30[CTAH] path: 866
a30[CTAH] path: 867
a30[CTAH] path: 868
a30[CTAH] path: 869
a30[CTAH] path: 870
a30[CTAH] path: 871
a30[CTAH] path: 872
a30[CTAH] path: 873
a30[CTAH] path: 874
a30[CTAH] path: 875
a30[CTAH] path: 876
a30[CTAH] path: 877
a30[CTAH] path: 878
a30[CTAH] path: 879
a30[CTAH] path: 880
a30[CTAH] path: 881
a30[CTAH] path: 882
a30[CTAH] path: 883
a30[CTAH] path: 884
a30[CTAH] path: 885
a30[CTAH] path: 886
a30[CTAH] path: 887
a30[CTAH] path: 888
a30[CTAH] path: 889
a30[CTAH] path: 890
a30[CTAH] path: 891
a30[CTAH] path: 892
a30[CTAH] path: 893
a30[CTAH] path: 894
a30[CTAH] path: 895
a30[CTAH] path: 896
a30[CTAH] path: 897
a30[CTAH] path: 898
a30[CTAH] path: 899
a30[CTAH] path: 900
a30[CTAH] path: 901
a30[CTAH] path: 902
a30[CTAH] path: 903
a30[CTAH] path: 904
a30[CTAH] path: 905
a30[CTAH] path: 906
a30[CTAH] path: 907
a30[CTAH] path: 908
a30[CTAH] path: 909
a30[CTAH] path: 910
a30[CTAH] path: 911
a30[CTAH] path: 912
a30[CTAH] path: 913
a30[CTAH] path: 914
a30[CTAH] path: 915
a30[CTAH] path: 916
a30[CTAH] path: 917
a30[CTAH] path: 918
a30[CTAH] path: 919
a30[CTAH] path: 920
a30[CTAH] path: 921
a30[CTAH] path: 922
a30[CTAH] path: 923
a30[CTAH] path: 924
a30[CTAH] path: 925
a30[CTAH] path: 926
a30[CTAH] path: 927
a30[CTAH] path: 928
a30[CTAH] path: 929
a30[CTAH] path: 930
a30[CTAH] path: 931
a30[CTAH] path: 932
a30[CTAH] path: 933
a30[CTAH] path: 934
a30[CTAH] path: 935
a30[CTAH] path: 936
a30[CTAH] path: 937
a30[CTAH] path: 938
a30[CTAH] path: 939
a30[CTAH] path: 940
a30[CTAH] path: 941
a30[CTAH] path: 942
a30[CTAH] path: 943
a30[CTAH] path: 944
a30[CTAH] path: 945
a30[CTAH] path: 946
a30[CTAH] path: 947
a30[CTAH] path: 948
a30[CTAH] path: 949
a30[CTAH] path: 950
a30[CTAH] path: 951
a30[CTAH] path: 952
a30[CTAH] path: 953
a30[CTAH] path: 954
a30[CTAH] path: 955
a30[CTAH] path: 956
a30[CTAH] path: 957
a30[CTAH] path: 958
a30[CTAH] path: 959
a30[CTAH] path: 960
a30[CTAH] path: 961
a30[CTAH] path: 962
a30[CTAH] path: 963
a30[CTAH] path: 964
a30[CTAH] path: 965
a30[CTAH] path: 966
a30[CTAH] path: 967
a30[CTAH] path: 968
a30[CTAH] path: 969
a30[CTAH] path: 970
a30[CTAH] path: 971
a30[CTAH] path: 972
a30[CTAH] path: 973
a30[CTAH] path: 974
a30[CTAH] path: 975
a30[CTAH] path: 976
a30[CTAH] path: 977
a30[CTAH] path: 978
a30[CTAH] path: 979
a30[CTAH] path: 980
a30[CTAH] path: 981
a30[CTAH] path: 982
a30[CTAH] path: 983
a30[CTAH] path: 984
a30[CTAH] path: 985
a30[CTAH] path: 986
a30[CTAH] path: 987
a30[CTAH] path: 988
a30[CTAH] path: 989
a30[CTAH] path: 990
a30[CTAH] path: 991
a30[CTAH] path: 992
a30[CTAH] path: 993
a30[CTAH] path: 994
a30[CTAH] path: 995
a30[CTAH] path: 996
a30[CTAH] path: 997
a30[CTAH] path: 998
a30[CTAH] path: 999
a30[CTAH] moveStepToGoalTest havent found anything
a10[CTAH] path: 0
a10[CTAH] path: 1
a10[CTAH] path: 2
a10[CTAH] path: 3
a10[CTAH] path: 4
a10[CTAH] path: 5
a10[CTAH] path: 6
a10[CTAH] path: 7
a10[CTAH] path: 8
a10[CTAH] path: 9
a10[CTAH] path: 10
a10[CTAH] path: 11
a10[CTAH] path: 12
a10[CTAH] path: 13
a10[CTAH] path: 14
a10[CTAH] path: 15
a10[CTAH] path: 16
a10[CTAH] path: 17
a10[CTAH] path: 18
a10[CTAH] path: 19
a10[CTAH] path: 20
a10[CTAH] path: 21
a10[CTAH] path: 22
a10[CTAH] path: 23
a10[CTAH] path: 24
a10[CTAH] path: 25
a10[CTAH] path: 26
a10[CTAH] path: 27
a10[CTAH] path: 28
a10[CTAH] path: 29
a10[CTAH] path: 30
a10[CTAH] path: 31
a10[CTAH] path: 32
a10[CTAH] path: 33
a10[CTAH] path: 34
a10[CTAH] path: 35
a10[CTAH] path: 36
a10[CTAH] path: 37
a10[CTAH] path: 38
a10[CTAH] path: 39
a10[CTAH] path: 40
a10[CTAH] path: 41
a10[CTAH] path: 42
a10[CTAH] path: 43
a10[CTAH] path: 44
a10[CTAH] path: 45
a10[CTAH] path: 46
a10[CTAH] path: 47
a10[CTAH] path: 48
a10[CTAH] path: 49
a10[CTAH] path: 50
a10[CTAH] path: 51
a10[CTAH] path: 52
a10[CTAH] path: 53
a10[CTAH] path: 54
a10[CTAH] path: 55
a10[CTAH] path: 56
a10[CTAH] path: 57
a10[CTAH] path: 58
a10[CTAH] path: 59
a10[CTAH] path: 60
a10[CTAH] path: 61
a10[CTAH] path: 62
a10[CTAH] path: 63
a10[CTAH] path: 64
a10[CTAH] path: 65
a10[CTAH] path: 66
a10[CTAH] path: 67
a10[CTAH] path: 68
a10[CTAH] path: 69
a10[CTAH] path: 70
a10[CTAH] path: 71
a10[CTAH] path: 72
a10[CTAH] path: 73
a10[CTAH] path: 74
a10[CTAH] path: 75
a10[CTAH] path: 76
a10[CTAH] path: 77
a10[CTAH] path: 78
a10[CTAH] path: 79
a10[CTAH] path: 80
a10[CTAH] path: 81
a10[CTAH] path: 82
a10[CTAH] path: 83
a10[CTAH] path: 84
a10[CTAH] path: 85
a10[CTAH] path: 86
a10[CTAH] path: 87
a10[CTAH] path: 88
a10[CTAH] path: 89
a10[CTAH] path: 90
a10[CTAH] path: 91
a10[CTAH] path: 92
a10[CTAH] path: 93
a10[CTAH] path: 94
a10[CTAH] path: 95
a10[CTAH] path: 96
a10[CTAH] path: 97
a10[CTAH] path: 98
a10[CTAH] path: 99
a10[CTAH] path: 100
a10[CTAH] path: 101
a10[CTAH] path: 102
a10[CTAH] path: 103
a10[CTAH] path: 104
a10[CTAH] path: 105
a10[CTAH] path: 106
a10[CTAH] path: 107
a10[CTAH] path: 108
a10[CTAH] path: 109
a10[CTAH] path: 110
a10[CTAH] path: 111
a10[CTAH] path: 112
a10[CTAH] path: 113
a10[CTAH] path: 114
a10[CTAH] path: 115
a10[CTAH] path: 116
a10[CTAH] path: 117
a10[CTAH] path: 118
a10[CTAH] path: 119
a10[CTAH] path: 120
a10[CTAH] path: 121
a10[CTAH] path: 122
a10[CTAH] path: 123
a10[CTAH] path: 124
a10[CTAH] path: 125
a10[CTAH] path: 126
a10[CTAH] path: 127
a10[CTAH] path: 128
a10[CTAH] path: 129
a10[CTAH] path: 130
a10[CTAH] path: 131
a10[CTAH] path: 132
a10[CTAH] path: 133
a10[CTAH] path: 134
a10[CTAH] path: 135
a10[CTAH] path: 136
a10[CTAH] path: 137
a10[CTAH] path: 138
a10[CTAH] path: 139
a10[CTAH] path: 140
a10[CTAH] path: 141
a10[CTAH] path: 142
a10[CTAH] path: 143
a10[CTAH] path: 144
a10[CTAH] path: 145
a10[CTAH] path: 146
a10[CTAH] path: 147
a10[CTAH] path: 148
a10[CTAH] path: 149
a10[CTAH] path: 150
a10[CTAH] path: 151
a10[CTAH] path: 152
a10[CTAH] path: 153
a10[CTAH] path: 154
a10[CTAH] path: 155
a10[CTAH] path: 156
a10[CTAH] path: 157
a10[CTAH] path: 158
a10[CTAH] path: 159
a10[CTAH] path: 160
a10[CTAH] path: 161
a10[CTAH] path: 162
a10[CTAH] path: 163
a10[CTAH] path: 164
a10[CTAH] path: 165
a10[CTAH] path: 166
a10[CTAH] path: 167
a10[CTAH] path: 168
a10[CTAH] path: 169
a10[CTAH] path: 170
a10[CTAH] path: 171
a10[CTAH] path: 172
a10[CTAH] path: 173
a10[CTAH] path: 174
a10[CTAH] path: 175
a10[CTAH] path: 176
a10[CTAH] path: 177
a10[CTAH] path: 178
a10[CTAH] path: 179
a10[CTAH] path: 180
a10[CTAH] path: 181
a10[CTAH] path: 182
a10[CTAH] path: 183
a10[CTAH] path: 184
a10[CTAH] path: 185
a10[CTAH] path: 186
a10[CTAH] path: 187
a10[CTAH] path: 188
a10[CTAH] path: 189
a10[CTAH] path: 190
a10[CTAH] path: 191
a10[CTAH] path: 192
a10[CTAH] path: 193
a10[CTAH] path: 194
a10[CTAH] path: 195
a10[CTAH] path: 196
a10[CTAH] path: 197
a10[CTAH] path: 198
a10[CTAH] path: 199
a10[CTAH] path: 200
a10[CTAH] path: 201
a10[CTAH] path: 202
a10[CTAH] path: 203
a10[CTAH] path: 204
a10[CTAH] path: 205
a10[CTAH] path: 206
a10[CTAH] path: 207
a10[CTAH] path: 208
a10[CTAH] path: 209
a10[CTAH] path: 210
a10[CTAH] path: 211
a10[CTAH] path: 212
a10[CTAH] path: 213
a10[CTAH] path: 214
a10[CTAH] path: 215
a10[CTAH] path: 216
a10[CTAH] path: 217
a10[CTAH] path: 218
a10[CTAH] path: 219
a10[CTAH] path: 220
a10[CTAH] path: 221
a10[CTAH] path: 222
a10[CTAH] path: 223
a10[CTAH] path: 224
a10[CTAH] path: 225
a10[CTAH] path: 226
a10[CTAH] path: 227
a10[CTAH] path: 228
a10[CTAH] path: 229
a10[CTAH] path: 230
a10[CTAH] path: 231
a10[CTAH] path: 232
a10[CTAH] path: 233
a10[CTAH] path: 234
a10[CTAH] path: 235
a10[CTAH] path: 236
a10[CTAH] path: 237
a10[CTAH] path: 238
a10[CTAH] path: 239
a10[CTAH] path: 240
a10[CTAH] path: 241
a10[CTAH] path: 242
a10[CTAH] path: 243
a10[CTAH] path: 244
a10[CTAH] path: 245
a10[CTAH] path: 246
a10[CTAH] path: 247
a10[CTAH] path: 248
a10[CTAH] path: 249
a10[CTAH] path: 250
a10[CTAH] path: 251
a10[CTAH] path: 252
a10[CTAH] path: 253
a10[CTAH] path: 254
a10[CTAH] path: 255
a10[CTAH] path: 256
a10[CTAH] path: 257
a10[CTAH] path: 258
a10[CTAH] path: 259
a10[CTAH] path: 260
a10[CTAH] path: 261
a10[CTAH] path: 262
a10[CTAH] path: 263
a10[CTAH] path: 264
a10[CTAH] path: 265
a10[CTAH] path: 266
a10[CTAH] path: 267
a10[CTAH] path: 268
a10[CTAH] path: 269
a10[CTAH] path: 270
a10[CTAH] path: 271
a10[CTAH] path: 272
a10[CTAH] path: 273
a10[CTAH] path: 274
a10[CTAH] path: 275
a10[CTAH] path: 276
a10[CTAH] path: 277
a10[CTAH] path: 278
a10[CTAH] path: 279
a10[CTAH] path: 280
a10[CTAH] path: 281
a10[CTAH] path: 282
a10[CTAH] path: 283
a10[CTAH] path: 284
a10[CTAH] path: 285
a10[CTAH] path: 286
a10[CTAH] path: 287
a10[CTAH] path: 288
a10[CTAH] path: 289
a10[CTAH] path: 290
a10[CTAH] path: 291
a10[CTAH] path: 292
a10[CTAH] path: 293
a10[CTAH] path: 294
a10[CTAH] path: 295
a10[CTAH] path: 296
a10[CTAH] path: 297
a10[CTAH] path: 298
a10[CTAH] path: 299
a10[CTAH] path: 300
a10[CTAH] path: 301
a10[CTAH] path: 302
a10[CTAH] path: 303
a10[CTAH] path: 304
a10[CTAH] path: 305
a10[CTAH] path: 306
a10[CTAH] path: 307
a10[CTAH] path: 308
a10[CTAH] path: 309
a10[CTAH] path: 310
a10[CTAH] path: 311
a10[CTAH] path: 312
a10[CTAH] path: 313
a10[CTAH] path: 314
a10[CTAH] path: 315
a10[CTAH] path: 316
a10[CTAH] path: 317
a10[CTAH] path: 318
a10[CTAH] path: 319
a10[CTAH] path: 320
a10[CTAH] path: 321
a10[CTAH] path: 322
a10[CTAH] path: 323
a10[CTAH] path: 324
a10[CTAH] path: 325
a10[CTAH] path: 326
a10[CTAH] path: 327
a10[CTAH] path: 328
a10[CTAH] path: 329
a10[CTAH] path: 330
a10[CTAH] path: 331
a10[CTAH] path: 332
a10[CTAH] path: 333
a10[CTAH] path: 334
a10[CTAH] path: 335
a10[CTAH] path: 336
a10[CTAH] path: 337
a10[CTAH] path: 338
a10[CTAH] path: 339
a10[CTAH] path: 340
a10[CTAH] path: 341
a10[CTAH] path: 342
a10[CTAH] path: 343
a10[CTAH] path: 344
a10[CTAH] path: 345
a10[CTAH] path: 346
a10[CTAH] path: 347
a10[CTAH] path: 348
a10[CTAH] path: 349
a10[CTAH] path: 350
a10[CTAH] path: 351
a10[CTAH] path: 352
a10[CTAH] path: 353
a10[CTAH] path: 354
a10[CTAH] path: 355
a10[CTAH] path: 356
a10[CTAH] path: 357
a10[CTAH] path: 358
a10[CTAH] path: 359
a10[CTAH] path: 360
a10[CTAH] path: 361
a10[CTAH] path: 362
a10[CTAH] path: 363
a10[CTAH] path: 364
a10[CTAH] path: 365
a10[CTAH] path: 366
a10[CTAH] path: 367
a10[CTAH] path: 368
a10[CTAH] path: 369
a10[CTAH] path: 370
a10[CTAH] path: 371
a10[CTAH] path: 372
a10[CTAH] path: 373
a10[CTAH] path: 374
a10[CTAH] path: 375
a10[CTAH] path: 376
a10[CTAH] path: 377
a10[CTAH] path: 378
a10[CTAH] path: 379
a10[CTAH] path: 380
a10[CTAH] path: 381
a10[CTAH] path: 382
a10[CTAH] path: 383
a10[CTAH] path: 384
a10[CTAH] path: 385
a10[CTAH] path: 386
a10[CTAH] path: 387
a10[CTAH] path: 388
a10[CTAH] path: 389
a10[CTAH] path: 390
a10[CTAH] path: 391
a10[CTAH] path: 392
a10[CTAH] path: 393
a10[CTAH] path: 394
a10[CTAH] path: 395
a10[CTAH] path: 396
a10[CTAH] path: 397
a10[CTAH] path: 398
a10[CTAH] path: 399
a10[CTAH] path: 400
a10[CTAH] path: 401
a10[CTAH] path: 402
a10[CTAH] path: 403
a10[CTAH] path: 404
a10[CTAH] path: 405
a10[CTAH] path: 406
a10[CTAH] path: 407
a10[CTAH] path: 408
a10[CTAH] path: 409
a10[CTAH] path: 410
a10[CTAH] path: 411
a10[CTAH] path: 412
a10[CTAH] path: 413
a10[CTAH] path: 414
a10[CTAH] path: 415
a10[CTAH] path: 416
a10[CTAH] path: 417
a10[CTAH] path: 418
a10[CTAH] path: 419
a10[CTAH] path: 420
a10[CTAH] path: 421
a10[CTAH] path: 422
a10[CTAH] path: 423
a10[CTAH] path: 424
a10[CTAH] path: 425
a10[CTAH] path: 426
a10[CTAH] path: 427
a10[CTAH] path: 428
a10[CTAH] path: 429
a10[CTAH] path: 430
a10[CTAH] path: 431
a10[CTAH] path: 432
a10[CTAH] path: 433
a10[CTAH] path: 434
a10[CTAH] path: 435
a10[CTAH] path: 436
a10[CTAH] path: 437
a10[CTAH] path: 438
a10[CTAH] path: 439
a10[CTAH] path: 440
a10[CTAH] path: 441
a10[CTAH] path: 442
a10[CTAH] path: 443
a10[CTAH] path: 444
a10[CTAH] path: 445
a10[CTAH] path: 446
a10[CTAH] path: 447
a10[CTAH] path: 448
a10[CTAH] path: 449
a10[CTAH] path: 450
a10[CTAH] path: 451
a10[CTAH] path: 452
a10[CTAH] path: 453
a10[CTAH] path: 454
a10[CTAH] path: 455
a10[CTAH] path: 456
a10[CTAH] path: 457
a10[CTAH] path: 458
a10[CTAH] path: 459
a10[CTAH] path: 460
a10[CTAH] path: 461
a10[CTAH] path: 462
a10[CTAH] path: 463
a10[CTAH] path: 464
a10[CTAH] path: 465
a10[CTAH] path: 466
a10[CTAH] path: 467
a10[CTAH] path: 468
a10[CTAH] path: 469
a10[CTAH] path: 470
a10[CTAH] path: 471
a10[CTAH] path: 472
a10[CTAH] path: 473
a10[CTAH] path: 474
a10[CTAH] path: 475
a10[CTAH] path: 476
a10[CTAH] path: 477
a10[CTAH] path: 478
a10[CTAH] path: 479
a10[CTAH] path: 480
a10[CTAH] path: 481
a10[CTAH] path: 482
a10[CTAH] path: 483
a10[CTAH] path: 484
a10[CTAH] path: 485
a10[CTAH] path: 486
a10[CTAH] path: 487
a10[CTAH] path: 488
a10[CTAH] path: 489
a10[CTAH] path: 490
a10[CTAH] path: 491
a10[CTAH] path: 492
a10[CTAH] path: 493
a10[CTAH] path: 494
a10[CTAH] path: 495
a10[CTAH] path: 496
a10[CTAH] path: 497
a10[CTAH] path: 498
a10[CTAH] path: 499
a10[CTAH] path: 500
a10[CTAH] path: 501
a10[CTAH] path: 502
a10[CTAH] path: 503
a10[CTAH] path: 504
a10[CTAH] path: 505
a10[CTAH] path: 506
a10[CTAH] path: 507
a10[CTAH] path: 508
a10[CTAH] path: 509
a10[CTAH] path: 510
a10[CTAH] path: 511
a10[CTAH] path: 512
a10[CTAH] path: 513
a10[CTAH] path: 514
a10[CTAH] path: 515
a10[CTAH] path: 516
a10[CTAH] path: 517
a10[CTAH] path: 518
a10[CTAH] path: 519
a10[CTAH] path: 520
a10[CTAH] path: 521
a10[CTAH] path: 522
a10[CTAH] path: 523
a10[CTAH] path: 524
a10[CTAH] path: 525
a10[CTAH] path: 526
a10[CTAH] path: 527
a10[CTAH] path: 528
a10[CTAH] path: 529
a10[CTAH] path: 530
a10[CTAH] path: 531
a10[CTAH] path: 532
a10[CTAH] path: 533
a10[CTAH] path: 534
a10[CTAH] path: 535
a10[CTAH] path: 536
a10[CTAH] path: 537
a10[CTAH] path: 538
a10[CTAH] path: 539
a10[CTAH] path: 540
a10[CTAH] path: 541
a10[CTAH] path: 542
a10[CTAH] path: 543
a10[CTAH] path: 544
a10[CTAH] path: 545
a10[CTAH] path: 546
a10[CTAH] path: 547
a10[CTAH] path: 548
a10[CTAH] path: 549
a10[CTAH] path: 550
a10[CTAH] path: 551
a10[CTAH] path: 552
a10[CTAH] path: 553
a10[CTAH] path: 554
a10[CTAH] path: 555
a10[CTAH] path: 556
a10[CTAH] path: 557
a10[CTAH] path: 558
a10[CTAH] path: 559
a10[CTAH] path: 560
a10[CTAH] path: 561
a10[CTAH] path: 562
a10[CTAH] path: 563
a10[CTAH] path: 564
a10[CTAH] path: 565
a10[CTAH] path: 566
a10[CTAH] path: 567
a10[CTAH] path: 568
a10[CTAH] path: 569
a10[CTAH] path: 570
a10[CTAH] path: 571
a10[CTAH] path: 572
a10[CTAH] path: 573
a10[CTAH] path: 574
a10[CTAH] path: 575
a10[CTAH] path: 576
a10[CTAH] path: 577
a10[CTAH] path: 578
a10[CTAH] path: 579
a10[CTAH] path: 580
a10[CTAH] path: 581
a10[CTAH] path: 582
a10[CTAH] path: 583
a10[CTAH] path: 584
a10[CTAH] path: 585
a10[CTAH] path: 586
a10[CTAH] path: 587
a10[CTAH] path: 588
a10[CTAH] path: 589
a10[CTAH] path: 590
a10[CTAH] path: 591
a10[CTAH] path: 592
a10[CTAH] path: 593
a10[CTAH] path: 594
a10[CTAH] path: 595
a10[CTAH] path: 596
a10[CTAH] path: 597
a10[CTAH] path: 598
a10[CTAH] path: 599
a10[CTAH] path: 600
a10[CTAH] path: 601
a10[CTAH] path: 602
a10[CTAH] path: 603
a10[CTAH] path: 604
a10[CTAH] path: 605
a10[CTAH] path: 606
a10[CTAH] path: 607
a10[CTAH] path: 608
a10[CTAH] path: 609
a10[CTAH] path: 610
a10[CTAH] path: 611
a10[CTAH] path: 612
a10[CTAH] path: 613
a10[CTAH] path: 614
a10[CTAH] path: 615
a10[CTAH] path: 616
a10[CTAH] path: 617
a10[CTAH] path: 618
a10[CTAH] path: 619
a10[CTAH] path: 620
a10[CTAH] path: 621
a10[CTAH] path: 622
a10[CTAH] path: 623
a10[CTAH] path: 624
a10[CTAH] path: 625
a10[CTAH] path: 626
a10[CTAH] path: 627
a10[CTAH] path: 628
a10[CTAH] path: 629
a10[CTAH] path: 630
a10[CTAH] path: 631
a10[CTAH] path: 632
a10[CTAH] path: 633
a10[CTAH] path: 634
a10[CTAH] path: 635
a10[CTAH] path: 636
a10[CTAH] path: 637
a10[CTAH] path: 638
a10[CTAH] path: 639
a10[CTAH] path: 640
a10[CTAH] path: 641
a10[CTAH] path: 642
a10[CTAH] path: 643
a10[CTAH] path: 644
a10[CTAH] path: 645
a10[CTAH] path: 646
a10[CTAH] path: 647
a10[CTAH] path: 648
a10[CTAH] path: 649
a10[CTAH] path: 650
a10[CTAH] path: 651
a10[CTAH] path: 652
a10[CTAH] path: 653
a10[CTAH] path: 654
a10[CTAH] path: 655
a10[CTAH] path: 656
a10[CTAH] path: 657
a10[CTAH] path: 658
a10[CTAH] path: 659
a10[CTAH] path: 660
a10[CTAH] path: 661
a10[CTAH] path: 662
a10[CTAH] path: 663
a10[CTAH] path: 664
a10[CTAH] path: 665
a10[CTAH] path: 666
a10[CTAH] path: 667
a10[CTAH] path: 668
a10[CTAH] path: 669
a10[CTAH] path: 670
a10[CTAH] path: 671
a10[CTAH] path: 672
a10[CTAH] path: 673
a10[CTAH] path: 674
a10[CTAH] path: 675
a10[CTAH] path: 676
a10[CTAH] path: 677
a10[CTAH] path: 678
a10[CTAH] path: 679
a10[CTAH] path: 680
a10[CTAH] path: 681
a10[CTAH] path: 682
a10[CTAH] path: 683
a10[CTAH] path: 684
a10[CTAH] path: 685
a10[CTAH] path: 686
a10[CTAH] path: 687
a10[CTAH] path: 688
a10[CTAH] path: 689
a10[CTAH] path: 690
a10[CTAH] path: 691
a10[CTAH] path: 692
a10[CTAH] path: 693
a10[CTAH] path: 694
a10[CTAH] path: 695
a10[CTAH] path: 696
a10[CTAH] path: 697
a10[CTAH] path: 698
a10[CTAH] path: 699
a10[CTAH] path: 700
a10[CTAH] path: 701
a10[CTAH] path: 702
a10[CTAH] path: 703
a10[CTAH] path: 704
a10[CTAH] path: 705
a10[CTAH] path: 706
a10[CTAH] path: 707
a10[CTAH] path: 708
a10[CTAH] path: 709
a10[CTAH] path: 710
a10[CTAH] path: 711
a10[CTAH] path: 712
a10[CTAH] path: 713
a10[CTAH] path: 714
a10[CTAH] path: 715
a10[CTAH] path: 716
a10[CTAH] path: 717
a10[CTAH] path: 718
a10[CTAH] path: 719
a10[CTAH] path: 720
a10[CTAH] path: 721
a10[CTAH] path: 722
a10[CTAH] path: 723
a10[CTAH] path: 724
a10[CTAH] path: 725
a10[CTAH] path: 726
a10[CTAH] path: 727
a10[CTAH] path: 728
a10[CTAH] path: 729
a10[CTAH] path: 730
a10[CTAH] path: 731
a10[CTAH] path: 732
a10[CTAH] path: 733
a10[CTAH] path: 734
a10[CTAH] path: 735
a10[CTAH] path: 736
a10[CTAH] path: 737
a10[CTAH] path: 738
a10[CTAH] path: 739
a10[CTAH] path: 740
a10[CTAH] path: 741
a10[CTAH] path: 742
a10[CTAH] path: 743
a10[CTAH] path: 744
a10[CTAH] path: 745
a10[CTAH] path: 746
a10[CTAH] path: 747
a10[CTAH] path: 748
a10[CTAH] path: 749
a10[CTAH] path: 750
a10[CTAH] path: 751
a10[CTAH] path: 752
a10[CTAH] path: 753
a10[CTAH] path: 754
a10[CTAH] path: 755
a10[CTAH] path: 756
a10[CTAH] path: 757
a10[CTAH] path: 758
a10[CTAH] path: 759
a10[CTAH] path: 760
a10[CTAH] path: 761
a10[CTAH] path: 762
a10[CTAH] path: 763
a10[CTAH] path: 764
a10[CTAH] path: 765
a10[CTAH] path: 766
a10[CTAH] path: 767
a10[CTAH] path: 768
a10[CTAH] path: 769
a10[CTAH] path: 770
a10[CTAH] path: 771
a10[CTAH] path: 772
a10[CTAH] path: 773
a10[CTAH] path: 774
a10[CTAH] path: 775
a10[CTAH] path: 776
a10[CTAH] path: 777
a10[CTAH] path: 778
a10[CTAH] path: 779
a10[CTAH] path: 780
a10[CTAH] path: 781
a10[CTAH] path: 782
a10[CTAH] path: 783
a10[CTAH] path: 784
a10[CTAH] path: 785
a10[CTAH] path: 786
a10[CTAH] path: 787
a10[CTAH] path: 788
a10[CTAH] path: 789
a10[CTAH] path: 790
a10[CTAH] path: 791
a10[CTAH] path: 792
a10[CTAH] path: 793
a10[CTAH] path: 794
a10[CTAH] path: 795
a10[CTAH] path: 796
a10[CTAH] path: 797
a10[CTAH] path: 798
a10[CTAH] path: 799
a10[CTAH] path: 800
a10[CTAH] path: 801
a10[CTAH] path: 802
a10[CTAH] path: 803
a10[CTAH] path: 804
a10[CTAH] path: 805
a10[CTAH] path: 806
a10[CTAH] path: 807
a10[CTAH] path: 808
a10[CTAH] path: 809
a10[CTAH] path: 810
a10[CTAH] path: 811
a10[CTAH] path: 812
a10[CTAH] path: 813
a10[CTAH] path: 814
a10[CTAH] path: 815
a10[CTAH] path: 816
a10[CTAH] path: 817
a10[CTAH] path: 818
a10[CTAH] path: 819
a10[CTAH] path: 820
a10[CTAH] path: 821
a10[CTAH] path: 822
a10[CTAH] path: 823
a10[CTAH] path: 824
a10[CTAH] path: 825
a10[CTAH] path: 826
a10[CTAH] path: 827
a10[CTAH] path: 828
a10[CTAH] path: 829
a10[CTAH] path: 830
a10[CTAH] path: 831
a10[CTAH] path: 832
a10[CTAH] path: 833
a10[CTAH] path: 834
a10[CTAH] path: 835
a10[CTAH] path: 836
a10[CTAH] path: 837
a10[CTAH] path: 838
a10[CTAH] path: 839
a10[CTAH] path: 840
a10[CTAH] path: 841
a10[CTAH] path: 842
a10[CTAH] path: 843
a10[CTAH] path: 844
a10[CTAH] path: 845
a10[CTAH] path: 846
a10[CTAH] path: 847
a10[CTAH] path: 848
a10[CTAH] path: 849
a10[CTAH] path: 850
a10[CTAH] path: 851
a10[CTAH] path: 852
a10[CTAH] path: 853
a10[CTAH] path: 854
a10[CTAH] path: 855
a10[CTAH] path: 856
a10[CTAH] path: 857
a10[CTAH] path: 858
a10[CTAH] path: 859
a10[CTAH] path: 860
a10[CTAH] path: 861
a10[CTAH] path: 862
a10[CTAH] path: 863
a10[CTAH] path: 864
a10[CTAH] path: 865
a10[CTAH] path: 866
a10[CTAH] path: 867
a10[CTAH] path: 868
a10[CTAH] path: 869
a10[CTAH] path: 870
a10[CTAH] path: 871
a10[CTAH] path: 872
a10[CTAH] path: 873
a10[CTAH] path: 874
a10[CTAH] path: 875
a10[CTAH] path: 876
a10[CTAH] path: 877
a10[CTAH] path: 878
a10[CTAH] path: 879
a10[CTAH] path: 880
a10[CTAH] path: 881
a10[CTAH] path: 882
a10[CTAH] path: 883
a10[CTAH] path: 884
a10[CTAH] path: 885
a10[CTAH] path: 886
a10[CTAH] path: 887
a10[CTAH] path: 888
a10[CTAH] path: 889
a10[CTAH] path: 890
a10[CTAH] path: 891
a10[CTAH] path: 892
a10[CTAH] path: 893
a10[CTAH] path: 894
a10[CTAH] path: 895
a10[CTAH] path: 896
a10[CTAH] path: 897
a10[CTAH] path: 898
a10[CTAH] path: 899
a10[CTAH] path: 900
a10[CTAH] path: 901
a10[CTAH] path: 902
a10[CTAH] path: 903
a10[CTAH] path: 904
a10[CTAH] path: 905
a10[CTAH] path: 906
a10[CTAH] path: 907
a10[CTAH] path: 908
a10[CTAH] path: 909
a10[CTAH] path: 910
a10[CTAH] path: 911
a10[CTAH] path: 912
a10[CTAH] path: 913
a10[CTAH] path: 914
a10[CTAH] path: 915
a10[CTAH] path: 916
a10[CTAH] path: 917
a10[CTAH] path: 918
a10[CTAH] path: 919
a10[CTAH] path: 920
a10[CTAH] path: 921
a10[CTAH] path: 922
a10[CTAH] path: 923
a10[CTAH] path: 924
a10[CTAH] path: 925
a10[CTAH] path: 926
a10[CTAH] path: 927
a10[CTAH] path: 928
a10[CTAH] path: 929
a10[CTAH] path: 930
a10[CTAH] path: 931
a10[CTAH] path: 932
a10[CTAH] path: 933
a10[CTAH] path: 934
a10[CTAH] path: 935
a10[CTAH] path: 936
a10[CTAH] path: 937
a10[CTAH] path: 938
a10[CTAH] path: 939
a10[CTAH] path: 940
a10[CTAH] path: 941
a10[CTAH] path: 942
a10[CTAH] path: 943
a10[CTAH] path: 944
a10[CTAH] path: 945
a10[CTAH] path: 946
a10[CTAH] path: 947
a10[CTAH] path: 948
a10[CTAH] path: 949
a10[CTAH] path: 950
a10[CTAH] path: 951
a10[CTAH] path: 952
a10[CTAH] path: 953
a10[CTAH] path: 954
a10[CTAH] path: 955
a10[CTAH] path: 956
a10[CTAH] path: 957
a10[CTAH] path: 958
a10[CTAH] path: 959
a10[CTAH] path: 960
a10[CTAH] path: 961
a10[CTAH] path: 962
a10[CTAH] path: 963
a10[CTAH] path: 964
a10[CTAH] path: 965
a10[CTAH] path: 966
a10[CTAH] path: 967
a10[CTAH] path: 968
a10[CTAH] path: 969
a10[CTAH] path: 970
a10[CTAH] path: 971
a10[CTAH] path: 972
a10[CTAH] path: 973
a10[CTAH] path: 974
a10[CTAH] path: 975
a10[CTAH] path: 976
a10[CTAH] path: 977
a10[CTAH] path: 978
a10[CTAH] path: 979
a10[CTAH] path: 980
a10[CTAH] path: 981
a10[CTAH] path: 982
a10[CTAH] path: 983
a10[CTAH] path: 984
a10[CTAH] path: 985
a10[CTAH] path: 986
a10[CTAH] path: 987
a10[CTAH] path: 988
a10[CTAH] path: 989
a10[CTAH] path: 990
a10[CTAH] path: 991
a10[CTAH] path: 992
a10[CTAH] path: 993
a10[CTAH] path: 994
a10[CTAH] path: 995
a10[CTAH] path: 996
a10[CTAH] path: 997
a10[CTAH] path: 998
a10[CTAH] path: 999
a10[CTAH] moveStepToGoalTest havent found anything
Event processed UpdateClock(8)
Event processed UpdateClock(9)
Event processed UpdateClock(9)
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(8)
},
{	UpdateClock(9)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(8), UpdateClock(9)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(8)
},
{	UpdateClock(9)
}


Event processed UpdateClock(9)
[Planbase]:{	GetScoreAfterExchange(971, yes);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(971, accept)
		}
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(9)
}


[new scheduled]:[GetScoreAfterExchange(971, yes); if G(at(A, B, C)) then skip else makeResponse(971, accept), if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(9)]
[After]:{	GetScoreAfterExchange(971, yes);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(971, accept)
		}
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(9)
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(9)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(9)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(9)
}


[Planbase]:{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(971, accept)
		}
},
{	if	B(scoreAfterExchange(971, Score))
	then	{	respond(971, 700)
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if G(at(A, B, C)) then skip else makeResponse(971, accept), if B(scoreAfterExchange(971, Score)) then respond(971, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(971, accept)
		}
},
{	if	B(scoreAfterExchange(971, Score))
	then	{	respond(971, 700)
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A1,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A1,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	skip
},
{	respond(971, 700)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[skip, respond(971, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	skip
},
{	respond(971, 700)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	B([A1,B]=[4,3]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[B([A1,B]=[4,3]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	B([A1,B]=[4,3]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	B(ANSWER=accept);
	if	B(not yes=yes)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2<700)
					then	{	B(ANSWER=reject)
						}
				}
		};
	makeResponse(971, ANSWER)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[B(ANSWER=accept); if B(not yes=yes) then if B(prohibition(rejectRequests(V2))) then if B(V2<700) then B(ANSWER=reject); makeResponse(971, ANSWER), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	B(ANSWER=accept);
	if	B(not yes=yes)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2<700)
					then	{	B(ANSWER=reject)
						}
				}
		};
	makeResponse(971, ANSWER)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 4, 3, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, 4, 3, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 4, 3, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(not yes=yes)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2<700)
					then	{	B(accept=reject)
						}
				}
		};
	makeResponse(971, accept)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(not yes=yes) then if B(prohibition(rejectRequests(V2))) then if B(V2<700) then B(accept=reject); makeResponse(971, accept), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(not yes=yes)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2<700)
					then	{	B(accept=reject)
						}
				}
		};
	makeResponse(971, accept)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(9>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(9>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(9>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(700>100) then @ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	makeResponse(971, accept)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[makeResponse(971, accept), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	makeResponse(971, accept)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	sendResponse(accept, 971)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[sendResponse(accept, 971), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	sendResponse(accept, 971)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a30[CTAH] going goal: 4,3 color: blue
[Planbase]:{	@ctenv(sendResponse(971, accept),L1,0);
	Sent(accept, 971)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(sendResponse(971, accept),L1,0); Sent(accept, 971), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(sendResponse(971, accept),L1,0);
	Sent(accept, 971)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(9>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(9>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(9>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a10[CTAH] sent response: Discourse Message...
From PerGameId: 0.
To PerGameId: 3.

Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 3
[MSG] i'm: 3
AGENT : got response to offer
org notification: Response [id=971, response=rejected, clock=9, time=2015-05-27 16:47:43.621]
Event processed @ctenv(functionToList(message(response, 971, reject)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	@ctenv(functionToList(message(response, 971, reject)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), @ctenv(functionToList(message(response, 971, reject)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	@ctenv(functionToList(message(response, 971, reject)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@5cd13a13
[CTAH] The created APLList : [response,971,reject]
[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A1,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A1,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([response,971,reject])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,971,reject])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,971,reject])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([response,971,reject])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([response,971,reject])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([response,971,reject])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([response,971,reject])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,971,reject])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,971,reject])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	B([A1,B]=[3,2]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[B([A1,B]=[3,2]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	B([A1,B]=[3,2]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(9>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(reject, 971)
		}
}


[new scheduled]:[if B(9>7+5) then {NoNextStep(6, 2, 971); ReceivedMessage(noresponse, 971)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B(response=response) then ReceivedMessage(reject, 971)]
[After]:{	if	B(9>7+5)
	then	{	NoNextStep(6, 2, 971);
			ReceivedMessage(noresponse, 971)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(reject, 971)
		}
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(reject, 971)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), ReceivedMessage(reject, 971)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(reject, 971)
}


[Planbase]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(700>100) then @ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoal(neco, 6, 2),L2,0);
	if	B(L2=[actionresult([6,2])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 2, Clock)
		};
	NoNextStep(6, 2, 971);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoal(neco, 6, 2),L2,0); if B(L2=[actionresult([6,2])]) then {B(clock(Clock)); UpdatePosition(6, 2, Clock)}; NoNextStep(6, 2, 971); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoal(neco, 6, 2),L2,0);
	if	B(L2=[actionresult([6,2])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 2, Clock)
		};
	NoNextStep(6, 2, 971);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a10[CTAH] going goal: 3,2 color: blue
a40[CTAH] moveStepToGoal returns: no
org notification: Position [subject=a40, id=null, cell=Cell [x=6, y=2], time=2015-05-27 16:47:44.412, clock=9]
object notification: Position [subject=a40, id=null, cell=Cell [x=6, y=2], time=2015-05-27 16:47:44.412, clock=9]
Event processed UpdatePosition(6, 2, 9)
[Planbase]:{	NoNextStep(6, 2, 971);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdatePosition(6, 2, 9)
}


[new scheduled]:[NoNextStep(6, 2, 971); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdatePosition(6, 2, 9)]
[After]:{	NoNextStep(6, 2, 971);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdatePosition(6, 2, 9)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A1,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A1,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	B([A1,B]=[3,4]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[B([A1,B]=[3,4]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	B([A1,B]=[3,4]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 4, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 4, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, 3, 4, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 4, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 4, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 4, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(700>100) then @ctenv(moveStepToGoalTest(blue, no, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 4, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(blue, no, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(blue, no, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(blue, no, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a40[CTAH] going goal: 3,4 color: blue
object notification: Time [clock=10, time=2015-05-27 16:47:49.337]
org notification: Time [clock=10, time=2015-05-27 16:47:49.337]
object notification: Time [clock=10, time=2015-05-27 16:47:49.337]
object notification: Time [clock=10, time=2015-05-27 16:47:49.337]
setPhases in ClientGameStatus, the current phase is Movement Phase
setPhases in ClientGameStatus, the current phase is Movement Phase
setPhases in ClientGameStatus, the current phase is Movement Phase
a30[CTAH] paths: 1000
Need to wait 4 more seconds
a40[CTAH] paths: 1000
Need to wait 3 more seconds
a10[CTAH] paths: 1000
Need to wait 4 more seconds
a30[CTAH] path: 0
a30[CTAH] path: 1
a30[CTAH] path: 2
a30[CTAH] path: 3
a30[CTAH] path: 4
a30[CTAH] path: 5
a30[CTAH] path: 6
a30[CTAH] path: 7
a30[CTAH] path: 8
a30[CTAH] path: 9
a30[CTAH] path: 10
a30[CTAH] path: 11
a30[CTAH] path: 12
a30[CTAH] path: 13
a30[CTAH] path: 14
a30[CTAH] path: 15
a30[CTAH] path: 16
a30[CTAH] path: 17
a30[CTAH] path: 18
a30[CTAH] path: 19
a30[CTAH] path: 20
a30[CTAH] path: 21
a30[CTAH] path: 22
a30[CTAH] path: 23
a30[CTAH] path: 24
a30[CTAH] path: 25
a30[CTAH] path: 26
a30[CTAH] path: 27
a30[CTAH] path: 28
a30[CTAH] path: 29
a30[CTAH] path: 30
a30[CTAH] path: 31
a30[CTAH] path: 32
a30[CTAH] path: 33
a30[CTAH] path: 34
a30[CTAH] path: 35
a30[CTAH] path: 36
a30[CTAH] path: 37
a30[CTAH] path: 38
a30[CTAH] path: 39
a30[CTAH] path: 40
a30[CTAH] path: 41
a30[CTAH] path: 42
a30[CTAH] path: 43
a30[CTAH] path: 44
a30[CTAH] path: 45
a30[CTAH] path: 46
a30[CTAH] path: 47
a30[CTAH] path: 48
a30[CTAH] path: 49
a30[CTAH] path: 50
a30[CTAH] path: 51
a30[CTAH] path: 52
a30[CTAH] path: 53
a30[CTAH] path: 54
a30[CTAH] path: 55
a30[CTAH] path: 56
a30[CTAH] path: 57
a30[CTAH] path: 58
a30[CTAH] path: 59
a30[CTAH] path: 60
a30[CTAH] path: 61
a30[CTAH] path: 62
a30[CTAH] path: 63
a30[CTAH] path: 64
a30[CTAH] path: 65
a30[CTAH] path: 66
a30[CTAH] path: 67
a30[CTAH] path: 68
a30[CTAH] path: 69
a30[CTAH] path: 70
a30[CTAH] path: 71
a30[CTAH] path: 72
a30[CTAH] path: 73
a30[CTAH] path: 74
a30[CTAH] path: 75
a30[CTAH] path: 76
a30[CTAH] path: 77
a30[CTAH] path: 78
a30[CTAH] path: 79
a30[CTAH] path: 80
a30[CTAH] path: 81
a30[CTAH] path: 82
a30[CTAH] path: 83
a30[CTAH] path: 84
a30[CTAH] path: 85
a30[CTAH] path: 86
a30[CTAH] path: 87
a30[CTAH] path: 88
a30[CTAH] path: 89
a30[CTAH] path: 90
a30[CTAH] path: 91
a30[CTAH] path: 92
a30[CTAH] path: 93
a30[CTAH] path: 94
a30[CTAH] path: 95
a30[CTAH] path: 96
a30[CTAH] path: 97
a30[CTAH] path: 98
a30[CTAH] path: 99
a30[CTAH] path: 100
a30[CTAH] path: 101
a30[CTAH] path: 102
a30[CTAH] path: 103
a30[CTAH] path: 104
a30[CTAH] path: 105
a30[CTAH] path: 106
a30[CTAH] path: 107
a30[CTAH] path: 108
a30[CTAH] path: 109
a30[CTAH] path: 110
a30[CTAH] path: 111
a30[CTAH] path: 112
a30[CTAH] path: 113
a30[CTAH] path: 114
a30[CTAH] path: 115
a30[CTAH] path: 116
a30[CTAH] path: 117
a30[CTAH] path: 118
a30[CTAH] path: 119
a30[CTAH] path: 120
a30[CTAH] path: 121
a30[CTAH] path: 122
a30[CTAH] path: 123
a30[CTAH] path: 124
a30[CTAH] path: 125
a30[CTAH] path: 126
a30[CTAH] path: 127
a30[CTAH] path: 128
a30[CTAH] path: 129
a30[CTAH] path: 130
a30[CTAH] path: 131
a30[CTAH] path: 132
a30[CTAH] path: 133
a30[CTAH] path: 134
a30[CTAH] path: 135
a30[CTAH] path: 136
a30[CTAH] path: 137
a30[CTAH] path: 138
a30[CTAH] path: 139
a30[CTAH] path: 140
a30[CTAH] path: 141
a30[CTAH] path: 142
a30[CTAH] path: 143
a30[CTAH] path: 144
a30[CTAH] path: 145
a30[CTAH] path: 146
a30[CTAH] path: 147
a30[CTAH] path: 148
a30[CTAH] path: 149
a30[CTAH] path: 150
a30[CTAH] path: 151
a30[CTAH] path: 152
a30[CTAH] path: 153
a30[CTAH] path: 154
a30[CTAH] path: 155
a30[CTAH] path: 156
a30[CTAH] path: 157
a30[CTAH] path: 158
a30[CTAH] path: 159
a30[CTAH] path: 160
a30[CTAH] path: 161
a30[CTAH] path: 162
a30[CTAH] path: 163
a30[CTAH] path: 164
a30[CTAH] path: 165
a30[CTAH] path: 166
a30[CTAH] path: 167
a30[CTAH] path: 168
a30[CTAH] path: 169
a30[CTAH] path: 170
a30[CTAH] path: 171
a30[CTAH] path: 172
a30[CTAH] path: 173
a30[CTAH] path: 174
a30[CTAH] path: 175
a30[CTAH] path: 176
a30[CTAH] path: 177
a30[CTAH] path: 178
a30[CTAH] path: 179
a30[CTAH] path: 180
a30[CTAH] path: 181
a30[CTAH] path: 182
a30[CTAH] path: 183
a30[CTAH] path: 184
a30[CTAH] path: 185
a30[CTAH] path: 186
a30[CTAH] path: 187
a30[CTAH] path: 188
a30[CTAH] path: 189
a30[CTAH] path: 190
a30[CTAH] path: 191
a30[CTAH] path: 192
a30[CTAH] path: 193
a30[CTAH] path: 194
a30[CTAH] path: 195
a30[CTAH] path: 196
a30[CTAH] path: 197
a30[CTAH] path: 198
a30[CTAH] path: 199
a30[CTAH] path: 200
a30[CTAH] path: 201
a30[CTAH] path: 202
a30[CTAH] path: 203
a30[CTAH] path: 204
a30[CTAH] path: 205
a30[CTAH] path: 206
a30[CTAH] path: 207
a30[CTAH] path: 208
a30[CTAH] path: 209
a30[CTAH] path: 210
a30[CTAH] path: 211
a30[CTAH] path: 212
a30[CTAH] path: 213
a30[CTAH] path: 214
a30[CTAH] path: 215
a30[CTAH] path: 216
a30[CTAH] path: 217
a30[CTAH] path: 218
a30[CTAH] path: 219
a30[CTAH] path: 220
a30[CTAH] path: 221
a30[CTAH] path: 222
a30[CTAH] path: 223
a30[CTAH] path: 224
a30[CTAH] path: 225
a30[CTAH] path: 226
a30[CTAH] path: 227
a30[CTAH] path: 228
a30[CTAH] path: 229
a30[CTAH] path: 230
a30[CTAH] path: 231
a30[CTAH] path: 232
a30[CTAH] path: 233
a30[CTAH] path: 234
a30[CTAH] path: 235
a30[CTAH] path: 236
a30[CTAH] path: 237
a30[CTAH] path: 238
a30[CTAH] path: 239
a30[CTAH] path: 240
a30[CTAH] path: 241
a30[CTAH] path: 242
a30[CTAH] path: 243
a30[CTAH] path: 244
a30[CTAH] path: 245
a30[CTAH] path: 246
a30[CTAH] path: 247
a30[CTAH] path: 248
a30[CTAH] path: 249
a30[CTAH] path: 250
a30[CTAH] path: 251
a30[CTAH] path: 252
a30[CTAH] path: 253
a30[CTAH] path: 254
a30[CTAH] path: 255
a30[CTAH] path: 256
a30[CTAH] path: 257
a30[CTAH] path: 258
a30[CTAH] path: 259
a30[CTAH] path: 260
a30[CTAH] path: 261
a30[CTAH] path: 262
a30[CTAH] path: 263
a30[CTAH] path: 264
a30[CTAH] path: 265
a30[CTAH] path: 266
a30[CTAH] path: 267
a30[CTAH] path: 268
a30[CTAH] path: 269
a30[CTAH] path: 270
a30[CTAH] path: 271
a30[CTAH] path: 272
a30[CTAH] path: 273
a30[CTAH] path: 274
a30[CTAH] path: 275
a30[CTAH] path: 276
a30[CTAH] path: 277
a30[CTAH] path: 278
a30[CTAH] path: 279
a30[CTAH] path: 280
a30[CTAH] path: 281
a30[CTAH] path: 282
a30[CTAH] path: 283
a30[CTAH] path: 284
a30[CTAH] path: 285
a30[CTAH] path: 286
a30[CTAH] path: 287
a30[CTAH] path: 288
a30[CTAH] path: 289
a30[CTAH] path: 290
a30[CTAH] path: 291
a30[CTAH] path: 292
a30[CTAH] path: 293
a30[CTAH] path: 294
a30[CTAH] path: 295
a30[CTAH] path: 296
a30[CTAH] path: 297
a30[CTAH] path: 298
a30[CTAH] path: 299
a30[CTAH] path: 300
a30[CTAH] path: 301
a30[CTAH] path: 302
a30[CTAH] path: 303
a30[CTAH] path: 304
a30[CTAH] path: 305
a30[CTAH] path: 306
a30[CTAH] path: 307
a30[CTAH] path: 308
a30[CTAH] path: 309
a30[CTAH] path: 310
a30[CTAH] path: 311
a30[CTAH] path: 312
a30[CTAH] path: 313
a30[CTAH] path: 314
a30[CTAH] path: 315
a30[CTAH] path: 316
a30[CTAH] path: 317
a30[CTAH] path: 318
a30[CTAH] path: 319
a30[CTAH] path: 320
a30[CTAH] path: 321
a30[CTAH] path: 322
a30[CTAH] path: 323
a30[CTAH] path: 324
a30[CTAH] path: 325
a30[CTAH] path: 326
a30[CTAH] path: 327
a30[CTAH] path: 328
a30[CTAH] path: 329
a30[CTAH] path: 330
a30[CTAH] path: 331
a30[CTAH] path: 332
a30[CTAH] path: 333
a30[CTAH] path: 334
a30[CTAH] path: 335
a30[CTAH] path: 336
a30[CTAH] path: 337
a30[CTAH] path: 338
a30[CTAH] path: 339
a30[CTAH] path: 340
a30[CTAH] path: 341
a30[CTAH] path: 342
a30[CTAH] path: 343
a30[CTAH] path: 344
a30[CTAH] path: 345
a30[CTAH] path: 346
a30[CTAH] path: 347
a30[CTAH] path: 348
a30[CTAH] path: 349
a30[CTAH] path: 350
a30[CTAH] path: 351
a30[CTAH] path: 352
a30[CTAH] path: 353
a30[CTAH] path: 354
a30[CTAH] path: 355
a30[CTAH] path: 356
a30[CTAH] path: 357
a30[CTAH] path: 358
a30[CTAH] path: 359
a30[CTAH] path: 360
a30[CTAH] path: 361
a30[CTAH] path: 362
a30[CTAH] path: 363
a30[CTAH] path: 364
a30[CTAH] path: 365
a30[CTAH] path: 366
a30[CTAH] path: 367
a30[CTAH] path: 368
a30[CTAH] path: 369
a30[CTAH] path: 370
a30[CTAH] path: 371
a30[CTAH] path: 372
a30[CTAH] path: 373
a30[CTAH] path: 374
a30[CTAH] path: 375
a30[CTAH] path: 376
a30[CTAH] path: 377
a30[CTAH] path: 378
a30[CTAH] path: 379
a30[CTAH] path: 380
a30[CTAH] path: 381
a30[CTAH] path: 382
a30[CTAH] path: 383
a30[CTAH] path: 384
a30[CTAH] path: 385
a30[CTAH] path: 386
a30[CTAH] path: 387
a30[CTAH] path: 388
a30[CTAH] path: 389
a30[CTAH] path: 390
a30[CTAH] path: 391
a30[CTAH] path: 392
a30[CTAH] path: 393
a30[CTAH] path: 394
a30[CTAH] path: 395
a30[CTAH] path: 396
a30[CTAH] path: 397
a30[CTAH] path: 398
a30[CTAH] path: 399
a30[CTAH] path: 400
a30[CTAH] path: 401
a30[CTAH] path: 402
a30[CTAH] path: 403
a30[CTAH] path: 404
a30[CTAH] path: 405
a30[CTAH] path: 406
a30[CTAH] path: 407
a30[CTAH] path: 408
a30[CTAH] path: 409
a30[CTAH] path: 410
a30[CTAH] path: 411
a30[CTAH] path: 412
a30[CTAH] path: 413
a30[CTAH] path: 414
a30[CTAH] path: 415
a30[CTAH] path: 416
a30[CTAH] path: 417
a30[CTAH] path: 418
a30[CTAH] path: 419
a30[CTAH] path: 420
a30[CTAH] path: 421
a30[CTAH] path: 422
a30[CTAH] path: 423
a30[CTAH] path: 424
a30[CTAH] path: 425
a30[CTAH] path: 426
a30[CTAH] path: 427
a30[CTAH] path: 428
a30[CTAH] path: 429
a30[CTAH] path: 430
a30[CTAH] path: 431
a30[CTAH] path: 432
a30[CTAH] path: 433
a30[CTAH] path: 434
a30[CTAH] path: 435
a30[CTAH] path: 436
a30[CTAH] path: 437
a30[CTAH] path: 438
a30[CTAH] path: 439
a30[CTAH] path: 440
a30[CTAH] path: 441
a30[CTAH] path: 442
a30[CTAH] path: 443
a30[CTAH] path: 444
a30[CTAH] path: 445
a30[CTAH] path: 446
a30[CTAH] path: 447
a30[CTAH] path: 448
a30[CTAH] path: 449
a30[CTAH] path: 450
a30[CTAH] path: 451
a30[CTAH] path: 452
a30[CTAH] path: 453
a30[CTAH] path: 454
a30[CTAH] path: 455
a30[CTAH] path: 456
a30[CTAH] path: 457
a30[CTAH] path: 458
a30[CTAH] path: 459
a30[CTAH] path: 460
a30[CTAH] path: 461
a30[CTAH] path: 462
a30[CTAH] path: 463
a30[CTAH] path: 464
a30[CTAH] path: 465
a30[CTAH] path: 466
a30[CTAH] path: 467
a30[CTAH] path: 468
a30[CTAH] path: 469
a30[CTAH] path: 470
a30[CTAH] path: 471
a30[CTAH] path: 472
a30[CTAH] path: 473
a30[CTAH] path: 474
a30[CTAH] path: 475
a30[CTAH] path: 476
a30[CTAH] path: 477
a30[CTAH] path: 478
a30[CTAH] path: 479
a30[CTAH] path: 480
a30[CTAH] path: 481
a30[CTAH] path: 482
a30[CTAH] path: 483
a30[CTAH] path: 484
a30[CTAH] path: 485
a30[CTAH] path: 486
a30[CTAH] path: 487
a30[CTAH] path: 488
a30[CTAH] path: 489
a30[CTAH] path: 490
a30[CTAH] path: 491
a30[CTAH] path: 492
a30[CTAH] path: 493
a30[CTAH] path: 494
a30[CTAH] path: 495
a30[CTAH] path: 496
a30[CTAH] path: 497
a30[CTAH] path: 498
a30[CTAH] path: 499
a30[CTAH] path: 500
a30[CTAH] path: 501
a30[CTAH] path: 502
a30[CTAH] path: 503
a30[CTAH] path: 504
a30[CTAH] path: 505
a30[CTAH] path: 506
a30[CTAH] path: 507
a30[CTAH] path: 508
a30[CTAH] path: 509
a30[CTAH] path: 510
a30[CTAH] path: 511
a30[CTAH] path: 512
a30[CTAH] path: 513
a30[CTAH] path: 514
a30[CTAH] path: 515
a30[CTAH] path: 516
a30[CTAH] path: 517
a30[CTAH] path: 518
a30[CTAH] path: 519
a30[CTAH] path: 520
a30[CTAH] path: 521
a30[CTAH] path: 522
a30[CTAH] path: 523
a30[CTAH] path: 524
a30[CTAH] path: 525
a30[CTAH] path: 526
a30[CTAH] path: 527
a30[CTAH] path: 528
a30[CTAH] path: 529
a30[CTAH] path: 530
a30[CTAH] path: 531
a30[CTAH] path: 532
a30[CTAH] path: 533
a30[CTAH] path: 534
a30[CTAH] path: 535
a30[CTAH] path: 536
a30[CTAH] path: 537
a30[CTAH] path: 538
a30[CTAH] path: 539
a30[CTAH] path: 540
a30[CTAH] path: 541
a30[CTAH] path: 542
a30[CTAH] path: 543
a30[CTAH] path: 544
a30[CTAH] path: 545
a30[CTAH] path: 546
a30[CTAH] path: 547
a30[CTAH] path: 548
a30[CTAH] path: 549
a30[CTAH] path: 550
a30[CTAH] path: 551
a30[CTAH] path: 552
a30[CTAH] path: 553
a30[CTAH] path: 554
a30[CTAH] path: 555
a30[CTAH] path: 556
a30[CTAH] path: 557
a30[CTAH] path: 558
a30[CTAH] path: 559
a30[CTAH] path: 560
a30[CTAH] path: 561
a30[CTAH] path: 562
a30[CTAH] path: 563
a30[CTAH] path: 564
a30[CTAH] path: 565
a30[CTAH] path: 566
a30[CTAH] path: 567
a30[CTAH] path: 568
a30[CTAH] path: 569
a30[CTAH] path: 570
a30[CTAH] path: 571
a30[CTAH] path: 572
a30[CTAH] path: 573
a30[CTAH] path: 574
a30[CTAH] path: 575
a30[CTAH] path: 576
a30[CTAH] path: 577
a30[CTAH] path: 578
a30[CTAH] path: 579
a30[CTAH] path: 580
a30[CTAH] path: 581
a30[CTAH] path: 582
a30[CTAH] path: 583
a30[CTAH] path: 584
a30[CTAH] path: 585
a30[CTAH] path: 586
a30[CTAH] path: 587
a30[CTAH] path: 588
a30[CTAH] path: 589
a30[CTAH] path: 590
a30[CTAH] path: 591
a30[CTAH] path: 592
a30[CTAH] path: 593
a30[CTAH] path: 594
a30[CTAH] path: 595
a30[CTAH] path: 596
a30[CTAH] path: 597
a30[CTAH] path: 598
a30[CTAH] path: 599
a30[CTAH] path: 600
a30[CTAH] path: 601
a30[CTAH] path: 602
a30[CTAH] path: 603
a30[CTAH] path: 604
a30[CTAH] path: 605
a30[CTAH] path: 606
a30[CTAH] path: 607
a30[CTAH] path: 608
a30[CTAH] path: 609
a30[CTAH] path: 610
a30[CTAH] path: 611
a30[CTAH] path: 612
a30[CTAH] path: 613
a30[CTAH] path: 614
a30[CTAH] path: 615
a30[CTAH] path: 616
a30[CTAH] path: 617
a30[CTAH] path: 618
a30[CTAH] path: 619
a30[CTAH] path: 620
a30[CTAH] path: 621
a30[CTAH] path: 622
a30[CTAH] path: 623
a30[CTAH] path: 624
a30[CTAH] path: 625
a30[CTAH] path: 626
a30[CTAH] path: 627
a30[CTAH] path: 628
a30[CTAH] path: 629
a30[CTAH] path: 630
a30[CTAH] path: 631
a30[CTAH] path: 632
a30[CTAH] path: 633
a30[CTAH] path: 634
a30[CTAH] path: 635
a30[CTAH] path: 636
a30[CTAH] path: 637
a30[CTAH] path: 638
a30[CTAH] path: 639
a30[CTAH] path: 640
a30[CTAH] path: 641
a30[CTAH] path: 642
a30[CTAH] path: 643
a30[CTAH] path: 644
a30[CTAH] path: 645
a30[CTAH] path: 646
a30[CTAH] path: 647
a30[CTAH] path: 648
a30[CTAH] path: 649
a30[CTAH] path: 650
a30[CTAH] path: 651
a30[CTAH] path: 652
a30[CTAH] path: 653
a30[CTAH] path: 654
a30[CTAH] path: 655
a30[CTAH] path: 656
a30[CTAH] path: 657
a30[CTAH] path: 658
a30[CTAH] path: 659
a30[CTAH] path: 660
a30[CTAH] path: 661
a30[CTAH] path: 662
a30[CTAH] path: 663
a30[CTAH] path: 664
a30[CTAH] path: 665
a30[CTAH] path: 666
a30[CTAH] path: 667
a30[CTAH] path: 668
a30[CTAH] path: 669
a30[CTAH] path: 670
a30[CTAH] path: 671
a30[CTAH] path: 672
a30[CTAH] path: 673
a30[CTAH] path: 674
a30[CTAH] path: 675
a30[CTAH] path: 676
a30[CTAH] path: 677
a30[CTAH] path: 678
a30[CTAH] path: 679
a30[CTAH] path: 680
a30[CTAH] path: 681
a30[CTAH] path: 682
a30[CTAH] path: 683
a30[CTAH] path: 684
a30[CTAH] path: 685
a30[CTAH] path: 686
a30[CTAH] path: 687
a30[CTAH] path: 688
a30[CTAH] path: 689
a30[CTAH] path: 690
a30[CTAH] path: 691
a30[CTAH] path: 692
a30[CTAH] path: 693
a30[CTAH] path: 694
a30[CTAH] path: 695
a30[CTAH] path: 696
a30[CTAH] path: 697
a30[CTAH] path: 698
a30[CTAH] path: 699
a30[CTAH] path: 700
a30[CTAH] path: 701
a30[CTAH] path: 702
a30[CTAH] path: 703
a30[CTAH] path: 704
a30[CTAH] path: 705
a30[CTAH] path: 706
a30[CTAH] path: 707
a30[CTAH] path: 708
a30[CTAH] path: 709
a30[CTAH] path: 710
a30[CTAH] path: 711
a30[CTAH] path: 712
a30[CTAH] path: 713
a30[CTAH] path: 714
a30[CTAH] path: 715
a30[CTAH] path: 716
a30[CTAH] path: 717
a30[CTAH] path: 718
a30[CTAH] path: 719
a30[CTAH] path: 720
a30[CTAH] path: 721
a30[CTAH] path: 722
a30[CTAH] path: 723
a30[CTAH] path: 724
a30[CTAH] path: 725
a30[CTAH] path: 726
a30[CTAH] path: 727
a30[CTAH] path: 728
a30[CTAH] path: 729
a30[CTAH] path: 730
a30[CTAH] path: 731
a30[CTAH] path: 732
a30[CTAH] path: 733
a30[CTAH] path: 734
a30[CTAH] path: 735
a30[CTAH] path: 736
a30[CTAH] path: 737
a30[CTAH] path: 738
a30[CTAH] path: 739
a30[CTAH] path: 740
a30[CTAH] path: 741
a30[CTAH] path: 742
a30[CTAH] path: 743
a30[CTAH] path: 744
a30[CTAH] path: 745
a30[CTAH] path: 746
a30[CTAH] path: 747
a30[CTAH] path: 748
a30[CTAH] path: 749
a30[CTAH] path: 750
a30[CTAH] path: 751
a30[CTAH] path: 752
a30[CTAH] path: 753
a30[CTAH] path: 754
a30[CTAH] path: 755
a30[CTAH] path: 756
a30[CTAH] path: 757
a30[CTAH] path: 758
a30[CTAH] path: 759
a30[CTAH] path: 760
a30[CTAH] path: 761
a30[CTAH] path: 762
a30[CTAH] path: 763
a30[CTAH] path: 764
a30[CTAH] path: 765
a30[CTAH] path: 766
a30[CTAH] path: 767
a30[CTAH] path: 768
a30[CTAH] path: 769
a30[CTAH] path: 770
a30[CTAH] path: 771
a30[CTAH] path: 772
a30[CTAH] path: 773
a30[CTAH] path: 774
a30[CTAH] path: 775
a30[CTAH] path: 776
a30[CTAH] path: 777
a30[CTAH] path: 778
a30[CTAH] path: 779
a30[CTAH] path: 780
a30[CTAH] path: 781
a30[CTAH] path: 782
a30[CTAH] path: 783
a30[CTAH] path: 784
a30[CTAH] path: 785
a30[CTAH] path: 786
a30[CTAH] path: 787
a30[CTAH] path: 788
a30[CTAH] path: 789
a30[CTAH] path: 790
a30[CTAH] path: 791
a30[CTAH] path: 792
a30[CTAH] path: 793
a30[CTAH] path: 794
a30[CTAH] path: 795
a30[CTAH] path: 796
a30[CTAH] path: 797
a30[CTAH] path: 798
a30[CTAH] path: 799
a30[CTAH] path: 800
a30[CTAH] path: 801
a30[CTAH] path: 802
a30[CTAH] path: 803
a30[CTAH] path: 804
a30[CTAH] path: 805
a30[CTAH] path: 806
a30[CTAH] path: 807
a30[CTAH] path: 808
a30[CTAH] path: 809
a30[CTAH] path: 810
a30[CTAH] path: 811
a30[CTAH] path: 812
a30[CTAH] path: 813
a30[CTAH] path: 814
a30[CTAH] path: 815
a30[CTAH] path: 816
a30[CTAH] path: 817
a30[CTAH] path: 818
a30[CTAH] path: 819
a30[CTAH] path: 820
a30[CTAH] path: 821
a30[CTAH] path: 822
a30[CTAH] path: 823
a30[CTAH] path: 824
a30[CTAH] path: 825
a30[CTAH] path: 826
a30[CTAH] path: 827
a30[CTAH] path: 828
a30[CTAH] path: 829
a30[CTAH] path: 830
a30[CTAH] path: 831
a30[CTAH] path: 832
a30[CTAH] path: 833
a30[CTAH] path: 834
a30[CTAH] path: 835
a30[CTAH] path: 836
a30[CTAH] path: 837
a30[CTAH] path: 838
a30[CTAH] path: 839
a30[CTAH] path: 840
a30[CTAH] path: 841
a30[CTAH] path: 842
a30[CTAH] path: 843
a30[CTAH] path: 844
a30[CTAH] path: 845
a30[CTAH] path: 846
a30[CTAH] path: 847
a30[CTAH] path: 848
a30[CTAH] path: 849
a30[CTAH] path: 850
a30[CTAH] path: 851
a30[CTAH] path: 852
a30[CTAH] path: 853
a30[CTAH] path: 854
a30[CTAH] path: 855
a30[CTAH] path: 856
a30[CTAH] path: 857
a30[CTAH] path: 858
a30[CTAH] path: 859
a30[CTAH] path: 860
a30[CTAH] path: 861
a30[CTAH] path: 862
a30[CTAH] path: 863
a30[CTAH] path: 864
a30[CTAH] path: 865
a30[CTAH] path: 866
a30[CTAH] path: 867
a30[CTAH] path: 868
a30[CTAH] path: 869
a30[CTAH] path: 870
a30[CTAH] path: 871
a30[CTAH] path: 872
a30[CTAH] path: 873
a30[CTAH] path: 874
a30[CTAH] path: 875
a30[CTAH] path: 876
a30[CTAH] path: 877
a30[CTAH] path: 878
a30[CTAH] path: 879
a30[CTAH] path: 880
a30[CTAH] path: 881
a30[CTAH] path: 882
a30[CTAH] path: 883
a30[CTAH] path: 884
a30[CTAH] path: 885
a30[CTAH] path: 886
a30[CTAH] path: 887
a30[CTAH] path: 888
a30[CTAH] path: 889
a30[CTAH] path: 890
a30[CTAH] path: 891
a30[CTAH] path: 892
a30[CTAH] path: 893
a30[CTAH] path: 894
a30[CTAH] path: 895
a30[CTAH] path: 896
a30[CTAH] path: 897
a30[CTAH] path: 898
a30[CTAH] path: 899
a30[CTAH] path: 900
a30[CTAH] path: 901
a30[CTAH] path: 902
a30[CTAH] path: 903
a30[CTAH] path: 904
a30[CTAH] path: 905
a30[CTAH] path: 906
a30[CTAH] path: 907
a30[CTAH] path: 908
a30[CTAH] path: 909
a30[CTAH] path: 910
a30[CTAH] path: 911
a30[CTAH] path: 912
a30[CTAH] path: 913
a30[CTAH] path: 914
a30[CTAH] path: 915
a30[CTAH] path: 916
a30[CTAH] path: 917
a30[CTAH] path: 918
a30[CTAH] path: 919
a30[CTAH] path: 920
a30[CTAH] path: 921
a30[CTAH] path: 922
a30[CTAH] path: 923
a30[CTAH] path: 924
a30[CTAH] path: 925
a30[CTAH] path: 926
a30[CTAH] path: 927
a30[CTAH] path: 928
a30[CTAH] path: 929
a30[CTAH] path: 930
a30[CTAH] path: 931
a30[CTAH] path: 932
a30[CTAH] path: 933
a30[CTAH] path: 934
a30[CTAH] path: 935
a30[CTAH] path: 936
a30[CTAH] path: 937
a30[CTAH] path: 938
a30[CTAH] path: 939
a30[CTAH] path: 940
a30[CTAH] path: 941
a30[CTAH] path: 942
a30[CTAH] path: 943
a30[CTAH] path: 944
a30[CTAH] path: 945
a30[CTAH] path: 946
a30[CTAH] path: 947
a30[CTAH] path: 948
a30[CTAH] path: 949
a30[CTAH] path: 950
a30[CTAH] path: 951
a30[CTAH] path: 952
a30[CTAH] path: 953
a30[CTAH] path: 954
a30[CTAH] path: 955
a30[CTAH] path: 956
a30[CTAH] path: 957
a30[CTAH] path: 958
a30[CTAH] path: 959
a30[CTAH] path: 960
a30[CTAH] path: 961
a30[CTAH] path: 962
a30[CTAH] path: 963
a30[CTAH] path: 964
a30[CTAH] path: 965
a30[CTAH] path: 966
a30[CTAH] path: 967
a30[CTAH] path: 968
a30[CTAH] path: 969
a30[CTAH] path: 970
a30[CTAH] path: 971
a30[CTAH] path: 972
a30[CTAH] path: 973
a30[CTAH] path: 974
a30[CTAH] path: 975
a30[CTAH] path: 976
a30[CTAH] path: 977
a30[CTAH] path: 978
a30[CTAH] path: 979
a30[CTAH] path: 980
a30[CTAH] path: 981
a30[CTAH] path: 982
a30[CTAH] path: 983
a30[CTAH] path: 984
a30[CTAH] path: 985
a30[CTAH] path: 986
a30[CTAH] path: 987
a30[CTAH] path: 988
a30[CTAH] path: 989
a30[CTAH] path: 990
a30[CTAH] path: 991
a30[CTAH] path: 992
a30[CTAH] path: 993
a30[CTAH] path: 994
a30[CTAH] path: 995
a30[CTAH] path: 996
a30[CTAH] path: 997
a30[CTAH] path: 998
a30[CTAH] path: 999
a30[CTAH] moveStepToGoalTest havent found anything
a40[CTAH] path: 0
a40[CTAH] path: 1
a40[CTAH] path: 2
a40[CTAH] path: 3
a40[CTAH] path: 4
a40[CTAH] path: 5
a40[CTAH] path: 6
a40[CTAH] path: 7
a40[CTAH] path: 8
a40[CTAH] path: 9
a40[CTAH] path: 10
a40[CTAH] path: 11
a40[CTAH] path: 12
a40[CTAH] path: 13
a40[CTAH] path: 14
a40[CTAH] path: 15
a40[CTAH] path: 16
a40[CTAH] path: 17
a40[CTAH] path: 18
a40[CTAH] path: 19
a40[CTAH] path: 20
a40[CTAH] path: 21
a40[CTAH] path: 22
a40[CTAH] path: 23
a40[CTAH] path: 24
a40[CTAH] path: 25
a40[CTAH] path: 26
a40[CTAH] path: 27
a40[CTAH] path: 28
a40[CTAH] path: 29
a40[CTAH] path: 30
a40[CTAH] path: 31
a40[CTAH] path: 32
a40[CTAH] path: 33
a40[CTAH] path: 34
a40[CTAH] path: 35
a40[CTAH] path: 36
a40[CTAH] path: 37
a40[CTAH] path: 38
a40[CTAH] path: 39
a40[CTAH] path: 40
a40[CTAH] path: 41
a40[CTAH] path: 42
a40[CTAH] path: 43
a40[CTAH] path: 44
a40[CTAH] path: 45
a40[CTAH] path: 46
a40[CTAH] path: 47
a40[CTAH] path: 48
a40[CTAH] path: 49
a40[CTAH] path: 50
a40[CTAH] path: 51
a40[CTAH] path: 52
a40[CTAH] path: 53
a40[CTAH] path: 54
a40[CTAH] path: 55
a40[CTAH] path: 56
a40[CTAH] path: 57
a40[CTAH] path: 58
a40[CTAH] path: 59
a40[CTAH] path: 60
a40[CTAH] path: 61
a40[CTAH] path: 62
a40[CTAH] path: 63
a40[CTAH] path: 64
a40[CTAH] path: Path: [6][1] [6][2] [6][3] [6][4] [6][5] [5][5] [4][5] [4][4] [3][4]

a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] found any chip....: (R:6,C:2)
a40[CTAH] moveStepToGoalTest sent proposal for: [6,2,0,6170]
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscourseMessage
[MSG] Message is of type: basicproposal
[MSG] Message is for: 0
[MSG] i'm: 0
Received a proposal creating event
org notification: Proposal [id=6170, agent=a40, agent2=a10, clock=10, time=2015-05-27 16:47:54.495]
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 3
[MSG] i'm: 3
AGENT : got response to offer
a10[CTAH] path: 0
a10[CTAH] path: 1
a10[CTAH] path: 2
a10[CTAH] path: 3
a10[CTAH] path: 4
a10[CTAH] path: 5
a10[CTAH] path: 6
a10[CTAH] path: 7
a10[CTAH] path: 8
a10[CTAH] path: 9
a10[CTAH] path: 10
a10[CTAH] path: 11
a10[CTAH] path: 12
a10[CTAH] path: 13
a10[CTAH] path: 14
a10[CTAH] path: 15
a10[CTAH] path: 16
a10[CTAH] path: 17
a10[CTAH] path: 18
a10[CTAH] path: 19
a10[CTAH] path: 20
a10[CTAH] path: 21
a10[CTAH] path: 22
a10[CTAH] path: 23
a10[CTAH] path: 24
a10[CTAH] path: 25
a10[CTAH] path: 26
a10[CTAH] path: 27
a10[CTAH] path: 28
a10[CTAH] path: 29
a10[CTAH] path: 30
a10[CTAH] path: 31
a10[CTAH] path: 32
a10[CTAH] path: 33
a10[CTAH] path: 34
a10[CTAH] path: 35
a10[CTAH] path: 36
a10[CTAH] path: 37
a10[CTAH] path: 38
a10[CTAH] path: 39
a10[CTAH] path: 40
a10[CTAH] path: 41
a10[CTAH] path: 42
a10[CTAH] path: 43
a10[CTAH] path: 44
a10[CTAH] path: 45
a10[CTAH] path: 46
a10[CTAH] path: 47
a10[CTAH] path: 48
a10[CTAH] path: 49
a10[CTAH] path: 50
a10[CTAH] path: 51
a10[CTAH] path: 52
a10[CTAH] path: 53
a10[CTAH] path: 54
a10[CTAH] path: 55
a10[CTAH] path: 56
a10[CTAH] path: 57
a10[CTAH] path: 58
a10[CTAH] path: 59
a10[CTAH] path: 60
a10[CTAH] path: 61
a10[CTAH] path: 62
a10[CTAH] path: 63
a10[CTAH] path: 64
a10[CTAH] path: 65
a10[CTAH] path: 66
a10[CTAH] path: 67
a10[CTAH] path: 68
a10[CTAH] path: 69
a10[CTAH] path: 70
a10[CTAH] path: 71
a10[CTAH] path: 72
a10[CTAH] path: 73
a10[CTAH] path: 74
a10[CTAH] path: 75
a10[CTAH] path: 76
a10[CTAH] path: 77
a10[CTAH] path: 78
a10[CTAH] path: 79
a10[CTAH] path: 80
a10[CTAH] path: 81
a10[CTAH] path: 82
a10[CTAH] path: 83
a10[CTAH] path: 84
a10[CTAH] path: 85
a10[CTAH] path: 86
a10[CTAH] path: 87
a10[CTAH] path: 88
a10[CTAH] path: 89
a10[CTAH] path: 90
a10[CTAH] path: 91
a10[CTAH] path: 92
a10[CTAH] path: 93
a10[CTAH] path: 94
a10[CTAH] path: 95
a10[CTAH] path: 96
a10[CTAH] path: 97
a10[CTAH] path: 98
a10[CTAH] path: 99
a10[CTAH] path: 100
a10[CTAH] path: 101
a10[CTAH] path: 102
a10[CTAH] path: 103
a10[CTAH] path: 104
a10[CTAH] path: 105
a10[CTAH] path: 106
a10[CTAH] path: 107
a10[CTAH] path: 108
a10[CTAH] path: 109
a10[CTAH] path: 110
a10[CTAH] path: 111
a10[CTAH] path: 112
a10[CTAH] path: 113
a10[CTAH] path: 114
a10[CTAH] path: 115
a10[CTAH] path: 116
a10[CTAH] path: 117
a10[CTAH] path: 118
a10[CTAH] path: 119
a10[CTAH] path: 120
a10[CTAH] path: 121
a10[CTAH] path: 122
a10[CTAH] path: 123
a10[CTAH] path: 124
a10[CTAH] path: 125
a10[CTAH] path: 126
a10[CTAH] path: 127
a10[CTAH] path: 128
a10[CTAH] path: 129
a10[CTAH] path: 130
a10[CTAH] path: 131
a10[CTAH] path: 132
a10[CTAH] path: 133
a10[CTAH] path: 134
a10[CTAH] path: 135
a10[CTAH] path: 136
a10[CTAH] path: 137
a10[CTAH] path: 138
a10[CTAH] path: 139
a10[CTAH] path: 140
a10[CTAH] path: 141
a10[CTAH] path: 142
a10[CTAH] path: 143
a10[CTAH] path: 144
a10[CTAH] path: 145
a10[CTAH] path: 146
a10[CTAH] path: 147
a10[CTAH] path: 148
a10[CTAH] path: 149
a10[CTAH] path: 150
a10[CTAH] path: 151
a10[CTAH] path: 152
a10[CTAH] path: 153
a10[CTAH] path: 154
a10[CTAH] path: 155
a10[CTAH] path: 156
a10[CTAH] path: 157
a10[CTAH] path: 158
a10[CTAH] path: 159
a10[CTAH] path: 160
a10[CTAH] path: 161
a10[CTAH] path: 162
a10[CTAH] path: 163
a10[CTAH] path: 164
a10[CTAH] path: 165
a10[CTAH] path: 166
a10[CTAH] path: 167
a10[CTAH] path: 168
a10[CTAH] path: 169
a10[CTAH] path: 170
a10[CTAH] path: 171
a10[CTAH] path: 172
a10[CTAH] path: 173
a10[CTAH] path: 174
a10[CTAH] path: 175
a10[CTAH] path: 176
a10[CTAH] path: 177
a10[CTAH] path: 178
a10[CTAH] path: 179
a10[CTAH] path: 180
a10[CTAH] path: 181
a10[CTAH] path: 182
a10[CTAH] path: 183
a10[CTAH] path: 184
a10[CTAH] path: 185
a10[CTAH] path: 186
a10[CTAH] path: 187
a10[CTAH] path: 188
a10[CTAH] path: 189
a10[CTAH] path: 190
a10[CTAH] path: 191
a10[CTAH] path: 192
a10[CTAH] path: 193
a10[CTAH] path: 194
a10[CTAH] path: 195
a10[CTAH] path: 196
a10[CTAH] path: 197
a10[CTAH] path: 198
a10[CTAH] path: 199
a10[CTAH] path: 200
a10[CTAH] path: 201
a10[CTAH] path: 202
a10[CTAH] path: 203
a10[CTAH] path: 204
a10[CTAH] path: 205
a10[CTAH] path: 206
a10[CTAH] path: 207
a10[CTAH] path: 208
a10[CTAH] path: 209
a10[CTAH] path: 210
a10[CTAH] path: 211
a10[CTAH] path: 212
a10[CTAH] path: 213
a10[CTAH] path: 214
a10[CTAH] path: 215
a10[CTAH] path: 216
a10[CTAH] path: 217
a10[CTAH] path: 218
a10[CTAH] path: 219
a10[CTAH] path: 220
a10[CTAH] path: 221
a10[CTAH] path: 222
a10[CTAH] path: 223
a10[CTAH] path: 224
a10[CTAH] path: 225
a10[CTAH] path: 226
a10[CTAH] path: 227
a10[CTAH] path: 228
a10[CTAH] path: 229
a10[CTAH] path: 230
a10[CTAH] path: 231
a10[CTAH] path: 232
a10[CTAH] path: 233
a10[CTAH] path: 234
a10[CTAH] path: 235
a10[CTAH] path: 236
a10[CTAH] path: 237
a10[CTAH] path: 238
a10[CTAH] path: 239
a10[CTAH] path: 240
a10[CTAH] path: 241
a10[CTAH] path: 242
a10[CTAH] path: 243
a10[CTAH] path: 244
a10[CTAH] path: 245
a10[CTAH] path: 246
a10[CTAH] path: 247
a10[CTAH] path: 248
a10[CTAH] path: 249
a10[CTAH] path: 250
a10[CTAH] path: 251
a10[CTAH] path: 252
a10[CTAH] path: 253
a10[CTAH] path: 254
a10[CTAH] path: 255
a10[CTAH] path: 256
a10[CTAH] path: 257
a10[CTAH] path: 258
a10[CTAH] path: 259
a10[CTAH] path: 260
a10[CTAH] path: 261
a10[CTAH] path: 262
a10[CTAH] path: 263
a10[CTAH] path: 264
a10[CTAH] path: 265
a10[CTAH] path: 266
a10[CTAH] path: 267
a10[CTAH] path: 268
a10[CTAH] path: 269
a10[CTAH] path: 270
a10[CTAH] path: 271
a10[CTAH] path: 272
a10[CTAH] path: 273
a10[CTAH] path: 274
a10[CTAH] path: 275
a10[CTAH] path: 276
a10[CTAH] path: 277
a10[CTAH] path: 278
a10[CTAH] path: 279
a10[CTAH] path: 280
a10[CTAH] path: 281
a10[CTAH] path: 282
a10[CTAH] path: 283
a10[CTAH] path: 284
a10[CTAH] path: 285
a10[CTAH] path: 286
a10[CTAH] path: 287
a10[CTAH] path: 288
a10[CTAH] path: 289
a10[CTAH] path: 290
a10[CTAH] path: 291
a10[CTAH] path: 292
a10[CTAH] path: 293
a10[CTAH] path: 294
a10[CTAH] path: 295
a10[CTAH] path: 296
a10[CTAH] path: 297
a10[CTAH] path: 298
a10[CTAH] path: 299
a10[CTAH] path: 300
a10[CTAH] path: 301
a10[CTAH] path: 302
a10[CTAH] path: 303
a10[CTAH] path: 304
a10[CTAH] path: 305
a10[CTAH] path: 306
a10[CTAH] path: 307
a10[CTAH] path: 308
a10[CTAH] path: 309
a10[CTAH] path: 310
a10[CTAH] path: 311
a10[CTAH] path: 312
a10[CTAH] path: 313
a10[CTAH] path: 314
a10[CTAH] path: 315
a10[CTAH] path: 316
a10[CTAH] path: 317
a10[CTAH] path: 318
a10[CTAH] path: 319
a10[CTAH] path: 320
a10[CTAH] path: 321
a10[CTAH] path: 322
a10[CTAH] path: 323
a10[CTAH] path: 324
a10[CTAH] path: 325
a10[CTAH] path: 326
a10[CTAH] path: 327
a10[CTAH] path: 328
a10[CTAH] path: 329
a10[CTAH] path: 330
a10[CTAH] path: 331
a10[CTAH] path: 332
a10[CTAH] path: 333
a10[CTAH] path: 334
a10[CTAH] path: 335
a10[CTAH] path: 336
a10[CTAH] path: 337
a10[CTAH] path: 338
a10[CTAH] path: 339
a10[CTAH] path: 340
a10[CTAH] path: 341
a10[CTAH] path: 342
a10[CTAH] path: 343
a10[CTAH] path: 344
a10[CTAH] path: 345
a10[CTAH] path: 346
a10[CTAH] path: 347
a10[CTAH] path: 348
a10[CTAH] path: 349
a10[CTAH] path: 350
a10[CTAH] path: 351
a10[CTAH] path: 352
a10[CTAH] path: 353
a10[CTAH] path: 354
a10[CTAH] path: 355
a10[CTAH] path: 356
a10[CTAH] path: 357
a10[CTAH] path: 358
a10[CTAH] path: 359
a10[CTAH] path: 360
a10[CTAH] path: 361
a10[CTAH] path: 362
a10[CTAH] path: 363
a10[CTAH] path: 364
a10[CTAH] path: 365
a10[CTAH] path: 366
a10[CTAH] path: 367
a10[CTAH] path: 368
a10[CTAH] path: 369
a10[CTAH] path: 370
a10[CTAH] path: 371
a10[CTAH] path: 372
a10[CTAH] path: 373
a10[CTAH] path: 374
a10[CTAH] path: 375
a10[CTAH] path: 376
a10[CTAH] path: 377
a10[CTAH] path: 378
a10[CTAH] path: 379
a10[CTAH] path: 380
a10[CTAH] path: 381
a10[CTAH] path: 382
a10[CTAH] path: 383
a10[CTAH] path: 384
a10[CTAH] path: 385
a10[CTAH] path: 386
a10[CTAH] path: 387
a10[CTAH] path: 388
a10[CTAH] path: 389
a10[CTAH] path: 390
a10[CTAH] path: 391
a10[CTAH] path: 392
a10[CTAH] path: 393
a10[CTAH] path: 394
a10[CTAH] path: 395
a10[CTAH] path: 396
a10[CTAH] path: 397
a10[CTAH] path: 398
a10[CTAH] path: 399
a10[CTAH] path: 400
a10[CTAH] path: 401
a10[CTAH] path: 402
a10[CTAH] path: 403
a10[CTAH] path: 404
a10[CTAH] path: 405
a10[CTAH] path: 406
a10[CTAH] path: 407
a10[CTAH] path: 408
a10[CTAH] path: 409
a10[CTAH] path: 410
a10[CTAH] path: 411
a10[CTAH] path: 412
a10[CTAH] path: 413
a10[CTAH] path: 414
a10[CTAH] path: 415
a10[CTAH] path: 416
a10[CTAH] path: 417
a10[CTAH] path: 418
a10[CTAH] path: 419
a10[CTAH] path: 420
a10[CTAH] path: 421
a10[CTAH] path: 422
a10[CTAH] path: 423
a10[CTAH] path: 424
a10[CTAH] path: 425
a10[CTAH] path: 426
a10[CTAH] path: 427
a10[CTAH] path: 428
a10[CTAH] path: 429
a10[CTAH] path: 430
a10[CTAH] path: 431
a10[CTAH] path: 432
a10[CTAH] path: 433
a10[CTAH] path: 434
a10[CTAH] path: 435
a10[CTAH] path: 436
a10[CTAH] path: 437
a10[CTAH] path: 438
a10[CTAH] path: 439
a10[CTAH] path: 440
a10[CTAH] path: 441
a10[CTAH] path: 442
a10[CTAH] path: 443
a10[CTAH] path: 444
a10[CTAH] path: 445
a10[CTAH] path: 446
a10[CTAH] path: 447
a10[CTAH] path: 448
a10[CTAH] path: 449
a10[CTAH] path: 450
a10[CTAH] path: 451
a10[CTAH] path: 452
a10[CTAH] path: 453
a10[CTAH] path: 454
a10[CTAH] path: 455
a10[CTAH] path: 456
a10[CTAH] path: 457
a10[CTAH] path: 458
a10[CTAH] path: 459
a10[CTAH] path: 460
a10[CTAH] path: 461
a10[CTAH] path: 462
a10[CTAH] path: 463
a10[CTAH] path: 464
a10[CTAH] path: 465
a10[CTAH] path: 466
a10[CTAH] path: 467
a10[CTAH] path: 468
a10[CTAH] path: 469
a10[CTAH] path: 470
a10[CTAH] path: 471
a10[CTAH] path: 472
a10[CTAH] path: 473
a10[CTAH] path: 474
a10[CTAH] path: 475
a10[CTAH] path: 476
a10[CTAH] path: 477
a10[CTAH] path: 478
a10[CTAH] path: 479
a10[CTAH] path: 480
a10[CTAH] path: 481
a10[CTAH] path: 482
a10[CTAH] path: 483
a10[CTAH] path: 484
a10[CTAH] path: 485
a10[CTAH] path: 486
a10[CTAH] path: 487
a10[CTAH] path: 488
a10[CTAH] path: 489
a10[CTAH] path: 490
a10[CTAH] path: 491
a10[CTAH] path: 492
a10[CTAH] path: 493
a10[CTAH] path: 494
a10[CTAH] path: 495
a10[CTAH] path: 496
a10[CTAH] path: 497
a10[CTAH] path: 498
a10[CTAH] path: 499
a10[CTAH] path: 500
a10[CTAH] path: 501
a10[CTAH] path: 502
a10[CTAH] path: 503
a10[CTAH] path: 504
a10[CTAH] path: 505
a10[CTAH] path: 506
a10[CTAH] path: 507
a10[CTAH] path: 508
a10[CTAH] path: 509
a10[CTAH] path: 510
a10[CTAH] path: 511
a10[CTAH] path: 512
a10[CTAH] path: 513
a10[CTAH] path: 514
a10[CTAH] path: 515
a10[CTAH] path: 516
a10[CTAH] path: 517
a10[CTAH] path: 518
a10[CTAH] path: 519
a10[CTAH] path: 520
a10[CTAH] path: 521
a10[CTAH] path: 522
a10[CTAH] path: 523
a10[CTAH] path: 524
a10[CTAH] path: 525
a10[CTAH] path: 526
a10[CTAH] path: 527
a10[CTAH] path: 528
a10[CTAH] path: 529
a10[CTAH] path: 530
a10[CTAH] path: 531
a10[CTAH] path: 532
a10[CTAH] path: 533
a10[CTAH] path: 534
a10[CTAH] path: 535
a10[CTAH] path: 536
a10[CTAH] path: 537
a10[CTAH] path: 538
a10[CTAH] path: 539
a10[CTAH] path: 540
a10[CTAH] path: 541
a10[CTAH] path: 542
a10[CTAH] path: 543
a10[CTAH] path: 544
a10[CTAH] path: 545
a10[CTAH] path: 546
a10[CTAH] path: 547
a10[CTAH] path: 548
a10[CTAH] path: 549
a10[CTAH] path: 550
a10[CTAH] path: 551
a10[CTAH] path: 552
a10[CTAH] path: 553
a10[CTAH] path: 554
a10[CTAH] path: 555
a10[CTAH] path: 556
a10[CTAH] path: 557
a10[CTAH] path: 558
a10[CTAH] path: 559
a10[CTAH] path: 560
a10[CTAH] path: 561
a10[CTAH] path: 562
a10[CTAH] path: 563
a10[CTAH] path: 564
a10[CTAH] path: 565
a10[CTAH] path: 566
a10[CTAH] path: 567
a10[CTAH] path: 568
a10[CTAH] path: 569
a10[CTAH] path: 570
a10[CTAH] path: 571
a10[CTAH] path: 572
a10[CTAH] path: 573
a10[CTAH] path: 574
a10[CTAH] path: 575
a10[CTAH] path: 576
a10[CTAH] path: 577
a10[CTAH] path: 578
a10[CTAH] path: 579
a10[CTAH] path: 580
a10[CTAH] path: 581
a10[CTAH] path: 582
a10[CTAH] path: 583
a10[CTAH] path: 584
a10[CTAH] path: 585
a10[CTAH] path: 586
a10[CTAH] path: 587
a10[CTAH] path: 588
a10[CTAH] path: 589
a10[CTAH] path: 590
a10[CTAH] path: 591
a10[CTAH] path: 592
a10[CTAH] path: 593
a10[CTAH] path: 594
a10[CTAH] path: 595
a10[CTAH] path: 596
a10[CTAH] path: 597
a10[CTAH] path: 598
a10[CTAH] path: 599
a10[CTAH] path: 600
a10[CTAH] path: 601
a10[CTAH] path: 602
a10[CTAH] path: 603
a10[CTAH] path: 604
a10[CTAH] path: 605
a10[CTAH] path: 606
a10[CTAH] path: 607
a10[CTAH] path: 608
a10[CTAH] path: 609
a10[CTAH] path: 610
a10[CTAH] path: 611
a10[CTAH] path: 612
a10[CTAH] path: 613
a10[CTAH] path: 614
a10[CTAH] path: 615
a10[CTAH] path: 616
a10[CTAH] path: 617
a10[CTAH] path: 618
a10[CTAH] path: 619
a10[CTAH] path: 620
a10[CTAH] path: 621
a10[CTAH] path: 622
a10[CTAH] path: 623
a10[CTAH] path: 624
a10[CTAH] path: 625
a10[CTAH] path: 626
a10[CTAH] path: 627
a10[CTAH] path: 628
a10[CTAH] path: 629
a10[CTAH] path: 630
a10[CTAH] path: 631
a10[CTAH] path: 632
a10[CTAH] path: 633
a10[CTAH] path: 634
a10[CTAH] path: 635
a10[CTAH] path: 636
a10[CTAH] path: 637
a10[CTAH] path: 638
a10[CTAH] path: 639
a10[CTAH] path: 640
a10[CTAH] path: 641
a10[CTAH] path: 642
a10[CTAH] path: 643
a10[CTAH] path: 644
a10[CTAH] path: 645
a10[CTAH] path: 646
a10[CTAH] path: 647
a10[CTAH] path: 648
a10[CTAH] path: 649
a10[CTAH] path: 650
a10[CTAH] path: 651
a10[CTAH] path: 652
a10[CTAH] path: 653
a10[CTAH] path: 654
a10[CTAH] path: 655
a10[CTAH] path: 656
a10[CTAH] path: 657
a10[CTAH] path: 658
a10[CTAH] path: 659
a10[CTAH] path: 660
a10[CTAH] path: 661
a10[CTAH] path: 662
a10[CTAH] path: 663
a10[CTAH] path: 664
a10[CTAH] path: 665
a10[CTAH] path: 666
a10[CTAH] path: 667
a10[CTAH] path: 668
a10[CTAH] path: 669
a10[CTAH] path: 670
a10[CTAH] path: 671
a10[CTAH] path: 672
a10[CTAH] path: 673
a10[CTAH] path: 674
a10[CTAH] path: 675
a10[CTAH] path: 676
a10[CTAH] path: 677
a10[CTAH] path: 678
a10[CTAH] path: 679
a10[CTAH] path: 680
a10[CTAH] path: 681
a10[CTAH] path: 682
a10[CTAH] path: 683
a10[CTAH] path: 684
a10[CTAH] path: 685
a10[CTAH] path: 686
a10[CTAH] path: 687
a10[CTAH] path: 688
a10[CTAH] path: 689
a10[CTAH] path: 690
a10[CTAH] path: 691
a10[CTAH] path: 692
a10[CTAH] path: 693
a10[CTAH] path: 694
a10[CTAH] path: 695
a10[CTAH] path: 696
a10[CTAH] path: 697
a10[CTAH] path: 698
a10[CTAH] path: 699
a10[CTAH] path: 700
a10[CTAH] path: 701
a10[CTAH] path: 702
a10[CTAH] path: 703
a10[CTAH] path: 704
a10[CTAH] path: 705
a10[CTAH] path: 706
a10[CTAH] path: 707
a10[CTAH] path: 708
a10[CTAH] path: 709
a10[CTAH] path: 710
a10[CTAH] path: 711
a10[CTAH] path: 712
a10[CTAH] path: 713
a10[CTAH] path: 714
a10[CTAH] path: 715
a10[CTAH] path: 716
a10[CTAH] path: 717
a10[CTAH] path: 718
a10[CTAH] path: 719
a10[CTAH] path: 720
a10[CTAH] path: 721
a10[CTAH] path: 722
a10[CTAH] path: 723
a10[CTAH] path: 724
a10[CTAH] path: 725
a10[CTAH] path: 726
a10[CTAH] path: 727
a10[CTAH] path: 728
a10[CTAH] path: 729
a10[CTAH] path: 730
a10[CTAH] path: 731
a10[CTAH] path: 732
a10[CTAH] path: 733
a10[CTAH] path: 734
a10[CTAH] path: 735
a10[CTAH] path: 736
a10[CTAH] path: 737
a10[CTAH] path: 738
a10[CTAH] path: 739
a10[CTAH] path: 740
a10[CTAH] path: 741
a10[CTAH] path: 742
a10[CTAH] path: 743
a10[CTAH] path: 744
a10[CTAH] path: 745
a10[CTAH] path: 746
a10[CTAH] path: 747
a10[CTAH] path: 748
a10[CTAH] path: 749
a10[CTAH] path: 750
a10[CTAH] path: 751
a10[CTAH] path: 752
a10[CTAH] path: 753
a10[CTAH] path: 754
a10[CTAH] path: 755
a10[CTAH] path: 756
a10[CTAH] path: 757
a10[CTAH] path: 758
a10[CTAH] path: 759
a10[CTAH] path: 760
a10[CTAH] path: 761
a10[CTAH] path: 762
a10[CTAH] path: 763
a10[CTAH] path: 764
a10[CTAH] path: 765
a10[CTAH] path: 766
a10[CTAH] path: 767
a10[CTAH] path: 768
a10[CTAH] path: 769
a10[CTAH] path: 770
a10[CTAH] path: 771
a10[CTAH] path: 772
a10[CTAH] path: 773
a10[CTAH] path: 774
a10[CTAH] path: 775
a10[CTAH] path: 776
a10[CTAH] path: 777
a10[CTAH] path: 778
a10[CTAH] path: 779
a10[CTAH] path: 780
a10[CTAH] path: 781
a10[CTAH] path: 782
a10[CTAH] path: 783
a10[CTAH] path: 784
a10[CTAH] path: 785
a10[CTAH] path: 786
a10[CTAH] path: 787
a10[CTAH] path: 788
a10[CTAH] path: 789
a10[CTAH] path: 790
a10[CTAH] path: 791
a10[CTAH] path: 792
a10[CTAH] path: 793
a10[CTAH] path: 794
a10[CTAH] path: 795
a10[CTAH] path: 796
a10[CTAH] path: 797
a10[CTAH] path: 798
a10[CTAH] path: 799
a10[CTAH] path: 800
a10[CTAH] path: 801
a10[CTAH] path: 802
a10[CTAH] path: 803
a10[CTAH] path: 804
a10[CTAH] path: 805
a10[CTAH] path: 806
a10[CTAH] path: 807
a10[CTAH] path: 808
a10[CTAH] path: 809
a10[CTAH] path: 810
a10[CTAH] path: 811
a10[CTAH] path: 812
a10[CTAH] path: 813
a10[CTAH] path: 814
a10[CTAH] path: 815
a10[CTAH] path: 816
a10[CTAH] path: 817
a10[CTAH] path: 818
a10[CTAH] path: 819
a10[CTAH] path: 820
a10[CTAH] path: 821
a10[CTAH] path: 822
a10[CTAH] path: 823
a10[CTAH] path: 824
a10[CTAH] path: 825
a10[CTAH] path: 826
a10[CTAH] path: 827
a10[CTAH] path: 828
a10[CTAH] path: 829
a10[CTAH] path: 830
a10[CTAH] path: 831
a10[CTAH] path: 832
a10[CTAH] path: 833
a10[CTAH] path: 834
a10[CTAH] path: 835
a10[CTAH] path: 836
a10[CTAH] path: 837
a10[CTAH] path: 838
a10[CTAH] path: 839
a10[CTAH] path: 840
a10[CTAH] path: 841
a10[CTAH] path: 842
a10[CTAH] path: 843
a10[CTAH] path: 844
a10[CTAH] path: 845
a10[CTAH] path: 846
a10[CTAH] path: 847
a10[CTAH] path: 848
a10[CTAH] path: 849
a10[CTAH] path: 850
a10[CTAH] path: 851
a10[CTAH] path: 852
a10[CTAH] path: 853
a10[CTAH] path: 854
a10[CTAH] path: 855
a10[CTAH] path: 856
a10[CTAH] path: 857
a10[CTAH] path: 858
a10[CTAH] path: 859
a10[CTAH] path: 860
a10[CTAH] path: 861
a10[CTAH] path: 862
a10[CTAH] path: 863
a10[CTAH] path: 864
a10[CTAH] path: 865
a10[CTAH] path: 866
a10[CTAH] path: 867
a10[CTAH] path: 868
a10[CTAH] path: 869
a10[CTAH] path: 870
a10[CTAH] path: 871
a10[CTAH] path: 872
a10[CTAH] path: 873
a10[CTAH] path: 874
a10[CTAH] path: 875
a10[CTAH] path: 876
a10[CTAH] path: 877
a10[CTAH] path: 878
a10[CTAH] path: 879
a10[CTAH] path: 880
a10[CTAH] path: 881
a10[CTAH] path: 882
a10[CTAH] path: 883
a10[CTAH] path: 884
a10[CTAH] path: 885
a10[CTAH] path: 886
a10[CTAH] path: 887
a10[CTAH] path: 888
a10[CTAH] path: 889
a10[CTAH] path: 890
a10[CTAH] path: 891
a10[CTAH] path: 892
a10[CTAH] path: 893
a10[CTAH] path: 894
a10[CTAH] path: 895
a10[CTAH] path: 896
a10[CTAH] path: 897
a10[CTAH] path: 898
a10[CTAH] path: 899
a10[CTAH] path: 900
a10[CTAH] path: 901
a10[CTAH] path: 902
a10[CTAH] path: 903
a10[CTAH] path: 904
a10[CTAH] path: 905
a10[CTAH] path: 906
a10[CTAH] path: 907
a10[CTAH] path: 908
a10[CTAH] path: 909
a10[CTAH] path: 910
a10[CTAH] path: 911
a10[CTAH] path: 912
a10[CTAH] path: 913
a10[CTAH] path: 914
a10[CTAH] path: 915
a10[CTAH] path: 916
a10[CTAH] path: 917
a10[CTAH] path: 918
a10[CTAH] path: 919
a10[CTAH] path: 920
a10[CTAH] path: 921
a10[CTAH] path: 922
a10[CTAH] path: 923
a10[CTAH] path: 924
a10[CTAH] path: 925
a10[CTAH] path: 926
a10[CTAH] path: 927
a10[CTAH] path: 928
a10[CTAH] path: 929
a10[CTAH] path: 930
a10[CTAH] path: 931
a10[CTAH] path: 932
a10[CTAH] path: 933
a10[CTAH] path: 934
a10[CTAH] path: 935
a10[CTAH] path: 936
a10[CTAH] path: 937
a10[CTAH] path: 938
a10[CTAH] path: 939
a10[CTAH] path: 940
a10[CTAH] path: 941
a10[CTAH] path: 942
a10[CTAH] path: 943
a10[CTAH] path: 944
a10[CTAH] path: 945
a10[CTAH] path: 946
a10[CTAH] path: 947
a10[CTAH] path: 948
a10[CTAH] path: 949
a10[CTAH] path: 950
a10[CTAH] path: 951
a10[CTAH] path: 952
a10[CTAH] path: 953
a10[CTAH] path: 954
a10[CTAH] path: 955
a10[CTAH] path: 956
a10[CTAH] path: 957
a10[CTAH] path: 958
a10[CTAH] path: 959
a10[CTAH] path: 960
a10[CTAH] path: 961
a10[CTAH] path: 962
a10[CTAH] path: 963
a10[CTAH] path: 964
a10[CTAH] path: 965
a10[CTAH] path: 966
a10[CTAH] path: 967
a10[CTAH] path: 968
a10[CTAH] path: 969
a10[CTAH] path: 970
a10[CTAH] path: 971
a10[CTAH] path: 972
a10[CTAH] path: 973
a10[CTAH] path: 974
a10[CTAH] path: 975
a10[CTAH] path: 976
a10[CTAH] path: 977
a10[CTAH] path: 978
a10[CTAH] path: 979
a10[CTAH] path: 980
a10[CTAH] path: 981
a10[CTAH] path: 982
a10[CTAH] path: 983
a10[CTAH] path: 984
a10[CTAH] path: 985
a10[CTAH] path: 986
a10[CTAH] path: 987
a10[CTAH] path: 988
a10[CTAH] path: 989
a10[CTAH] path: 990
a10[CTAH] path: 991
a10[CTAH] path: 992
a10[CTAH] path: 993
a10[CTAH] path: 994
a10[CTAH] path: 995
a10[CTAH] path: 996
a10[CTAH] path: 997
a10[CTAH] path: 998
a10[CTAH] path: 999
a10[CTAH] moveStepToGoalTest havent found anything
Event processed UpdateClock(10)
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed UpdateClock(10)
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed UpdateClock(10)
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed @ctenv(functionToList(proposal(proposal, 3, 6170, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(10)
},
{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(10), @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(10)
},
{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 6, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6170=no)
							then	{	NextStep(6, 2, 6170)
								}
							else	{	NextStep(6, 2)
								}
						}
				}
			else	{	if	B(not 6170=no)
					then	{	NextStep(6, 2, 6170)
						}
					else	{	NextStep(6, 2)
						}
				}
		};
	if	B(not 6170=no)
	then	{	Sent(6170, 0, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(10)
},
{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 6, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 6170=no) then NextStep(6, 2, 6170) else NextStep(6, 2) else if B(not 6170=no) then NextStep(6, 2, 6170) else NextStep(6, 2); if B(not 6170=no) then Sent(6170, 0, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(10), @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 6, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6170=no)
							then	{	NextStep(6, 2, 6170)
								}
							else	{	NextStep(6, 2)
								}
						}
				}
			else	{	if	B(not 6170=no)
					then	{	NextStep(6, 2, 6170)
						}
					else	{	NextStep(6, 2)
						}
				}
		};
	if	B(not 6170=no)
	then	{	Sent(6170, 0, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(10)
},
{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(10)
},
{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
},
{	@ctenv(functionToList(proposal(proposal, 3, 6170, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(10), @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), @ctenv(functionToList(proposal(proposal, 3, 6170, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(10)
},
{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
},
{	@ctenv(functionToList(proposal(proposal, 3, 6170, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@434e86a6
[CTAH] The created APLList : [phasechange]
[CTAH] Array of Terms: [Lapapl.data.Term;@697c9563
[CTAH] The created APLList : [phasechange]
[CTAH] Array of Terms: [Lapapl.data.Term;@4711401a
[CTAH] The created APLList : [phasechange]
[CTAH] Array of Terms: [Lapapl.data.Term;@3d878f69
[CTAH] The created APLList : [proposal,3,6170,open]
[Planbase]:{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B(tile(Color1, 6, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6170=no)
							then	{	NextStep(6, 2, 6170)
								}
							else	{	NextStep(6, 2)
								}
						}
				}
			else	{	if	B(not 6170=no)
					then	{	NextStep(6, 2, 6170)
						}
					else	{	NextStep(6, 2)
						}
				}
		};
	if	B(not 6170=no)
	then	{	Sent(6170, 0, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B(tile(Color1, 6, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 6170=no) then NextStep(6, 2, 6170) else NextStep(6, 2) else if B(not 6170=no) then NextStep(6, 2, 6170) else NextStep(6, 2); if B(not 6170=no) then Sent(6170, 0, open, 9); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(tile(Color1, 6, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6170=no)
							then	{	NextStep(6, 2, 6170)
								}
							else	{	NextStep(6, 2)
								}
						}
				}
			else	{	if	B(not 6170=no)
					then	{	NextStep(6, 2, 6170)
						}
					else	{	NextStep(6, 2)
						}
				}
		};
	if	B(not 6170=no)
	then	{	Sent(6170, 0, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	if	B([actionresult([proposal,3,6170,open])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([proposal,3,6170,open])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([proposal,3,6170,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), if B([actionresult([proposal,3,6170,open])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([proposal,3,6170,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,3,6170,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	if	B([actionresult([proposal,3,6170,open])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([proposal,3,6170,open])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([proposal,3,6170,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A1,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A1,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(white, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 6170=no)
					then	{	NextStep(6, 2, 6170)
						}
					else	{	NextStep(6, 2)
						}
				}
		}
	else	{	if	B(not 6170=no)
			then	{	NextStep(6, 2, 6170)
				}
			else	{	NextStep(6, 2)
				}
		};
	if	B(not 6170=no)
	then	{	Sent(6170, 0, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(white, V2))) then if B(700>V2) then if B(not 6170=no) then NextStep(6, 2, 6170) else NextStep(6, 2) else if B(not 6170=no) then NextStep(6, 2, 6170) else NextStep(6, 2); if B(not 6170=no) then Sent(6170, 0, open, 9); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(prohibition(useColor(white, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 6170=no)
					then	{	NextStep(6, 2, 6170)
						}
					else	{	NextStep(6, 2)
						}
				}
		}
	else	{	if	B(not 6170=no)
			then	{	NextStep(6, 2, 6170)
				}
			else	{	NextStep(6, 2)
				}
		};
	if	B(not 6170=no)
	then	{	Sent(6170, 0, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	if	B([actionresult([proposal,3,6170,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,3,6170,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A1,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A1,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), if B([actionresult([proposal,3,6170,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,3,6170,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	if	B([actionresult([proposal,3,6170,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,3,6170,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	B([A1,B]=[4,3]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedEvent(phasechange)
}


[new scheduled]:[B([A1,B]=[4,3]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), ReceivedEvent(phasechange)]
[After]:{	B([A1,B]=[4,3]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedEvent(phasechange)
}


[Planbase]:{	if	B(not 6170=no)
	then	{	NextStep(6, 2, 6170)
		}
	else	{	NextStep(6, 2)
		};
	if	B(not 6170=no)
	then	{	Sent(6170, 0, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedEvent(phasechange)
}


[new scheduled]:[if B(not 6170=no) then NextStep(6, 2, 6170) else NextStep(6, 2); if B(not 6170=no) then Sent(6170, 0, open, 9); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), ReceivedEvent(phasechange)]
[After]:{	if	B(not 6170=no)
	then	{	NextStep(6, 2, 6170)
		}
	else	{	NextStep(6, 2)
		};
	if	B(not 6170=no)
	then	{	Sent(6170, 0, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedEvent(phasechange)
}


[Planbase]:{	B([A1,B]=[3,2]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedEvent(phasechange)
},
{	if	B([actionresult([proposal,3,6170,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[new scheduled]:[B([A1,B]=[3,2]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), ReceivedEvent(phasechange), if B([actionresult([proposal,3,6170,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	B([A1,B]=[3,2]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedEvent(phasechange)
},
{	if	B([actionresult([proposal,3,6170,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 4, 3, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[update, if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, 4, 3, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	update
},
{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 4, 3, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	NextStep(6, 2, 6170);
	if	B(not 6170=no)
	then	{	Sent(6170, 0, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[update, NextStep(6, 2, 6170); if B(not 6170=no) then Sent(6170, 0, open, 9); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	update
},
{	NextStep(6, 2, 6170);
	if	B(not 6170=no)
	then	{	Sent(6170, 0, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(3, 6170, open)
		}
}


[new scheduled]:[update, if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B(proposal=proposal) then ReceivedProposal(3, 6170, open)]
[After]:{	update
},
{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(3, 6170, open)
		}
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated, if B(700>100) then @ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(not 6170=no)
	then	{	Sent(6170, 0, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated, if B(not 6170=no) then Sent(6170, 0, open, 9); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(not 6170=no)
	then	{	Sent(6170, 0, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedProposal(3, 6170, open)
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated, if B(700>100) then @ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), ReceivedProposal(3, 6170, open)]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedProposal(3, 6170, open)
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated, @ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	Sent(6170, 0, open, 9);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated, Sent(6170, 0, open, 9); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	Sent(6170, 0, open, 9);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a30[CTAH] going goal: 4,3 color: blue
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[getScoreAfterExchange(0, 6170); if G(at(A, B, C)) then skip else makeResponse(6170, accept), @ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated, @ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	getScoreAfterExchange(0, 6170);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(6170, accept)
		}
},
{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a10[CTAH] going goal: 3,2 color: blue
[Planbase]:{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[GetPhase(movementphase); B(clock(Clock)); if B(event(phasechange)) then Updated, if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(event(phasechange)) then Updated, if B(10>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	Updated
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[Updated, if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	Updated
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


object notification: Time [clock=11, time=2015-05-27 16:47:59.339]
org notification: Time [clock=11, time=2015-05-27 16:47:59.339]
object notification: Time [clock=11, time=2015-05-27 16:47:59.339]
object notification: Time [clock=11, time=2015-05-27 16:47:59.339]
[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


Event processed UpdateClock(11)
[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(11)
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(11)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(11)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a30[CTAH] paths: 1000
Need to wait 4 more seconds
[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a10[CTAH] paths: 1000
a10[CTAH] path: 0
a10[CTAH] path: 1
a10[CTAH] path: 2
a10[CTAH] path: 3
a10[CTAH] path: 4
a10[CTAH] path: 5
a10[CTAH] path: 6
a10[CTAH] path: 7
a10[CTAH] path: 8
a10[CTAH] path: 9
a10[CTAH] path: 10
a10[CTAH] path: 11
a10[CTAH] path: 12
a10[CTAH] path: 13
a10[CTAH] path: 14
a10[CTAH] path: 15
a10[CTAH] path: 16
a10[CTAH] path: 17
a10[CTAH] path: 18
a10[CTAH] path: 19
a10[CTAH] path: 20
a10[CTAH] path: 21
a10[CTAH] path: 22
a10[CTAH] path: 23
a10[CTAH] path: 24
a10[CTAH] path: 25
a10[CTAH] path: 26
a10[CTAH] path: 27
a10[CTAH] path: 28
a10[CTAH] path: 29
a10[CTAH] path: 30
a10[CTAH] path: 31
a10[CTAH] path: 32
a10[CTAH] path: 33
a10[CTAH] path: 34
a10[CTAH] path: 35
a10[CTAH] path: 36
a10[CTAH] path: 37
a10[CTAH] path: 38
a10[CTAH] path: 39
a10[CTAH] path: 40
a10[CTAH] path: 41
a10[CTAH] path: 42
a10[CTAH] path: 43
a10[CTAH] path: 44
a10[CTAH] path: 45
a10[CTAH] path: 46
a10[CTAH] path: 47
a10[CTAH] path: 48
a10[CTAH] path: 49
a10[CTAH] path: 50
a10[CTAH] path: 51
a10[CTAH] path: 52
a10[CTAH] path: 53
a10[CTAH] path: 54
a10[CTAH] path: 55
a10[CTAH] path: 56
a10[CTAH] path: 57
a10[CTAH] path: 58
a10[CTAH] path: 59
a10[CTAH] path: 60
a10[CTAH] path: 61
a10[CTAH] path: 62
a10[CTAH] path: 63
a10[CTAH] path: 64
a10[CTAH] path: 65
a10[CTAH] path: 66
a10[CTAH] path: 67
a10[CTAH] path: 68
a10[CTAH] path: 69
a10[CTAH] path: 70
a10[CTAH] path: 71
a10[CTAH] path: 72
a10[CTAH] path: 73
a10[CTAH] path: 74
a10[CTAH] path: 75
a10[CTAH] path: 76
a10[CTAH] path: 77
a10[CTAH] path: 78
a10[CTAH] path: 79
a10[CTAH] path: 80
a10[CTAH] path: 81
a10[CTAH] path: 82
a10[CTAH] path: 83
a10[CTAH] path: 84
a10[CTAH] path: 85
a10[CTAH] path: 86
a10[CTAH] path: 87
a10[CTAH] path: 88
a10[CTAH] path: 89
a10[CTAH] path: 90
a10[CTAH] path: 91
a10[CTAH] path: 92
a10[CTAH] path: 93
a10[CTAH] path: 94
a10[CTAH] path: 95
a10[CTAH] path: 96
a10[CTAH] path: 97
a10[CTAH] path: 98
a10[CTAH] path: 99
a10[CTAH] path: 100
a10[CTAH] path: 101
a10[CTAH] path: 102
a10[CTAH] path: 103
a10[CTAH] path: 104
a10[CTAH] path: 105
a10[CTAH] path: 106
a10[CTAH] path: 107
a10[CTAH] path: 108
a10[CTAH] path: 109
a10[CTAH] path: 110
a10[CTAH] path: 111
a10[CTAH] path: 112
a10[CTAH] path: 113
a10[CTAH] path: 114
a10[CTAH] path: 115
a10[CTAH] path: 116
a10[CTAH] path: 117
a10[CTAH] path: 118
a10[CTAH] path: 119
a10[CTAH] path: 120
a10[CTAH] path: 121
a10[CTAH] path: 122
a10[CTAH] path: 123
a10[CTAH] path: 124
a10[CTAH] path: 125
a10[CTAH] path: 126
a10[CTAH] path: 127
a10[CTAH] path: 128
a10[CTAH] path: 129
a10[CTAH] path: 130
a10[CTAH] path: 131
a10[CTAH] path: 132
a10[CTAH] path: 133
a10[CTAH] path: 134
a10[CTAH] path: 135
a10[CTAH] path: 136
a10[CTAH] path: 137
a10[CTAH] path: 138
a10[CTAH] path: 139
a10[CTAH] path: 140
a10[CTAH] path: 141
a10[CTAH] path: 142
a10[CTAH] path: 143
a10[CTAH] path: 144
a10[CTAH] path: 145
a10[CTAH] path: 146
a10[CTAH] path: 147
a10[CTAH] path: 148
a10[CTAH] path: 149
a10[CTAH] path: 150
a10[CTAH] path: 151
a10[CTAH] path: 152
a10[CTAH] path: 153
a10[CTAH] path: 154
a10[CTAH] path: 155
a10[CTAH] path: 156
a10[CTAH] path: 157
a10[CTAH] path: 158
a10[CTAH] path: 159
a10[CTAH] path: 160
a10[CTAH] path: 161
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a10[CTAH] path: 162
[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
a10[CTAH] path: 163
a10[CTAH] path: 164
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a10[CTAH] path: 165
a10[CTAH] path: 166
a10[CTAH] path: 167
a10[CTAH] path: 168
a10[CTAH] path: 169
a10[CTAH] path: 170
a10[CTAH] path: 171
a10[CTAH] path: 172
a10[CTAH] path: 173
a10[CTAH] path: 174
a10[CTAH] path: 175
a10[CTAH] path: 176
a10[CTAH] path: 177
a10[CTAH] path: 178
a10[CTAH] path: 179
a10[CTAH] path: 180
a10[CTAH] path: 181
a10[CTAH] path: 182
a10[CTAH] path: 183
a10[CTAH] path: 184
a10[CTAH] path: 185
a10[CTAH] path: 186
a10[CTAH] path: 187
a10[CTAH] path: 188
a10[CTAH] path: 189
a10[CTAH] path: 190
a10[CTAH] path: 191
a10[CTAH] path: 192
a10[CTAH] path: 193
a10[CTAH] path: 194
a10[CTAH] path: 195
a10[CTAH] path: 196
a10[CTAH] path: 197
a10[CTAH] path: 198
a10[CTAH] path: 199
a10[CTAH] path: 200
a10[CTAH] path: 201
a10[CTAH] path: 202
a10[CTAH] path: 203
a10[CTAH] path: 204
a10[CTAH] path: 205
a10[CTAH] path: 206
a10[CTAH] path: 207
a10[CTAH] path: 208
a10[CTAH] path: 209
a10[CTAH] path: 210
a10[CTAH] path: 211
a10[CTAH] path: 212
a10[CTAH] path: 213
a10[CTAH] path: 214
a10[CTAH] path: 215
a10[CTAH] path: 216
a10[CTAH] path: 217
a10[CTAH] path: 218
a10[CTAH] path: 219
a10[CTAH] path: 220
a10[CTAH] path: 221
a10[CTAH] path: 222
a10[CTAH] path: 223
a10[CTAH] path: 224
a10[CTAH] path: 225
a10[CTAH] path: 226
a10[CTAH] path: 227
a10[CTAH] path: 228
a10[CTAH] path: 229
a10[CTAH] path: 230
a10[CTAH] path: 231
a10[CTAH] path: 232
a10[CTAH] path: 233
a10[CTAH] path: 234
a10[CTAH] path: 235
a10[CTAH] path: 236
a10[CTAH] path: 237
a10[CTAH] path: 238
a10[CTAH] path: 239
a10[CTAH] path: 240
a10[CTAH] path: 241
a10[CTAH] path: 242
a10[CTAH] path: 243
a10[CTAH] path: 244
a10[CTAH] path: 245
a10[CTAH] path: 246
a10[CTAH] path: 247
a10[CTAH] path: 248
a10[CTAH] path: 249
a10[CTAH] path: 250
a10[CTAH] path: 251
a10[CTAH] path: 252
a10[CTAH] path: 253
a10[CTAH] path: 254
a10[CTAH] path: 255
a10[CTAH] path: 256
a10[CTAH] path: 257
a10[CTAH] path: 258
a10[CTAH] path: 259
a10[CTAH] path: 260
a10[CTAH] path: 261
a10[CTAH] path: 262
a10[CTAH] path: 263
a10[CTAH] path: 264
a10[CTAH] path: 265
a10[CTAH] path: 266
a10[CTAH] path: 267
a10[CTAH] path: 268
a10[CTAH] path: 269
a10[CTAH] path: 270
a10[CTAH] path: 271
a10[CTAH] path: 272
a10[CTAH] path: 273
a10[CTAH] path: 274
a10[CTAH] path: 275
a10[CTAH] path: 276
a10[CTAH] path: 277
a10[CTAH] path: 278
a10[CTAH] path: 279
a10[CTAH] path: 280
a10[CTAH] path: 281
a10[CTAH] path: 282
a10[CTAH] path: 283
a10[CTAH] path: 284
a10[CTAH] path: 285
a10[CTAH] path: 286
a10[CTAH] path: 287
a10[CTAH] path: 288
a10[CTAH] path: 289
a10[CTAH] path: 290
a10[CTAH] path: 291
a10[CTAH] path: 292
a10[CTAH] path: 293
a10[CTAH] path: 294
a10[CTAH] path: 295
a10[CTAH] path: 296
a10[CTAH] path: 297
a10[CTAH] path: 298
a10[CTAH] path: 299
a10[CTAH] path: 300
a10[CTAH] path: 301
a10[CTAH] path: 302
a10[CTAH] path: 303
a10[CTAH] path: 304
a10[CTAH] path: 305
a10[CTAH] path: 306
a10[CTAH] path: 307
a10[CTAH] path: 308
a10[CTAH] path: 309
a10[CTAH] path: 310
a10[CTAH] path: 311
a10[CTAH] path: 312
a10[CTAH] path: 313
a10[CTAH] path: 314
a10[CTAH] path: 315
a10[CTAH] path: 316
a10[CTAH] path: 317
a10[CTAH] path: 318
a10[CTAH] path: 319
a10[CTAH] path: 320
a10[CTAH] path: 321
a10[CTAH] path: 322
a10[CTAH] path: 323
a10[CTAH] path: 324
a10[CTAH] path: 325
a10[CTAH] path: 326
a10[CTAH] path: 327
a10[CTAH] path: 328
a10[CTAH] path: 329
a10[CTAH] path: 330
a10[CTAH] path: 331
a10[CTAH] path: 332
a10[CTAH] path: 333
a10[CTAH] path: 334
a10[CTAH] path: 335
a10[CTAH] path: 336
a10[CTAH] path: 337
a10[CTAH] path: 338
a10[CTAH] path: 339
a10[CTAH] path: 340
a10[CTAH] path: 341
a10[CTAH] path: 342
a10[CTAH] path: 343
a10[CTAH] path: 344
a10[CTAH] path: 345
a10[CTAH] path: 346
a10[CTAH] path: 347
a10[CTAH] path: 348
a10[CTAH] path: 349
a10[CTAH] path: 350
a10[CTAH] path: 351
a10[CTAH] path: 352
a10[CTAH] path: 353
a10[CTAH] path: 354
a10[CTAH] path: 355
a10[CTAH] path: 356
a10[CTAH] path: 357
a10[CTAH] path: 358
a10[CTAH] path: 359
a10[CTAH] path: 360
a10[CTAH] path: 361
a10[CTAH] path: 362
a10[CTAH] path: 363
a10[CTAH] path: 364
a10[CTAH] path: 365
a10[CTAH] path: 366
a10[CTAH] path: 367
a10[CTAH] path: 368
a10[CTAH] path: 369
a10[CTAH] path: 370
a10[CTAH] path: 371
a10[CTAH] path: 372
a10[CTAH] path: 373
a10[CTAH] path: 374
a10[CTAH] path: 375
a10[CTAH] path: 376
a10[CTAH] path: 377
a10[CTAH] path: 378
a10[CTAH] path: 379
a10[CTAH] path: 380
a10[CTAH] path: 381
a10[CTAH] path: 382
a10[CTAH] path: 383
a10[CTAH] path: 384
a10[CTAH] path: 385
a10[CTAH] path: 386
a10[CTAH] path: 387
a10[CTAH] path: 388
a10[CTAH] path: 389
a10[CTAH] path: 390
a10[CTAH] path: 391
a10[CTAH] path: 392
a10[CTAH] path: 393
a10[CTAH] path: 394
a10[CTAH] path: 395
a10[CTAH] path: 396
a10[CTAH] path: 397
a10[CTAH] path: 398
a10[CTAH] path: 399
a10[CTAH] path: 400
a10[CTAH] path: 401
a10[CTAH] path: 402
a10[CTAH] path: 403
a10[CTAH] path: 404
a10[CTAH] path: 405
a10[CTAH] path: 406
a10[CTAH] path: 407
a10[CTAH] path: 408
a10[CTAH] path: 409
a10[CTAH] path: 410
a10[CTAH] path: 411
a10[CTAH] path: 412
a10[CTAH] path: 413
a10[CTAH] path: 414
a10[CTAH] path: 415
a10[CTAH] path: 416
a10[CTAH] path: 417
a10[CTAH] path: 418
a10[CTAH] path: 419
a10[CTAH] path: 420
a10[CTAH] path: 421
a10[CTAH] path: 422
a10[CTAH] path: 423
a10[CTAH] path: 424
a10[CTAH] path: 425
a10[CTAH] path: 426
a10[CTAH] path: 427
a10[CTAH] path: 428
a10[CTAH] path: 429
a10[CTAH] path: 430
a10[CTAH] path: 431
a10[CTAH] path: 432
a10[CTAH] path: 433
a10[CTAH] path: 434
a10[CTAH] path: 435
a10[CTAH] path: 436
a10[CTAH] path: 437
a10[CTAH] path: 438
a10[CTAH] path: 439
a10[CTAH] path: 440
a10[CTAH] path: 441
a10[CTAH] path: 442
a10[CTAH] path: 443
a10[CTAH] path: 444
a10[CTAH] path: 445
a10[CTAH] path: 446
a10[CTAH] path: 447
a10[CTAH] path: 448
a10[CTAH] path: 449
a10[CTAH] path: 450
a10[CTAH] path: 451
a10[CTAH] path: 452
a10[CTAH] path: 453
a10[CTAH] path: 454
a10[CTAH] path: 455
a10[CTAH] path: 456
a10[CTAH] path: 457
a10[CTAH] path: 458
a10[CTAH] path: 459
a10[CTAH] path: 460
a10[CTAH] path: 461
a10[CTAH] path: 462
a10[CTAH] path: 463
a10[CTAH] path: 464
a10[CTAH] path: 465
a10[CTAH] path: 466
a10[CTAH] path: 467
a10[CTAH] path: 468
a10[CTAH] path: 469
a10[CTAH] path: 470
a10[CTAH] path: 471
a10[CTAH] path: 472
a10[CTAH] path: 473
a10[CTAH] path: 474
a10[CTAH] path: 475
a10[CTAH] path: 476
a10[CTAH] path: 477
a10[CTAH] path: 478
a10[CTAH] path: 479
a10[CTAH] path: 480
a10[CTAH] path: 481
a10[CTAH] path: 482
a10[CTAH] path: 483
a10[CTAH] path: 484
a10[CTAH] path: 485
a10[CTAH] path: 486
a10[CTAH] path: 487
a10[CTAH] path: 488
a10[CTAH] path: 489
a10[CTAH] path: 490
a10[CTAH] path: 491
a10[CTAH] path: 492
a10[CTAH] path: 493
a10[CTAH] path: 494
a10[CTAH] path: 495
a10[CTAH] path: 496
a10[CTAH] path: 497
a10[CTAH] path: 498
a10[CTAH] path: 499
a10[CTAH] path: 500
a10[CTAH] path: 501
a10[CTAH] path: 502
a10[CTAH] path: 503
a10[CTAH] path: 504
a10[CTAH] path: 505
a10[CTAH] path: 506
a10[CTAH] path: 507
a10[CTAH] path: 508
a10[CTAH] path: 509
a10[CTAH] path: 510
a10[CTAH] path: 511
a10[CTAH] path: 512
a10[CTAH] path: 513
a10[CTAH] path: 514
a10[CTAH] path: 515
a10[CTAH] path: 516
a10[CTAH] path: 517
a10[CTAH] path: 518
a10[CTAH] path: 519
a10[CTAH] path: 520
a10[CTAH] path: 521
a10[CTAH] path: 522
a10[CTAH] path: 523
a10[CTAH] path: 524
a10[CTAH] path: 525
a10[CTAH] path: 526
a10[CTAH] path: 527
a10[CTAH] path: 528
a10[CTAH] path: 529
a10[CTAH] path: 530
a10[CTAH] path: 531
a10[CTAH] path: 532
a10[CTAH] path: 533
a10[CTAH] path: 534
a10[CTAH] path: 535
a10[CTAH] path: 536
a10[CTAH] path: 537
a10[CTAH] path: 538
a10[CTAH] path: 539
a10[CTAH] path: 540
a10[CTAH] path: 541
a10[CTAH] path: 542
a10[CTAH] path: 543
a10[CTAH] path: 544
a10[CTAH] path: 545
a10[CTAH] path: 546
a10[CTAH] path: 547
a10[CTAH] path: 548
a10[CTAH] path: 549
a10[CTAH] path: 550
a10[CTAH] path: 551
a10[CTAH] path: 552
a10[CTAH] path: 553
a10[CTAH] path: 554
a10[CTAH] path: 555
a10[CTAH] path: 556
a10[CTAH] path: 557
a10[CTAH] path: 558
a10[CTAH] path: 559
a10[CTAH] path: 560
a10[CTAH] path: 561
a10[CTAH] path: 562
a10[CTAH] path: 563
a10[CTAH] path: 564
a10[CTAH] path: 565
a10[CTAH] path: 566
a10[CTAH] path: 567
a10[CTAH] path: 568
a10[CTAH] path: 569
a10[CTAH] path: 570
a10[CTAH] path: 571
a10[CTAH] path: 572
a10[CTAH] path: 573
a10[CTAH] path: 574
a10[CTAH] path: 575
a10[CTAH] path: 576
a10[CTAH] path: 577
a10[CTAH] path: 578
a10[CTAH] path: 579
a10[CTAH] path: 580
a10[CTAH] path: 581
a10[CTAH] path: 582
a10[CTAH] path: 583
a10[CTAH] path: 584
a10[CTAH] path: 585
a10[CTAH] path: 586
a10[CTAH] path: 587
a10[CTAH] path: 588
a10[CTAH] path: 589
a10[CTAH] path: 590
a10[CTAH] path: 591
a10[CTAH] path: 592
a10[CTAH] path: 593
a10[CTAH] path: 594
a10[CTAH] path: 595
a10[CTAH] path: 596
a10[CTAH] path: 597
a10[CTAH] path: 598
a10[CTAH] path: 599
a10[CTAH] path: 600
a10[CTAH] path: 601
a10[CTAH] path: 602
a10[CTAH] path: 603
a10[CTAH] path: 604
a10[CTAH] path: 605
a10[CTAH] path: 606
a10[CTAH] path: 607
a10[CTAH] path: 608
a10[CTAH] path: 609
a10[CTAH] path: 610
a10[CTAH] path: 611
a10[CTAH] path: 612
a10[CTAH] path: 613
a10[CTAH] path: 614
a10[CTAH] path: 615
a10[CTAH] path: 616
a10[CTAH] path: 617
a10[CTAH] path: 618
a10[CTAH] path: 619
a10[CTAH] path: 620
a10[CTAH] path: 621
a10[CTAH] path: 622
a10[CTAH] path: 623
a10[CTAH] path: 624
a10[CTAH] path: 625
a10[CTAH] path: 626
a10[CTAH] path: 627
a10[CTAH] path: 628
a10[CTAH] path: 629
a10[CTAH] path: 630
a10[CTAH] path: 631
a10[CTAH] path: 632
a10[CTAH] path: 633
a10[CTAH] path: 634
a10[CTAH] path: 635
a10[CTAH] path: 636
a10[CTAH] path: 637
a10[CTAH] path: 638
a10[CTAH] path: 639
a10[CTAH] path: 640
a10[CTAH] path: 641
a10[CTAH] path: 642
a10[CTAH] path: 643
a10[CTAH] path: 644
a10[CTAH] path: 645
a10[CTAH] path: 646
a10[CTAH] path: 647
a10[CTAH] path: 648
a10[CTAH] path: 649
a10[CTAH] path: 650
a10[CTAH] path: 651
a10[CTAH] path: 652
a10[CTAH] path: 653
a10[CTAH] path: 654
a10[CTAH] path: 655
a10[CTAH] path: 656
a10[CTAH] path: 657
a10[CTAH] path: 658
a10[CTAH] path: 659
a10[CTAH] path: 660
a10[CTAH] path: 661
a10[CTAH] path: 662
a10[CTAH] path: 663
a10[CTAH] path: 664
a10[CTAH] path: 665
a10[CTAH] path: 666
a10[CTAH] path: 667
a10[CTAH] path: 668
a10[CTAH] path: 669
a10[CTAH] path: 670
a10[CTAH] path: 671
a10[CTAH] path: 672
a10[CTAH] path: 673
a10[CTAH] path: 674
a10[CTAH] path: 675
a10[CTAH] path: 676
a10[CTAH] path: 677
a10[CTAH] path: 678
a10[CTAH] path: 679
a10[CTAH] path: 680
a10[CTAH] path: 681
a10[CTAH] path: 682
a10[CTAH] path: 683
a10[CTAH] path: 684
a10[CTAH] path: 685
a10[CTAH] path: 686
a10[CTAH] path: 687
a10[CTAH] path: 688
a10[CTAH] path: 689
a10[CTAH] path: 690
a10[CTAH] path: 691
a10[CTAH] path: 692
a10[CTAH] path: 693
a10[CTAH] path: 694
a10[CTAH] path: 695
a10[CTAH] path: 696
a10[CTAH] path: 697
a10[CTAH] path: 698
a10[CTAH] path: 699
a10[CTAH] path: 700
a10[CTAH] path: 701
a10[CTAH] path: 702
a10[CTAH] path: 703
a10[CTAH] path: 704
a10[CTAH] path: 705
a10[CTAH] path: 706
a10[CTAH] path: 707
a10[CTAH] path: 708
a10[CTAH] path: 709
a10[CTAH] path: 710
a10[CTAH] path: 711
a10[CTAH] path: 712
a10[CTAH] path: 713
a10[CTAH] path: 714
a10[CTAH] path: 715
a10[CTAH] path: 716
a10[CTAH] path: 717
a10[CTAH] path: 718
a10[CTAH] path: 719
a10[CTAH] path: 720
a10[CTAH] path: 721
a10[CTAH] path: 722
a10[CTAH] path: 723
a10[CTAH] path: 724
a10[CTAH] path: 725
a10[CTAH] path: 726
a10[CTAH] path: 727
a10[CTAH] path: 728
a10[CTAH] path: 729
a10[CTAH] path: 730
a10[CTAH] path: 731
a10[CTAH] path: 732
a10[CTAH] path: 733
a10[CTAH] path: 734
a10[CTAH] path: 735
a10[CTAH] path: 736
a10[CTAH] path: 737
a10[CTAH] path: 738
a10[CTAH] path: 739
a10[CTAH] path: 740
a10[CTAH] path: 741
a10[CTAH] path: 742
a10[CTAH] path: 743
a10[CTAH] path: 744
a10[CTAH] path: 745
a10[CTAH] path: 746
a10[CTAH] path: 747
a10[CTAH] path: 748
a10[CTAH] path: 749
a10[CTAH] path: 750
a10[CTAH] path: 751
a10[CTAH] path: 752
a10[CTAH] path: 753
a10[CTAH] path: 754
a10[CTAH] path: 755
a10[CTAH] path: 756
a10[CTAH] path: 757
a10[CTAH] path: 758
a10[CTAH] path: 759
a10[CTAH] path: 760
a10[CTAH] path: 761
a10[CTAH] path: 762
a10[CTAH] path: 763
a10[CTAH] path: 764
a10[CTAH] path: 765
a10[CTAH] path: 766
a10[CTAH] path: 767
a10[CTAH] path: 768
a10[CTAH] path: 769
a10[CTAH] path: 770
a10[CTAH] path: 771
a10[CTAH] path: 772
a10[CTAH] path: 773
a10[CTAH] path: 774
a10[CTAH] path: 775
a10[CTAH] path: 776
a10[CTAH] path: 777
a10[CTAH] path: 778
a10[CTAH] path: 779
a10[CTAH] path: 780
a10[CTAH] path: 781
a10[CTAH] path: 782
a10[CTAH] path: 783
a10[CTAH] path: 784
a10[CTAH] path: 785
a10[CTAH] path: 786
a10[CTAH] path: 787
a10[CTAH] path: 788
a10[CTAH] path: 789
a10[CTAH] path: 790
a10[CTAH] path: 791
a10[CTAH] path: 792
a10[CTAH] path: 793
a10[CTAH] path: 794
a10[CTAH] path: 795
a10[CTAH] path: 796
a10[CTAH] path: 797
a10[CTAH] path: 798
a10[CTAH] path: 799
a10[CTAH] path: 800
a10[CTAH] path: 801
a10[CTAH] path: 802
a10[CTAH] path: 803
a10[CTAH] path: 804
a10[CTAH] path: 805
a10[CTAH] path: 806
a10[CTAH] path: 807
a10[CTAH] path: 808
a10[CTAH] path: 809
a10[CTAH] path: 810
a10[CTAH] path: 811
a10[CTAH] path: 812
a10[CTAH] path: 813
a10[CTAH] path: 814
a10[CTAH] path: 815
a10[CTAH] path: 816
a10[CTAH] path: 817
a10[CTAH] path: 818
a10[CTAH] path: 819
a10[CTAH] path: 820
a10[CTAH] path: 821
a10[CTAH] path: 822
a10[CTAH] path: 823
a10[CTAH] path: 824
a10[CTAH] path: 825
a10[CTAH] path: 826
a10[CTAH] path: 827
a10[CTAH] path: 828
a10[CTAH] path: 829
a10[CTAH] path: 830
a10[CTAH] path: 831
a10[CTAH] path: 832
a10[CTAH] path: 833
a10[CTAH] path: 834
a10[CTAH] path: 835
a10[CTAH] path: 836
a10[CTAH] path: 837
a10[CTAH] path: 838
a10[CTAH] path: 839
a10[CTAH] path: 840
a10[CTAH] path: 841
a10[CTAH] path: 842
a10[CTAH] path: 843
a10[CTAH] path: 844
a10[CTAH] path: 845
a10[CTAH] path: 846
a10[CTAH] path: 847
a10[CTAH] path: 848
a10[CTAH] path: 849
a10[CTAH] path: 850
a10[CTAH] path: 851
a10[CTAH] path: 852
a10[CTAH] path: 853
a10[CTAH] path: 854
a10[CTAH] path: 855
a10[CTAH] path: 856
a10[CTAH] path: 857
a10[CTAH] path: 858
a10[CTAH] path: 859
a10[CTAH] path: 860
a10[CTAH] path: 861
a10[CTAH] path: 862
a10[CTAH] path: 863
a10[CTAH] path: 864
a10[CTAH] path: 865
a10[CTAH] path: 866
a10[CTAH] path: 867
a10[CTAH] path: 868
a10[CTAH] path: 869
a10[CTAH] path: 870
a10[CTAH] path: 871
a10[CTAH] path: 872
a10[CTAH] path: 873
a10[CTAH] path: 874
a10[CTAH] path: 875
a10[CTAH] path: 876
a10[CTAH] path: 877
a10[CTAH] path: 878
a10[CTAH] path: 879
a10[CTAH] path: 880
a10[CTAH] path: 881
a10[CTAH] path: 882
a10[CTAH] path: 883
a10[CTAH] path: 884
a10[CTAH] path: 885
a10[CTAH] path: 886
a10[CTAH] path: 887
a10[CTAH] path: 888
a10[CTAH] path: 889
a10[CTAH] path: 890
a10[CTAH] path: 891
a10[CTAH] path: 892
a10[CTAH] path: 893
a10[CTAH] path: 894
a10[CTAH] path: 895
a10[CTAH] path: 896
a10[CTAH] path: 897
a10[CTAH] path: 898
a10[CTAH] path: 899
a10[CTAH] path: 900
a10[CTAH] path: 901
a10[CTAH] path: 902
a10[CTAH] path: 903
a10[CTAH] path: 904
a10[CTAH] path: 905
a10[CTAH] path: 906
a10[CTAH] path: 907
a10[CTAH] path: 908
a10[CTAH] path: 909
a10[CTAH] path: 910
a10[CTAH] path: 911
a10[CTAH] path: 912
a10[CTAH] path: 913
a10[CTAH] path: 914
a10[CTAH] path: 915
a10[CTAH] path: 916
a10[CTAH] path: 917
a10[CTAH] path: 918
a10[CTAH] path: 919
a10[CTAH] path: 920
a10[CTAH] path: 921
a10[CTAH] path: 922
a10[CTAH] path: 923
a10[CTAH] path: 924
a10[CTAH] path: 925
a10[CTAH] path: 926
a10[CTAH] path: 927
a10[CTAH] path: 928
a10[CTAH] path: 929
a10[CTAH] path: 930
a10[CTAH] path: 931
a10[CTAH] path: 932
a10[CTAH] path: 933
a10[CTAH] path: 934
a10[CTAH] path: 935
a10[CTAH] path: 936
a10[CTAH] path: 937
a10[CTAH] path: 938
a10[CTAH] path: 939
a10[CTAH] path: 940
a10[CTAH] path: 941
a10[CTAH] path: 942
a10[CTAH] path: 943
a10[CTAH] path: 944
a10[CTAH] path: 945
a10[CTAH] path: 946
a10[CTAH] path: 947
a10[CTAH] path: 948
a10[CTAH] path: 949
a10[CTAH] path: 950
a10[CTAH] path: 951
a10[CTAH] path: 952
a10[CTAH] path: 953
a10[CTAH] path: 954
a10[CTAH] path: 955
a10[CTAH] path: 956
a10[CTAH] path: 957
a10[CTAH] path: 958
a10[CTAH] path: 959
a10[CTAH] path: 960
a10[CTAH] path: 961
a10[CTAH] path: 962
a10[CTAH] path: 963
a10[CTAH] path: 964
a10[CTAH] path: 965
a10[CTAH] path: 966
a10[CTAH] path: 967
a10[CTAH] path: 968
a10[CTAH] path: 969
a10[CTAH] path: 970
a10[CTAH] path: 971
a10[CTAH] path: 972
a10[CTAH] path: 973
a10[CTAH] path: 974
a10[CTAH] path: 975
a10[CTAH] path: 976
a10[CTAH] path: 977
a10[CTAH] path: 978
a10[CTAH] path: 979
a10[CTAH] path: 980
a10[CTAH] path: 981
a10[CTAH] path: 982
a10[CTAH] path: 983
a10[CTAH] path: 984
a10[CTAH] path: 985
a10[CTAH] path: 986
a10[CTAH] path: 987
a10[CTAH] path: 988
a10[CTAH] path: 989
a10[CTAH] path: 990
a10[CTAH] path: 991
a10[CTAH] path: 992
a10[CTAH] path: 993
a10[CTAH] path: 994
a10[CTAH] path: 995
a10[CTAH] path: 996
a10[CTAH] path: 997
a10[CTAH] path: 998
a10[CTAH] path: 999
a10[CTAH] moveStepToGoalTest havent found anything
[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


Event processed UpdateClock(11)
[Planbase]:{	GetScoreAfterExchange(6170, yes);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(6170, accept)
		}
},
{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(11)
}


[new scheduled]:[GetScoreAfterExchange(6170, yes); if G(at(A, B, C)) then skip else makeResponse(6170, accept), GetPhase(movementphase); B(clock(Clock)); if B(event(phasechange)) then Updated, if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(11)]
[After]:{	GetScoreAfterExchange(6170, yes);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(6170, accept)
		}
},
{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(11)
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(6170, accept)
		}
},
{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(scoreAfterExchange(6170, Score))
	then	{	respond(6170, 700)
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if G(at(A, B, C)) then skip else makeResponse(6170, accept), B(clock(Clock)); if B(event(phasechange)) then Updated, if B(scoreAfterExchange(6170, Score)) then respond(6170, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(6170, accept)
		}
},
{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(scoreAfterExchange(6170, Score))
	then	{	respond(6170, 700)
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	skip
},
{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	respond(6170, 700)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[skip, if B(event(phasechange)) then Updated, respond(6170, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	skip
},
{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	respond(6170, 700)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	Updated
},
{	B(ANSWER=accept);
	if	B(not yes=yes)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2<700)
					then	{	B(ANSWER=reject)
						}
				}
		};
	makeResponse(6170, ANSWER)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[Updated, B(ANSWER=accept); if B(not yes=yes) then if B(prohibition(rejectRequests(V2))) then if B(V2<700) then B(ANSWER=reject); makeResponse(6170, ANSWER), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	Updated
},
{	B(ANSWER=accept);
	if	B(not yes=yes)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2<700)
					then	{	B(ANSWER=reject)
						}
				}
		};
	makeResponse(6170, ANSWER)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not yes=yes)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2<700)
					then	{	B(accept=reject)
						}
				}
		};
	makeResponse(6170, accept)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(not yes=yes) then if B(prohibition(rejectRequests(V2))) then if B(V2<700) then B(accept=reject); makeResponse(6170, accept), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(not yes=yes)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2<700)
					then	{	B(accept=reject)
						}
				}
		};
	makeResponse(6170, accept)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	makeResponse(6170, accept)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[makeResponse(6170, accept), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	makeResponse(6170, accept)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	sendResponse(accept, 6170)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[sendResponse(accept, 6170), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	sendResponse(accept, 6170)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(sendResponse(6170, accept),L1,0);
	Sent(accept, 6170)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(sendResponse(6170, accept),L1,0); Sent(accept, 6170), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(sendResponse(6170, accept),L1,0);
	Sent(accept, 6170)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a10[CTAH] sent response: Discourse Message...
From PerGameId: 0.
To PerGameId: 3.

Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 3
[MSG] i'm: 3
AGENT : got response to offer
org notification: Response [id=6170, response=rejected, clock=11, time=2015-05-27 16:48:06.761]
Event processed @ctenv(functionToList(message(response, 6170, reject)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(functionToList(message(response, 6170, reject)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), @ctenv(functionToList(message(response, 6170, reject)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(functionToList(message(response, 6170, reject)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@3a0c6cd1
[CTAH] The created APLList : [response,6170,reject]
[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A1,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A1,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([response,6170,reject])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,6170,reject])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,6170,reject])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B([actionresult([response,6170,reject])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([response,6170,reject])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([response,6170,reject])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([response,6170,reject])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,6170,reject])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,6170,reject])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	B([A1,B]=[3,2]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[B([A1,B]=[3,2]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	B([A1,B]=[3,2]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(reject, 6170)
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(response=response) then ReceivedMessage(reject, 6170)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(reject, 6170)
		}
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	ReceivedMessage(reject, 6170)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), ReceivedMessage(reject, 6170)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedMessage(reject, 6170)
}


[Planbase]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(700>100) then @ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(6, 2, 6170); ReceivedMessage(noresponse, 6170)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(6, 2, 6170);
			ReceivedMessage(noresponse, 6170)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a10[CTAH] going goal: 3,2 color: blue
[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoal(neco, 6, 2),L2,0);
	if	B(L2=[actionresult([6,2])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 2, Clock)
		};
	NoNextStep(6, 2, 6170);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoal(neco, 6, 2),L2,0); if B(L2=[actionresult([6,2])]) then {B(clock(Clock)); UpdatePosition(6, 2, Clock)}; NoNextStep(6, 2, 6170); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoal(neco, 6, 2),L2,0);
	if	B(L2=[actionresult([6,2])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 2, Clock)
		};
	NoNextStep(6, 2, 6170);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


Need to wait 4 more seconds
org notification: Position [subject=a40, id=null, cell=Cell [x=6, y=2], time=2015-05-27 16:48:07.358, clock=11]
object notification: Position [subject=a40, id=null, cell=Cell [x=6, y=2], time=2015-05-27 16:48:07.358, clock=11]
a30[CTAH] path: 0
a30[CTAH] path: 1
a30[CTAH] path: 2
a30[CTAH] path: 3
a30[CTAH] path: 4
a30[CTAH] path: 5
a30[CTAH] path: 6
a30[CTAH] path: 7
a30[CTAH] path: 8
a30[CTAH] path: 9
a30[CTAH] path: 10
a30[CTAH] path: 11
a30[CTAH] path: 12
a30[CTAH] path: 13
a30[CTAH] path: 14
a30[CTAH] path: 15
a30[CTAH] path: 16
a30[CTAH] path: 17
a30[CTAH] path: 18
a30[CTAH] path: 19
a30[CTAH] path: 20
a30[CTAH] path: 21
a30[CTAH] path: 22
a30[CTAH] path: 23
a30[CTAH] path: 24
a30[CTAH] path: 25
a30[CTAH] path: 26
a30[CTAH] path: 27
a30[CTAH] path: 28
a30[CTAH] path: 29
a30[CTAH] path: 30
a30[CTAH] path: 31
a30[CTAH] path: 32
a30[CTAH] path: 33
a30[CTAH] path: 34
a30[CTAH] path: 35
a30[CTAH] path: 36
a30[CTAH] path: 37
a30[CTAH] path: 38
a30[CTAH] path: 39
a30[CTAH] path: 40
a30[CTAH] path: 41
a30[CTAH] path: 42
a30[CTAH] path: 43
a30[CTAH] path: 44
a30[CTAH] path: 45
a30[CTAH] path: 46
a30[CTAH] path: 47
a30[CTAH] path: 48
a30[CTAH] path: 49
a30[CTAH] path: 50
a30[CTAH] path: 51
a30[CTAH] path: 52
a30[CTAH] path: 53
a30[CTAH] path: 54
a30[CTAH] path: 55
a30[CTAH] path: 56
a30[CTAH] path: 57
a30[CTAH] path: 58
a30[CTAH] path: 59
a30[CTAH] path: 60
a30[CTAH] path: 61
a30[CTAH] path: 62
a30[CTAH] path: 63
a30[CTAH] path: 64
a30[CTAH] path: 65
a30[CTAH] path: 66
a30[CTAH] path: 67
a30[CTAH] path: 68
a30[CTAH] path: 69
a30[CTAH] path: 70
a30[CTAH] path: 71
a30[CTAH] path: 72
a30[CTAH] path: 73
a30[CTAH] path: 74
a30[CTAH] path: 75
a30[CTAH] path: 76
a30[CTAH] path: 77
a30[CTAH] path: 78
a30[CTAH] path: 79
a30[CTAH] path: 80
a30[CTAH] path: 81
a30[CTAH] path: 82
a30[CTAH] path: 83
a30[CTAH] path: 84
a30[CTAH] path: 85
a30[CTAH] path: 86
a30[CTAH] path: 87
a30[CTAH] path: 88
a30[CTAH] path: 89
a30[CTAH] path: 90
a30[CTAH] path: 91
a30[CTAH] path: 92
a30[CTAH] path: 93
a30[CTAH] path: 94
a30[CTAH] path: 95
a30[CTAH] path: 96
a30[CTAH] path: 97
a30[CTAH] path: 98
a30[CTAH] path: 99
a30[CTAH] path: 100
a30[CTAH] path: 101
a30[CTAH] path: 102
a30[CTAH] path: 103
a30[CTAH] path: 104
a30[CTAH] path: 105
a30[CTAH] path: 106
a30[CTAH] path: 107
a30[CTAH] path: 108
a30[CTAH] path: 109
a30[CTAH] path: 110
a30[CTAH] path: 111
a30[CTAH] path: 112
a30[CTAH] path: 113
a30[CTAH] path: 114
a30[CTAH] path: 115
a30[CTAH] path: 116
a30[CTAH] path: 117
a30[CTAH] path: 118
a30[CTAH] path: 119
a30[CTAH] path: 120
a30[CTAH] path: 121
a30[CTAH] path: 122
a30[CTAH] path: 123
a30[CTAH] path: 124
a30[CTAH] path: 125
a30[CTAH] path: 126
a30[CTAH] path: 127
a30[CTAH] path: 128
a30[CTAH] path: 129
a30[CTAH] path: 130
a30[CTAH] path: 131
a30[CTAH] path: 132
a30[CTAH] path: 133
a30[CTAH] path: 134
a30[CTAH] path: 135
a30[CTAH] path: 136
a30[CTAH] path: 137
a30[CTAH] path: 138
a30[CTAH] path: 139
a30[CTAH] path: 140
a30[CTAH] path: 141
a30[CTAH] path: 142
a30[CTAH] path: 143
a30[CTAH] path: 144
a30[CTAH] path: 145
a30[CTAH] path: 146
a30[CTAH] path: 147
a30[CTAH] path: 148
a30[CTAH] path: 149
a30[CTAH] path: 150
a30[CTAH] path: 151
a30[CTAH] path: 152
a30[CTAH] path: 153
a30[CTAH] path: 154
a30[CTAH] path: 155
a30[CTAH] path: 156
a30[CTAH] path: 157
a30[CTAH] path: 158
a30[CTAH] path: 159
a30[CTAH] path: 160
a30[CTAH] path: 161
a30[CTAH] path: 162
a30[CTAH] path: 163
a30[CTAH] path: 164
a30[CTAH] path: 165
a30[CTAH] path: 166
a30[CTAH] path: 167
a30[CTAH] path: 168
a30[CTAH] path: 169
a30[CTAH] path: 170
a30[CTAH] path: 171
a30[CTAH] path: 172
a30[CTAH] path: 173
a30[CTAH] path: 174
a30[CTAH] path: 175
a30[CTAH] path: 176
a30[CTAH] path: 177
a30[CTAH] path: 178
a30[CTAH] path: 179
a30[CTAH] path: 180
a30[CTAH] path: 181
a30[CTAH] path: 182
a30[CTAH] path: 183
a30[CTAH] path: 184
a30[CTAH] path: 185
a30[CTAH] path: 186
a30[CTAH] path: 187
a30[CTAH] path: 188
a30[CTAH] path: 189
a30[CTAH] path: 190
a30[CTAH] path: 191
a30[CTAH] path: 192
a30[CTAH] path: 193
a30[CTAH] path: 194
a30[CTAH] path: 195
a30[CTAH] path: 196
a30[CTAH] path: 197
a30[CTAH] path: 198
a30[CTAH] path: 199
a30[CTAH] path: 200
a30[CTAH] path: 201
a30[CTAH] path: 202
a30[CTAH] path: 203
a30[CTAH] path: 204
a30[CTAH] path: 205
a30[CTAH] path: 206
a30[CTAH] path: 207
a30[CTAH] path: 208
a30[CTAH] path: 209
a30[CTAH] path: 210
a30[CTAH] path: 211
a30[CTAH] path: 212
a30[CTAH] path: 213
a30[CTAH] path: 214
a30[CTAH] path: 215
a30[CTAH] path: 216
a30[CTAH] path: 217
a30[CTAH] path: 218
a30[CTAH] path: 219
a30[CTAH] path: 220
a30[CTAH] path: 221
a30[CTAH] path: 222
a30[CTAH] path: 223
a30[CTAH] path: 224
a30[CTAH] path: 225
a30[CTAH] path: 226
a30[CTAH] path: 227
a30[CTAH] path: 228
a30[CTAH] path: 229
a30[CTAH] path: 230
a30[CTAH] path: 231
a30[CTAH] path: 232
a30[CTAH] path: 233
a30[CTAH] path: 234
a30[CTAH] path: 235
a30[CTAH] path: 236
a30[CTAH] path: 237
a30[CTAH] path: 238
a30[CTAH] path: 239
a30[CTAH] path: 240
a30[CTAH] path: 241
a30[CTAH] path: 242
a30[CTAH] path: 243
a30[CTAH] path: 244
a30[CTAH] path: 245
a30[CTAH] path: 246
a30[CTAH] path: 247
a30[CTAH] path: 248
a30[CTAH] path: 249
a30[CTAH] path: 250
a30[CTAH] path: 251
a30[CTAH] path: 252
a30[CTAH] path: 253
a30[CTAH] path: 254
a30[CTAH] path: 255
a30[CTAH] path: 256
a30[CTAH] path: 257
a30[CTAH] path: 258
a30[CTAH] path: 259
a30[CTAH] path: 260
a30[CTAH] path: 261
a30[CTAH] path: 262
a30[CTAH] path: 263
a30[CTAH] path: 264
a30[CTAH] path: 265
a30[CTAH] path: 266
a30[CTAH] path: 267
a30[CTAH] path: 268
a30[CTAH] path: 269
a30[CTAH] path: 270
a30[CTAH] path: 271
a30[CTAH] path: 272
a30[CTAH] path: 273
a30[CTAH] path: 274
a30[CTAH] path: 275
a30[CTAH] path: 276
a30[CTAH] path: 277
a30[CTAH] path: 278
a30[CTAH] path: 279
a30[CTAH] path: 280
a30[CTAH] path: 281
a30[CTAH] path: 282
a30[CTAH] path: 283
a30[CTAH] path: 284
a30[CTAH] path: 285
a30[CTAH] path: 286
a30[CTAH] path: 287
a30[CTAH] path: 288
a30[CTAH] path: 289
a30[CTAH] path: 290
a30[CTAH] path: 291
a30[CTAH] path: 292
a30[CTAH] path: 293
a30[CTAH] path: 294
a30[CTAH] path: 295
a30[CTAH] path: 296
a30[CTAH] path: 297
a30[CTAH] path: 298
a30[CTAH] path: 299
a30[CTAH] path: 300
a30[CTAH] path: 301
a30[CTAH] path: 302
a30[CTAH] path: 303
a30[CTAH] path: 304
a30[CTAH] path: 305
a30[CTAH] path: 306
a30[CTAH] path: 307
a30[CTAH] path: 308
a30[CTAH] path: 309
a30[CTAH] path: 310
a30[CTAH] path: 311
a30[CTAH] path: 312
a30[CTAH] path: 313
a30[CTAH] path: 314
a30[CTAH] path: 315
a30[CTAH] path: 316
a30[CTAH] path: 317
a30[CTAH] path: 318
a30[CTAH] path: 319
a30[CTAH] path: 320
a30[CTAH] path: 321
a30[CTAH] path: 322
a30[CTAH] path: 323
a30[CTAH] path: 324
a30[CTAH] path: 325
a30[CTAH] path: 326
a30[CTAH] path: 327
a30[CTAH] path: 328
a30[CTAH] path: 329
a30[CTAH] path: 330
a30[CTAH] path: 331
a30[CTAH] path: 332
a30[CTAH] path: 333
a30[CTAH] path: 334
a30[CTAH] path: 335
a30[CTAH] path: 336
a30[CTAH] path: 337
a30[CTAH] path: 338
a30[CTAH] path: 339
a30[CTAH] path: 340
a30[CTAH] path: 341
a30[CTAH] path: 342
a30[CTAH] path: 343
a30[CTAH] path: 344
a30[CTAH] path: 345
a30[CTAH] path: 346
a30[CTAH] path: 347
a30[CTAH] path: 348
a30[CTAH] path: 349
a30[CTAH] path: 350
a30[CTAH] path: 351
a30[CTAH] path: 352
a30[CTAH] path: 353
a30[CTAH] path: 354
a30[CTAH] path: 355
a30[CTAH] path: 356
a30[CTAH] path: 357
a30[CTAH] path: 358
a30[CTAH] path: 359
a30[CTAH] path: 360
a30[CTAH] path: 361
a30[CTAH] path: 362
a30[CTAH] path: 363
a30[CTAH] path: 364
a30[CTAH] path: 365
a30[CTAH] path: 366
a30[CTAH] path: 367
a30[CTAH] path: 368
a30[CTAH] path: 369
a30[CTAH] path: 370
a30[CTAH] path: 371
a30[CTAH] path: 372
a30[CTAH] path: 373
a30[CTAH] path: 374
a30[CTAH] path: 375
a30[CTAH] path: 376
a30[CTAH] path: 377
a30[CTAH] path: 378
a30[CTAH] path: 379
a30[CTAH] path: 380
a30[CTAH] path: 381
a30[CTAH] path: 382
a30[CTAH] path: 383
a30[CTAH] path: 384
a30[CTAH] path: 385
a30[CTAH] path: 386
a30[CTAH] path: 387
a30[CTAH] path: 388
a30[CTAH] path: 389
a30[CTAH] path: 390
a30[CTAH] path: 391
a30[CTAH] path: 392
a30[CTAH] path: 393
a30[CTAH] path: 394
a30[CTAH] path: 395
a30[CTAH] path: 396
a30[CTAH] path: 397
a30[CTAH] path: 398
a30[CTAH] path: 399
a30[CTAH] path: 400
a30[CTAH] path: 401
a30[CTAH] path: 402
a30[CTAH] path: 403
a30[CTAH] path: 404
a30[CTAH] path: 405
a30[CTAH] path: 406
a30[CTAH] path: 407
a30[CTAH] path: 408
a30[CTAH] path: 409
a30[CTAH] path: 410
a30[CTAH] path: 411
a30[CTAH] path: 412
a30[CTAH] path: 413
a30[CTAH] path: 414
a30[CTAH] path: 415
a30[CTAH] path: 416
a30[CTAH] path: 417
a30[CTAH] path: 418
a30[CTAH] path: 419
a30[CTAH] path: 420
a30[CTAH] path: 421
a30[CTAH] path: 422
a30[CTAH] path: 423
a30[CTAH] path: 424
a30[CTAH] path: 425
a30[CTAH] path: 426
a30[CTAH] path: 427
a30[CTAH] path: 428
a30[CTAH] path: 429
a30[CTAH] path: 430
a30[CTAH] path: 431
a30[CTAH] path: 432
a30[CTAH] path: 433
a30[CTAH] path: 434
a30[CTAH] path: 435
a30[CTAH] path: 436
a30[CTAH] path: 437
a30[CTAH] path: 438
a30[CTAH] path: 439
a30[CTAH] path: 440
a30[CTAH] path: 441
a30[CTAH] path: 442
a30[CTAH] path: 443
a30[CTAH] path: 444
a30[CTAH] path: 445
a30[CTAH] path: 446
a30[CTAH] path: 447
a30[CTAH] path: 448
a30[CTAH] path: 449
a30[CTAH] path: 450
a30[CTAH] path: 451
a30[CTAH] path: 452
a30[CTAH] path: 453
a30[CTAH] path: 454
a30[CTAH] path: 455
a30[CTAH] path: 456
a30[CTAH] path: 457
a30[CTAH] path: 458
a30[CTAH] path: 459
a30[CTAH] path: 460
a30[CTAH] path: 461
a30[CTAH] path: 462
a30[CTAH] path: 463
a30[CTAH] path: 464
a30[CTAH] path: 465
a30[CTAH] path: 466
a30[CTAH] path: 467
a30[CTAH] path: 468
a30[CTAH] path: 469
a30[CTAH] path: 470
a30[CTAH] path: 471
a30[CTAH] path: 472
a30[CTAH] path: 473
a30[CTAH] path: 474
a30[CTAH] path: 475
a30[CTAH] path: 476
a30[CTAH] path: 477
a30[CTAH] path: 478
a30[CTAH] path: 479
a30[CTAH] path: 480
a30[CTAH] path: 481
a30[CTAH] path: 482
a30[CTAH] path: 483
a30[CTAH] path: 484
a30[CTAH] path: 485
a30[CTAH] path: 486
a30[CTAH] path: 487
a30[CTAH] path: 488
a30[CTAH] path: 489
a30[CTAH] path: 490
a30[CTAH] path: 491
a30[CTAH] path: 492
a30[CTAH] path: 493
a30[CTAH] path: 494
a30[CTAH] path: 495
a30[CTAH] path: 496
a30[CTAH] path: 497
a30[CTAH] path: 498
a30[CTAH] path: 499
a30[CTAH] path: 500
a30[CTAH] path: 501
a30[CTAH] path: 502
a30[CTAH] path: 503
a30[CTAH] path: 504
a30[CTAH] path: 505
a30[CTAH] path: 506
a30[CTAH] path: 507
a30[CTAH] path: 508
a30[CTAH] path: 509
a30[CTAH] path: 510
a30[CTAH] path: 511
a30[CTAH] path: 512
a30[CTAH] path: 513
a30[CTAH] path: 514
a30[CTAH] path: 515
a30[CTAH] path: 516
a30[CTAH] path: 517
a30[CTAH] path: 518
a30[CTAH] path: 519
a30[CTAH] path: 520
a30[CTAH] path: 521
a30[CTAH] path: 522
a30[CTAH] path: 523
a30[CTAH] path: 524
a30[CTAH] path: 525
a30[CTAH] path: 526
a30[CTAH] path: 527
a30[CTAH] path: 528
a30[CTAH] path: 529
a30[CTAH] path: 530
a30[CTAH] path: 531
a30[CTAH] path: 532
a30[CTAH] path: 533
a30[CTAH] path: 534
a30[CTAH] path: 535
a30[CTAH] path: 536
a30[CTAH] path: 537
a30[CTAH] path: 538
a30[CTAH] path: 539
a30[CTAH] path: 540
a30[CTAH] path: 541
a30[CTAH] path: 542
a30[CTAH] path: 543
a30[CTAH] path: 544
a30[CTAH] path: 545
a30[CTAH] path: 546
a30[CTAH] path: 547
a30[CTAH] path: 548
a30[CTAH] path: 549
a30[CTAH] path: 550
a30[CTAH] path: 551
a30[CTAH] path: 552
a30[CTAH] path: 553
a30[CTAH] path: 554
a30[CTAH] path: 555
a30[CTAH] path: 556
a30[CTAH] path: 557
a30[CTAH] path: 558
a30[CTAH] path: 559
a30[CTAH] path: 560
a30[CTAH] path: 561
a30[CTAH] path: 562
a30[CTAH] path: 563
a30[CTAH] path: 564
a30[CTAH] path: 565
a30[CTAH] path: 566
a30[CTAH] path: 567
a30[CTAH] path: 568
a30[CTAH] path: 569
a30[CTAH] path: 570
a30[CTAH] path: 571
a30[CTAH] path: 572
a30[CTAH] path: 573
a30[CTAH] path: 574
a30[CTAH] path: 575
a30[CTAH] path: 576
a30[CTAH] path: 577
a30[CTAH] path: 578
a30[CTAH] path: 579
a30[CTAH] path: 580
a30[CTAH] path: 581
a30[CTAH] path: 582
a30[CTAH] path: 583
a30[CTAH] path: 584
a30[CTAH] path: 585
a30[CTAH] path: 586
a30[CTAH] path: 587
a30[CTAH] path: 588
a30[CTAH] path: 589
a30[CTAH] path: 590
a30[CTAH] path: 591
a30[CTAH] path: 592
a30[CTAH] path: 593
a30[CTAH] path: 594
a30[CTAH] path: 595
a30[CTAH] path: 596
a30[CTAH] path: 597
a30[CTAH] path: 598
a30[CTAH] path: 599
a30[CTAH] path: 600
a30[CTAH] path: 601
a30[CTAH] path: 602
a30[CTAH] path: 603
a30[CTAH] path: 604
a30[CTAH] path: 605
a30[CTAH] path: 606
a30[CTAH] path: 607
a30[CTAH] path: 608
a30[CTAH] path: 609
a30[CTAH] path: 610
a30[CTAH] path: 611
a30[CTAH] path: 612
a30[CTAH] path: 613
a30[CTAH] path: 614
a30[CTAH] path: 615
a30[CTAH] path: 616
a30[CTAH] path: 617
a30[CTAH] path: 618
a30[CTAH] path: 619
a30[CTAH] path: 620
a30[CTAH] path: 621
a30[CTAH] path: 622
a30[CTAH] path: 623
a30[CTAH] path: 624
a30[CTAH] path: 625
a30[CTAH] path: 626
a30[CTAH] path: 627
a30[CTAH] path: 628
a30[CTAH] path: 629
a30[CTAH] path: 630
a30[CTAH] path: 631
a30[CTAH] path: 632
a30[CTAH] path: 633
a30[CTAH] path: 634
a30[CTAH] path: 635
a30[CTAH] path: 636
a30[CTAH] path: 637
a30[CTAH] path: 638
a30[CTAH] path: 639
a30[CTAH] path: 640
a30[CTAH] path: 641
a30[CTAH] path: 642
a30[CTAH] path: 643
a30[CTAH] path: 644
a30[CTAH] path: 645
a30[CTAH] path: 646
a30[CTAH] path: 647
a30[CTAH] path: 648
a30[CTAH] path: 649
a30[CTAH] path: 650
a30[CTAH] path: 651
a30[CTAH] path: 652
a30[CTAH] path: 653
a30[CTAH] path: 654
a30[CTAH] path: 655
a30[CTAH] path: 656
a30[CTAH] path: 657
a30[CTAH] path: 658
a30[CTAH] path: 659
a30[CTAH] path: 660
a30[CTAH] path: 661
a30[CTAH] path: 662
a30[CTAH] path: 663
a30[CTAH] path: 664
a30[CTAH] path: 665
a30[CTAH] path: 666
a30[CTAH] path: 667
a30[CTAH] path: 668
a30[CTAH] path: 669
a30[CTAH] path: 670
a30[CTAH] path: 671
a30[CTAH] path: 672
a30[CTAH] path: 673
a30[CTAH] path: 674
a30[CTAH] path: 675
a30[CTAH] path: 676
a30[CTAH] path: 677
a30[CTAH] path: 678
a30[CTAH] path: 679
a30[CTAH] path: 680
a30[CTAH] path: 681
a30[CTAH] path: 682
a30[CTAH] path: 683
a30[CTAH] path: 684
a30[CTAH] path: 685
a30[CTAH] path: 686
a30[CTAH] path: 687
a30[CTAH] path: 688
a30[CTAH] path: 689
a30[CTAH] path: 690
a30[CTAH] path: 691
a30[CTAH] path: 692
a30[CTAH] path: 693
a30[CTAH] path: 694
a30[CTAH] path: 695
a30[CTAH] path: 696
a30[CTAH] path: 697
a30[CTAH] path: 698
a30[CTAH] path: 699
a30[CTAH] path: 700
a30[CTAH] path: 701
a30[CTAH] path: 702
a30[CTAH] path: 703
a30[CTAH] path: 704
a30[CTAH] path: 705
a30[CTAH] path: 706
a30[CTAH] path: 707
a30[CTAH] path: 708
a30[CTAH] path: 709
a30[CTAH] path: 710
a30[CTAH] path: 711
a30[CTAH] path: 712
a30[CTAH] path: 713
a30[CTAH] path: 714
a30[CTAH] path: 715
a30[CTAH] path: 716
a30[CTAH] path: 717
a30[CTAH] path: 718
a30[CTAH] path: 719
a30[CTAH] path: 720
a30[CTAH] path: 721
a30[CTAH] path: 722
a30[CTAH] path: 723
a30[CTAH] path: 724
a30[CTAH] path: 725
a30[CTAH] path: 726
a30[CTAH] path: 727
a30[CTAH] path: 728
a30[CTAH] path: 729
a30[CTAH] path: 730
a30[CTAH] path: 731
a30[CTAH] path: 732
a30[CTAH] path: 733
a30[CTAH] path: 734
a30[CTAH] path: 735
a30[CTAH] path: 736
a30[CTAH] path: 737
a30[CTAH] path: 738
a30[CTAH] path: 739
a30[CTAH] path: 740
a30[CTAH] path: 741
a30[CTAH] path: 742
a30[CTAH] path: 743
a30[CTAH] path: 744
a30[CTAH] path: 745
a30[CTAH] path: 746
a30[CTAH] path: 747
a30[CTAH] path: 748
a30[CTAH] path: 749
a30[CTAH] path: 750
a30[CTAH] path: 751
a30[CTAH] path: 752
a30[CTAH] path: 753
a30[CTAH] path: 754
a30[CTAH] path: 755
a30[CTAH] path: 756
a30[CTAH] path: 757
a30[CTAH] path: 758
a30[CTAH] path: 759
a30[CTAH] path: 760
a30[CTAH] path: 761
a30[CTAH] path: 762
a30[CTAH] path: 763
a30[CTAH] path: 764
a30[CTAH] path: 765
a30[CTAH] path: 766
a30[CTAH] path: 767
a30[CTAH] path: 768
a30[CTAH] path: 769
a30[CTAH] path: 770
a30[CTAH] path: 771
a30[CTAH] path: 772
a30[CTAH] path: 773
a30[CTAH] path: 774
a30[CTAH] path: 775
a30[CTAH] path: 776
a30[CTAH] path: 777
a30[CTAH] path: 778
a30[CTAH] path: 779
a30[CTAH] path: 780
a30[CTAH] path: 781
a30[CTAH] path: 782
a30[CTAH] path: 783
a30[CTAH] path: 784
a30[CTAH] path: 785
a30[CTAH] path: 786
a30[CTAH] path: 787
a30[CTAH] path: 788
a30[CTAH] path: 789
a30[CTAH] path: 790
a30[CTAH] path: 791
a30[CTAH] path: 792
a30[CTAH] path: 793
a30[CTAH] path: 794
a30[CTAH] path: 795
a30[CTAH] path: 796
a30[CTAH] path: 797
a30[CTAH] path: 798
a30[CTAH] path: 799
a30[CTAH] path: 800
a30[CTAH] path: 801
a30[CTAH] path: 802
a30[CTAH] path: 803
a30[CTAH] path: 804
a30[CTAH] path: 805
a30[CTAH] path: 806
a30[CTAH] path: 807
a30[CTAH] path: 808
a30[CTAH] path: 809
a30[CTAH] path: 810
a30[CTAH] path: 811
a30[CTAH] path: 812
a30[CTAH] path: 813
a30[CTAH] path: 814
a30[CTAH] path: 815
a30[CTAH] path: 816
a30[CTAH] path: 817
a30[CTAH] path: 818
a30[CTAH] path: 819
a30[CTAH] path: 820
a30[CTAH] path: 821
a30[CTAH] path: 822
a30[CTAH] path: 823
a30[CTAH] path: 824
a30[CTAH] path: 825
a30[CTAH] path: 826
a30[CTAH] path: 827
a30[CTAH] path: 828
a30[CTAH] path: 829
a30[CTAH] path: 830
a30[CTAH] path: 831
a30[CTAH] path: 832
a30[CTAH] path: 833
a30[CTAH] path: 834
a30[CTAH] path: 835
a30[CTAH] path: 836
a30[CTAH] path: 837
a30[CTAH] path: 838
a30[CTAH] path: 839
a30[CTAH] path: 840
a30[CTAH] path: 841
a30[CTAH] path: 842
a30[CTAH] path: 843
a30[CTAH] path: 844
a30[CTAH] path: 845
a30[CTAH] path: 846
a30[CTAH] path: 847
a30[CTAH] path: 848
a30[CTAH] path: 849
a30[CTAH] path: 850
a30[CTAH] path: 851
a30[CTAH] path: 852
a30[CTAH] path: 853
a30[CTAH] path: 854
a30[CTAH] path: 855
a30[CTAH] path: 856
a30[CTAH] path: 857
a30[CTAH] path: 858
a30[CTAH] path: 859
a30[CTAH] path: 860
a30[CTAH] path: 861
a30[CTAH] path: 862
a30[CTAH] path: 863
a30[CTAH] path: 864
a30[CTAH] path: 865
a30[CTAH] path: 866
a30[CTAH] path: 867
a30[CTAH] path: 868
a30[CTAH] path: 869
a30[CTAH] path: 870
a30[CTAH] path: 871
a30[CTAH] path: 872
a30[CTAH] path: 873
a30[CTAH] path: 874
a30[CTAH] path: 875
a30[CTAH] path: 876
a30[CTAH] path: 877
a30[CTAH] path: 878
a30[CTAH] path: 879
a30[CTAH] path: 880
a30[CTAH] path: 881
a30[CTAH] path: 882
a30[CTAH] path: 883
a30[CTAH] path: 884
a30[CTAH] path: 885
a30[CTAH] path: 886
a30[CTAH] path: 887
a30[CTAH] path: 888
a30[CTAH] path: 889
a30[CTAH] path: 890
a30[CTAH] path: 891
a30[CTAH] path: 892
a30[CTAH] path: 893
a30[CTAH] path: 894
a30[CTAH] path: 895
a30[CTAH] path: 896
a30[CTAH] path: 897
a30[CTAH] path: 898
a30[CTAH] path: 899
a30[CTAH] path: 900
a30[CTAH] path: 901
a30[CTAH] path: 902
a30[CTAH] path: 903
a30[CTAH] path: 904
a30[CTAH] path: 905
a30[CTAH] path: 906
a30[CTAH] path: 907
a30[CTAH] path: 908
a30[CTAH] path: 909
a30[CTAH] path: 910
a30[CTAH] path: 911
a30[CTAH] path: 912
a30[CTAH] path: 913
a30[CTAH] path: 914
a30[CTAH] path: 915
a30[CTAH] path: 916
a30[CTAH] path: 917
a30[CTAH] path: 918
a30[CTAH] path: 919
a30[CTAH] path: 920
a30[CTAH] path: 921
a30[CTAH] path: 922
a30[CTAH] path: 923
a30[CTAH] path: 924
a30[CTAH] path: 925
a30[CTAH] path: 926
a30[CTAH] path: 927
a30[CTAH] path: 928
a30[CTAH] path: 929
a30[CTAH] path: 930
a30[CTAH] path: 931
a30[CTAH] path: 932
a30[CTAH] path: 933
a30[CTAH] path: 934
a30[CTAH] path: 935
a30[CTAH] path: 936
a30[CTAH] path: 937
a30[CTAH] path: 938
a30[CTAH] path: 939
a30[CTAH] path: 940
a30[CTAH] path: 941
a30[CTAH] path: 942
a30[CTAH] path: 943
a30[CTAH] path: 944
a30[CTAH] path: 945
a30[CTAH] path: 946
a30[CTAH] path: 947
a30[CTAH] path: 948
a30[CTAH] path: 949
a30[CTAH] path: 950
a30[CTAH] path: 951
a30[CTAH] path: 952
a30[CTAH] path: 953
a30[CTAH] path: 954
a30[CTAH] path: 955
a30[CTAH] path: 956
a30[CTAH] path: 957
a30[CTAH] path: 958
a30[CTAH] path: 959
a30[CTAH] path: 960
a30[CTAH] path: 961
a30[CTAH] path: 962
a30[CTAH] path: 963
a30[CTAH] path: 964
a30[CTAH] path: 965
a30[CTAH] path: 966
a30[CTAH] path: 967
a30[CTAH] path: 968
a30[CTAH] path: 969
a30[CTAH] path: 970
a30[CTAH] path: 971
a30[CTAH] path: 972
a30[CTAH] path: 973
a30[CTAH] path: 974
a30[CTAH] path: 975
a30[CTAH] path: 976
a30[CTAH] path: 977
a30[CTAH] path: 978
a30[CTAH] path: 979
a30[CTAH] path: 980
a30[CTAH] path: 981
a30[CTAH] path: 982
a30[CTAH] path: 983
a30[CTAH] path: 984
a30[CTAH] path: 985
a30[CTAH] path: 986
a30[CTAH] path: 987
a30[CTAH] path: 988
a30[CTAH] path: 989
a30[CTAH] path: 990
a30[CTAH] path: 991
a30[CTAH] path: 992
a30[CTAH] path: 993
a30[CTAH] path: 994
a30[CTAH] path: 995
a30[CTAH] path: 996
a30[CTAH] path: 997
a30[CTAH] path: 998
a30[CTAH] path: 999
a30[CTAH] moveStepToGoalTest havent found anything
Event processed UpdateClock(11)
[Planbase]:{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(11)
}


[new scheduled]:[GetPhase(movementphase); B(clock(Clock)); if B(event(phasechange)) then Updated, if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(11)]
[After]:{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(11)
}


[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), B(clock(Clock)); if B(event(phasechange)) then Updated, if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(event(phasechange)) then Updated, if G(at(X, Y, V)) then B([A1,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A1,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	Updated
},
{	B([A1,B]=[4,3]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[Updated, B([A1,B]=[4,3]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	Updated
},
{	B([A1,B]=[4,3]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 4, 3, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, 4, 3, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 4, 3, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(700>100) then @ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a30[CTAH] going goal: 4,3 color: blue
object notification: Time [clock=12, time=2015-05-27 16:48:09.343]
object notification: Time [clock=12, time=2015-05-27 16:48:09.343]
object notification: Time [clock=12, time=2015-05-27 16:48:09.343]
org notification: Time [clock=12, time=2015-05-27 16:48:09.343]
a40[CTAH] moveStepToGoal returns: no
Event processed UpdatePosition(6, 2, 11)
Event processed UpdateClock(12)
[Planbase]:{	NoNextStep(6, 2, 6170);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdatePosition(6, 2, 11)
},
{	UpdateClock(12)
}


[new scheduled]:[NoNextStep(6, 2, 6170); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdatePosition(6, 2, 11), UpdateClock(12)]
[After]:{	NoNextStep(6, 2, 6170);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdatePosition(6, 2, 11)
},
{	UpdateClock(12)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A1,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A1,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	B([A1,B]=[3,4]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[B([A1,B]=[3,4]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	B([A1,B]=[3,4]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 4, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 4, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, 3, 4, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 4, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 4, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 4, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(700>100) then @ctenv(moveStepToGoalTest(blue, no, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 4, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(blue, no, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(blue, no, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(blue, no, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a40[CTAH] going goal: 3,4 color: blue
a30[CTAH] paths: 1000
Need to wait 4 more seconds
a10[CTAH] paths: 1000
a10[CTAH] path: 0
a10[CTAH] path: 1
a10[CTAH] path: 2
a10[CTAH] path: 3
a10[CTAH] path: 4
a10[CTAH] path: 5
a10[CTAH] path: 6
a10[CTAH] path: 7
a10[CTAH] path: 8
a10[CTAH] path: 9
a10[CTAH] path: 10
a10[CTAH] path: 11
a10[CTAH] path: 12
a10[CTAH] path: 13
a10[CTAH] path: 14
a10[CTAH] path: 15
a10[CTAH] path: 16
a10[CTAH] path: 17
a10[CTAH] path: 18
a10[CTAH] path: 19
a10[CTAH] path: 20
a10[CTAH] path: 21
a10[CTAH] path: 22
a10[CTAH] path: 23
a10[CTAH] path: 24
a10[CTAH] path: 25
a10[CTAH] path: 26
a10[CTAH] path: 27
a10[CTAH] path: 28
a10[CTAH] path: 29
a10[CTAH] path: 30
a10[CTAH] path: 31
a10[CTAH] path: 32
a10[CTAH] path: 33
a10[CTAH] path: 34
a10[CTAH] path: 35
a10[CTAH] path: 36
a10[CTAH] path: 37
a10[CTAH] path: 38
a10[CTAH] path: 39
a10[CTAH] path: 40
a10[CTAH] path: 41
a10[CTAH] path: 42
a10[CTAH] path: 43
a10[CTAH] path: 44
a10[CTAH] path: 45
a10[CTAH] path: 46
a10[CTAH] path: 47
a10[CTAH] path: 48
a10[CTAH] path: 49
a10[CTAH] path: 50
a10[CTAH] path: 51
a10[CTAH] path: 52
a10[CTAH] path: 53
a10[CTAH] path: 54
a10[CTAH] path: 55
a10[CTAH] path: 56
a10[CTAH] path: 57
a10[CTAH] path: 58
a10[CTAH] path: 59
a10[CTAH] path: 60
a10[CTAH] path: 61
a10[CTAH] path: 62
a10[CTAH] path: 63
a10[CTAH] path: 64
a10[CTAH] path: 65
a10[CTAH] path: 66
a10[CTAH] path: 67
a10[CTAH] path: 68
a10[CTAH] path: 69
a10[CTAH] path: 70
a10[CTAH] path: 71
a10[CTAH] path: 72
a10[CTAH] path: 73
a10[CTAH] path: 74
a10[CTAH] path: 75
a10[CTAH] path: 76
a10[CTAH] path: 77
a10[CTAH] path: 78
a10[CTAH] path: 79
a10[CTAH] path: 80
a10[CTAH] path: 81
a10[CTAH] path: 82
a10[CTAH] path: 83
a10[CTAH] path: 84
a10[CTAH] path: 85
a10[CTAH] path: 86
a10[CTAH] path: 87
a10[CTAH] path: 88
a10[CTAH] path: 89
a10[CTAH] path: 90
a10[CTAH] path: 91
a10[CTAH] path: 92
a10[CTAH] path: 93
a10[CTAH] path: 94
a10[CTAH] path: 95
a10[CTAH] path: 96
a10[CTAH] path: 97
a10[CTAH] path: 98
a10[CTAH] path: 99
a10[CTAH] path: 100
a10[CTAH] path: 101
a10[CTAH] path: 102
a10[CTAH] path: 103
a10[CTAH] path: 104
a10[CTAH] path: 105
a10[CTAH] path: 106
a10[CTAH] path: 107
a10[CTAH] path: 108
a10[CTAH] path: 109
a10[CTAH] path: 110
a10[CTAH] path: 111
a10[CTAH] path: 112
a10[CTAH] path: 113
a10[CTAH] path: 114
a10[CTAH] path: 115
a10[CTAH] path: 116
a10[CTAH] path: 117
a10[CTAH] path: 118
a10[CTAH] path: 119
a10[CTAH] path: 120
a10[CTAH] path: 121
a10[CTAH] path: 122
a10[CTAH] path: 123
a10[CTAH] path: 124
a10[CTAH] path: 125
a10[CTAH] path: 126
a10[CTAH] path: 127
a10[CTAH] path: 128
a10[CTAH] path: 129
a10[CTAH] path: 130
a10[CTAH] path: 131
a10[CTAH] path: 132
a10[CTAH] path: 133
a10[CTAH] path: 134
a10[CTAH] path: 135
a10[CTAH] path: 136
a10[CTAH] path: 137
a10[CTAH] path: 138
a10[CTAH] path: 139
a10[CTAH] path: 140
a10[CTAH] path: 141
a10[CTAH] path: 142
a10[CTAH] path: 143
a10[CTAH] path: 144
a10[CTAH] path: 145
a10[CTAH] path: 146
a10[CTAH] path: 147
a10[CTAH] path: 148
a10[CTAH] path: 149
a10[CTAH] path: 150
a10[CTAH] path: 151
a10[CTAH] path: 152
a10[CTAH] path: 153
a10[CTAH] path: 154
a10[CTAH] path: 155
a10[CTAH] path: 156
a10[CTAH] path: 157
a10[CTAH] path: 158
a10[CTAH] path: 159
a10[CTAH] path: 160
a10[CTAH] path: 161
a10[CTAH] path: 162
a10[CTAH] path: 163
a10[CTAH] path: 164
a10[CTAH] path: 165
a10[CTAH] path: 166
a10[CTAH] path: 167
a10[CTAH] path: 168
a10[CTAH] path: 169
a10[CTAH] path: 170
a10[CTAH] path: 171
a10[CTAH] path: 172
a10[CTAH] path: 173
a10[CTAH] path: 174
a10[CTAH] path: 175
a10[CTAH] path: 176
a10[CTAH] path: 177
a10[CTAH] path: 178
a10[CTAH] path: 179
a10[CTAH] path: 180
a10[CTAH] path: 181
a10[CTAH] path: 182
a10[CTAH] path: 183
a10[CTAH] path: 184
a10[CTAH] path: 185
a10[CTAH] path: 186
a10[CTAH] path: 187
a10[CTAH] path: 188
a10[CTAH] path: 189
a10[CTAH] path: 190
a10[CTAH] path: 191
a10[CTAH] path: 192
a10[CTAH] path: 193
a10[CTAH] path: 194
a10[CTAH] path: 195
a10[CTAH] path: 196
a10[CTAH] path: 197
a10[CTAH] path: 198
a10[CTAH] path: 199
a10[CTAH] path: 200
a10[CTAH] path: 201
a10[CTAH] path: 202
a10[CTAH] path: 203
a10[CTAH] path: 204
a10[CTAH] path: 205
a10[CTAH] path: 206
a10[CTAH] path: 207
a10[CTAH] path: 208
a10[CTAH] path: 209
a10[CTAH] path: 210
a10[CTAH] path: 211
a10[CTAH] path: 212
a10[CTAH] path: 213
a10[CTAH] path: 214
a10[CTAH] path: 215
a10[CTAH] path: 216
a10[CTAH] path: 217
a10[CTAH] path: 218
a10[CTAH] path: 219
a10[CTAH] path: 220
a10[CTAH] path: 221
a10[CTAH] path: 222
a10[CTAH] path: 223
a10[CTAH] path: 224
a10[CTAH] path: 225
a10[CTAH] path: 226
a10[CTAH] path: 227
a10[CTAH] path: 228
a10[CTAH] path: 229
a10[CTAH] path: 230
a10[CTAH] path: 231
a10[CTAH] path: 232
a10[CTAH] path: 233
a10[CTAH] path: 234
a10[CTAH] path: 235
a10[CTAH] path: 236
a10[CTAH] path: 237
a10[CTAH] path: 238
a10[CTAH] path: 239
a10[CTAH] path: 240
a10[CTAH] path: 241
a10[CTAH] path: 242
a10[CTAH] path: 243
a10[CTAH] path: 244
a10[CTAH] path: 245
a10[CTAH] path: 246
a10[CTAH] path: 247
a10[CTAH] path: 248
a10[CTAH] path: 249
a10[CTAH] path: 250
a10[CTAH] path: 251
a10[CTAH] path: 252
a10[CTAH] path: 253
a10[CTAH] path: 254
a10[CTAH] path: 255
a10[CTAH] path: 256
a10[CTAH] path: 257
a10[CTAH] path: 258
a10[CTAH] path: 259
a10[CTAH] path: 260
a10[CTAH] path: 261
a10[CTAH] path: 262
a10[CTAH] path: 263
a10[CTAH] path: 264
a10[CTAH] path: 265
a10[CTAH] path: 266
a10[CTAH] path: 267
a10[CTAH] path: 268
a10[CTAH] path: 269
a10[CTAH] path: 270
a10[CTAH] path: 271
a10[CTAH] path: 272
a10[CTAH] path: 273
a10[CTAH] path: 274
a10[CTAH] path: 275
a10[CTAH] path: 276
a10[CTAH] path: 277
a10[CTAH] path: 278
a10[CTAH] path: 279
a10[CTAH] path: 280
a10[CTAH] path: 281
a10[CTAH] path: 282
a10[CTAH] path: 283
a10[CTAH] path: 284
a10[CTAH] path: 285
a10[CTAH] path: 286
a10[CTAH] path: 287
a10[CTAH] path: 288
a10[CTAH] path: 289
a10[CTAH] path: 290
a10[CTAH] path: 291
a10[CTAH] path: 292
a10[CTAH] path: 293
a10[CTAH] path: 294
a10[CTAH] path: 295
a10[CTAH] path: 296
a10[CTAH] path: 297
a10[CTAH] path: 298
a10[CTAH] path: 299
a10[CTAH] path: 300
a10[CTAH] path: 301
a10[CTAH] path: 302
a10[CTAH] path: 303
a10[CTAH] path: 304
a10[CTAH] path: 305
a10[CTAH] path: 306
a10[CTAH] path: 307
a10[CTAH] path: 308
a10[CTAH] path: 309
a10[CTAH] path: 310
a10[CTAH] path: 311
a10[CTAH] path: 312
a10[CTAH] path: 313
a10[CTAH] path: 314
a10[CTAH] path: 315
a10[CTAH] path: 316
a10[CTAH] path: 317
a10[CTAH] path: 318
a10[CTAH] path: 319
a10[CTAH] path: 320
a10[CTAH] path: 321
a10[CTAH] path: 322
a10[CTAH] path: 323
a10[CTAH] path: 324
a10[CTAH] path: 325
a10[CTAH] path: 326
a10[CTAH] path: 327
a10[CTAH] path: 328
a10[CTAH] path: 329
a10[CTAH] path: 330
a10[CTAH] path: 331
a10[CTAH] path: 332
a10[CTAH] path: 333
a10[CTAH] path: 334
a10[CTAH] path: 335
a10[CTAH] path: 336
a10[CTAH] path: 337
a10[CTAH] path: 338
a10[CTAH] path: 339
a10[CTAH] path: 340
a10[CTAH] path: 341
a10[CTAH] path: 342
a10[CTAH] path: 343
a10[CTAH] path: 344
a10[CTAH] path: 345
a10[CTAH] path: 346
a10[CTAH] path: 347
a10[CTAH] path: 348
a10[CTAH] path: 349
a10[CTAH] path: 350
a10[CTAH] path: 351
a10[CTAH] path: 352
a10[CTAH] path: 353
a10[CTAH] path: 354
a10[CTAH] path: 355
a10[CTAH] path: 356
a10[CTAH] path: 357
a10[CTAH] path: 358
a10[CTAH] path: 359
a10[CTAH] path: 360
a10[CTAH] path: 361
a10[CTAH] path: 362
a10[CTAH] path: 363
a10[CTAH] path: 364
a10[CTAH] path: 365
a10[CTAH] path: 366
a10[CTAH] path: 367
a10[CTAH] path: 368
a10[CTAH] path: 369
a10[CTAH] path: 370
a10[CTAH] path: 371
a10[CTAH] path: 372
a10[CTAH] path: 373
a10[CTAH] path: 374
a10[CTAH] path: 375
a10[CTAH] path: 376
a10[CTAH] path: 377
a10[CTAH] path: 378
a10[CTAH] path: 379
a10[CTAH] path: 380
a10[CTAH] path: 381
a10[CTAH] path: 382
a10[CTAH] path: 383
a10[CTAH] path: 384
a10[CTAH] path: 385
a10[CTAH] path: 386
a10[CTAH] path: 387
a10[CTAH] path: 388
a10[CTAH] path: 389
a10[CTAH] path: 390
a10[CTAH] path: 391
a10[CTAH] path: 392
a10[CTAH] path: 393
a10[CTAH] path: 394
a10[CTAH] path: 395
a10[CTAH] path: 396
a10[CTAH] path: 397
a10[CTAH] path: 398
a10[CTAH] path: 399
a10[CTAH] path: 400
a10[CTAH] path: 401
a10[CTAH] path: 402
a10[CTAH] path: 403
a10[CTAH] path: 404
a10[CTAH] path: 405
a10[CTAH] path: 406
a10[CTAH] path: 407
a10[CTAH] path: 408
a10[CTAH] path: 409
a10[CTAH] path: 410
a10[CTAH] path: 411
a10[CTAH] path: 412
a10[CTAH] path: 413
a10[CTAH] path: 414
a10[CTAH] path: 415
a10[CTAH] path: 416
a10[CTAH] path: 417
a10[CTAH] path: 418
a10[CTAH] path: 419
a10[CTAH] path: 420
a10[CTAH] path: 421
a10[CTAH] path: 422
a10[CTAH] path: 423
a10[CTAH] path: 424
a10[CTAH] path: 425
a10[CTAH] path: 426
a10[CTAH] path: 427
a10[CTAH] path: 428
a10[CTAH] path: 429
a10[CTAH] path: 430
a10[CTAH] path: 431
a10[CTAH] path: 432
a10[CTAH] path: 433
a10[CTAH] path: 434
a10[CTAH] path: 435
a10[CTAH] path: 436
a10[CTAH] path: 437
a10[CTAH] path: 438
a10[CTAH] path: 439
a10[CTAH] path: 440
a10[CTAH] path: 441
a10[CTAH] path: 442
a10[CTAH] path: 443
a10[CTAH] path: 444
a10[CTAH] path: 445
a10[CTAH] path: 446
a10[CTAH] path: 447
a10[CTAH] path: 448
a10[CTAH] path: 449
a10[CTAH] path: 450
a10[CTAH] path: 451
a10[CTAH] path: 452
a10[CTAH] path: 453
a10[CTAH] path: 454
a10[CTAH] path: 455
a10[CTAH] path: 456
a10[CTAH] path: 457
a10[CTAH] path: 458
a10[CTAH] path: 459
a10[CTAH] path: 460
a10[CTAH] path: 461
a10[CTAH] path: 462
a10[CTAH] path: 463
a10[CTAH] path: 464
a10[CTAH] path: 465
a10[CTAH] path: 466
a10[CTAH] path: 467
a10[CTAH] path: 468
a10[CTAH] path: 469
a10[CTAH] path: 470
a10[CTAH] path: 471
a10[CTAH] path: 472
a10[CTAH] path: 473
a10[CTAH] path: 474
a10[CTAH] path: 475
a10[CTAH] path: 476
a10[CTAH] path: 477
a10[CTAH] path: 478
a10[CTAH] path: 479
a10[CTAH] path: 480
a10[CTAH] path: 481
a10[CTAH] path: 482
a10[CTAH] path: 483
a10[CTAH] path: 484
a10[CTAH] path: 485
a10[CTAH] path: 486
a10[CTAH] path: 487
a10[CTAH] path: 488
a10[CTAH] path: 489
a10[CTAH] path: 490
a10[CTAH] path: 491
a10[CTAH] path: 492
a10[CTAH] path: 493
a10[CTAH] path: 494
a10[CTAH] path: 495
a10[CTAH] path: 496
a10[CTAH] path: 497
a10[CTAH] path: 498
a10[CTAH] path: 499
a10[CTAH] path: 500
a10[CTAH] path: 501
a10[CTAH] path: 502
a10[CTAH] path: 503
a10[CTAH] path: 504
a10[CTAH] path: 505
a10[CTAH] path: 506
a10[CTAH] path: 507
a10[CTAH] path: 508
a10[CTAH] path: 509
a10[CTAH] path: 510
a10[CTAH] path: 511
a10[CTAH] path: 512
a10[CTAH] path: 513
a10[CTAH] path: 514
a10[CTAH] path: 515
a10[CTAH] path: 516
a10[CTAH] path: 517
a10[CTAH] path: 518
a10[CTAH] path: 519
a10[CTAH] path: 520
a10[CTAH] path: 521
a10[CTAH] path: 522
a10[CTAH] path: 523
a10[CTAH] path: 524
a10[CTAH] path: 525
a10[CTAH] path: 526
a10[CTAH] path: 527
a10[CTAH] path: 528
a10[CTAH] path: 529
a10[CTAH] path: 530
a10[CTAH] path: 531
a10[CTAH] path: 532
a10[CTAH] path: 533
a10[CTAH] path: 534
a10[CTAH] path: 535
a10[CTAH] path: 536
a10[CTAH] path: 537
a10[CTAH] path: 538
a10[CTAH] path: 539
a10[CTAH] path: 540
a10[CTAH] path: 541
a10[CTAH] path: 542
a10[CTAH] path: 543
a10[CTAH] path: 544
a10[CTAH] path: 545
a10[CTAH] path: 546
a10[CTAH] path: 547
a10[CTAH] path: 548
a10[CTAH] path: 549
a10[CTAH] path: 550
a10[CTAH] path: 551
a10[CTAH] path: 552
a10[CTAH] path: 553
a10[CTAH] path: 554
a10[CTAH] path: 555
a10[CTAH] path: 556
a10[CTAH] path: 557
a10[CTAH] path: 558
a10[CTAH] path: 559
a10[CTAH] path: 560
a10[CTAH] path: 561
a10[CTAH] path: 562
a10[CTAH] path: 563
a10[CTAH] path: 564
a10[CTAH] path: 565
a10[CTAH] path: 566
a10[CTAH] path: 567
a10[CTAH] path: 568
a10[CTAH] path: 569
a10[CTAH] path: 570
a10[CTAH] path: 571
a10[CTAH] path: 572
a10[CTAH] path: 573
a10[CTAH] path: 574
a10[CTAH] path: 575
a10[CTAH] path: 576
a10[CTAH] path: 577
a10[CTAH] path: 578
a10[CTAH] path: 579
a10[CTAH] path: 580
a10[CTAH] path: 581
a10[CTAH] path: 582
a10[CTAH] path: 583
a10[CTAH] path: 584
a10[CTAH] path: 585
a10[CTAH] path: 586
a10[CTAH] path: 587
a10[CTAH] path: 588
a10[CTAH] path: 589
a10[CTAH] path: 590
a10[CTAH] path: 591
a10[CTAH] path: 592
a10[CTAH] path: 593
a10[CTAH] path: 594
a10[CTAH] path: 595
a10[CTAH] path: 596
a10[CTAH] path: 597
a10[CTAH] path: 598
a10[CTAH] path: 599
a10[CTAH] path: 600
a10[CTAH] path: 601
a10[CTAH] path: 602
a10[CTAH] path: 603
a10[CTAH] path: 604
a10[CTAH] path: 605
a10[CTAH] path: 606
a10[CTAH] path: 607
a10[CTAH] path: 608
a10[CTAH] path: 609
a10[CTAH] path: 610
a10[CTAH] path: 611
a10[CTAH] path: 612
a10[CTAH] path: 613
a10[CTAH] path: 614
a10[CTAH] path: 615
a10[CTAH] path: 616
a10[CTAH] path: 617
a10[CTAH] path: 618
a10[CTAH] path: 619
a10[CTAH] path: 620
a10[CTAH] path: 621
a10[CTAH] path: 622
a10[CTAH] path: 623
a10[CTAH] path: 624
a10[CTAH] path: 625
a10[CTAH] path: 626
a10[CTAH] path: 627
a10[CTAH] path: 628
a10[CTAH] path: 629
a10[CTAH] path: 630
a10[CTAH] path: 631
a10[CTAH] path: 632
a10[CTAH] path: 633
a10[CTAH] path: 634
a10[CTAH] path: 635
a10[CTAH] path: 636
a10[CTAH] path: 637
a10[CTAH] path: 638
a10[CTAH] path: 639
a10[CTAH] path: 640
a10[CTAH] path: 641
a10[CTAH] path: 642
a10[CTAH] path: 643
a10[CTAH] path: 644
a10[CTAH] path: 645
a10[CTAH] path: 646
a10[CTAH] path: 647
a10[CTAH] path: 648
a10[CTAH] path: 649
a10[CTAH] path: 650
a10[CTAH] path: 651
a10[CTAH] path: 652
a10[CTAH] path: 653
a10[CTAH] path: 654
a10[CTAH] path: 655
a10[CTAH] path: 656
a10[CTAH] path: 657
a10[CTAH] path: 658
a10[CTAH] path: 659
a10[CTAH] path: 660
a10[CTAH] path: 661
a10[CTAH] path: 662
a10[CTAH] path: 663
a10[CTAH] path: 664
a10[CTAH] path: 665
a10[CTAH] path: 666
a10[CTAH] path: 667
a10[CTAH] path: 668
a10[CTAH] path: 669
a10[CTAH] path: 670
a10[CTAH] path: 671
a10[CTAH] path: 672
a10[CTAH] path: 673
a10[CTAH] path: 674
a10[CTAH] path: 675
a10[CTAH] path: 676
a10[CTAH] path: 677
a10[CTAH] path: 678
a10[CTAH] path: 679
a10[CTAH] path: 680
a10[CTAH] path: 681
a10[CTAH] path: 682
a10[CTAH] path: 683
a10[CTAH] path: 684
a10[CTAH] path: 685
a10[CTAH] path: 686
a10[CTAH] path: 687
a10[CTAH] path: 688
a10[CTAH] path: 689
a10[CTAH] path: 690
a10[CTAH] path: 691
a10[CTAH] path: 692
a10[CTAH] path: 693
a10[CTAH] path: 694
a10[CTAH] path: 695
a10[CTAH] path: 696
a10[CTAH] path: 697
a10[CTAH] path: 698
a10[CTAH] path: 699
a10[CTAH] path: 700
a10[CTAH] path: 701
a10[CTAH] path: 702
a10[CTAH] path: 703
a10[CTAH] path: 704
a10[CTAH] path: 705
a10[CTAH] path: 706
a10[CTAH] path: 707
a10[CTAH] path: 708
a10[CTAH] path: 709
a10[CTAH] path: 710
a10[CTAH] path: 711
a10[CTAH] path: 712
a10[CTAH] path: 713
a10[CTAH] path: 714
a10[CTAH] path: 715
a10[CTAH] path: 716
a10[CTAH] path: 717
a10[CTAH] path: 718
a10[CTAH] path: 719
a10[CTAH] path: 720
a10[CTAH] path: 721
a10[CTAH] path: 722
a10[CTAH] path: 723
a10[CTAH] path: 724
a10[CTAH] path: 725
a10[CTAH] path: 726
a10[CTAH] path: 727
a10[CTAH] path: 728
a10[CTAH] path: 729
a10[CTAH] path: 730
a10[CTAH] path: 731
a10[CTAH] path: 732
a10[CTAH] path: 733
a10[CTAH] path: 734
a10[CTAH] path: 735
a10[CTAH] path: 736
a10[CTAH] path: 737
a10[CTAH] path: 738
a10[CTAH] path: 739
a10[CTAH] path: 740
a10[CTAH] path: 741
a10[CTAH] path: 742
a10[CTAH] path: 743
a10[CTAH] path: 744
a10[CTAH] path: 745
a10[CTAH] path: 746
a10[CTAH] path: 747
a10[CTAH] path: 748
a10[CTAH] path: 749
a10[CTAH] path: 750
a10[CTAH] path: 751
a10[CTAH] path: 752
a10[CTAH] path: 753
a10[CTAH] path: 754
a10[CTAH] path: 755
a10[CTAH] path: 756
a10[CTAH] path: 757
a10[CTAH] path: 758
a10[CTAH] path: 759
a10[CTAH] path: 760
a10[CTAH] path: 761
a10[CTAH] path: 762
a10[CTAH] path: 763
a10[CTAH] path: 764
a10[CTAH] path: 765
a10[CTAH] path: 766
a10[CTAH] path: 767
a10[CTAH] path: 768
a10[CTAH] path: 769
a10[CTAH] path: 770
a10[CTAH] path: 771
a10[CTAH] path: 772
a10[CTAH] path: 773
a10[CTAH] path: 774
a10[CTAH] path: 775
a10[CTAH] path: 776
a10[CTAH] path: 777
a10[CTAH] path: 778
a10[CTAH] path: 779
a10[CTAH] path: 780
a10[CTAH] path: 781
a10[CTAH] path: 782
a10[CTAH] path: 783
a10[CTAH] path: 784
a10[CTAH] path: 785
a10[CTAH] path: 786
a10[CTAH] path: 787
a10[CTAH] path: 788
a10[CTAH] path: 789
a10[CTAH] path: 790
a10[CTAH] path: 791
a10[CTAH] path: 792
a10[CTAH] path: 793
a10[CTAH] path: 794
a10[CTAH] path: 795
a10[CTAH] path: 796
a10[CTAH] path: 797
a10[CTAH] path: 798
a10[CTAH] path: 799
a10[CTAH] path: 800
a10[CTAH] path: 801
a10[CTAH] path: 802
a10[CTAH] path: 803
a10[CTAH] path: 804
a10[CTAH] path: 805
a10[CTAH] path: 806
a10[CTAH] path: 807
a10[CTAH] path: 808
a10[CTAH] path: 809
a10[CTAH] path: 810
a10[CTAH] path: 811
a10[CTAH] path: 812
a10[CTAH] path: 813
a10[CTAH] path: 814
a10[CTAH] path: 815
a10[CTAH] path: 816
a10[CTAH] path: 817
a10[CTAH] path: 818
a10[CTAH] path: 819
a10[CTAH] path: 820
a10[CTAH] path: 821
a10[CTAH] path: 822
a10[CTAH] path: 823
a10[CTAH] path: 824
a10[CTAH] path: 825
a10[CTAH] path: 826
a10[CTAH] path: 827
a10[CTAH] path: 828
a10[CTAH] path: 829
a10[CTAH] path: 830
a10[CTAH] path: 831
a10[CTAH] path: 832
a10[CTAH] path: 833
a10[CTAH] path: 834
a10[CTAH] path: 835
a10[CTAH] path: 836
a10[CTAH] path: 837
a10[CTAH] path: 838
a10[CTAH] path: 839
a10[CTAH] path: 840
a10[CTAH] path: 841
a10[CTAH] path: 842
a10[CTAH] path: 843
a10[CTAH] path: 844
a10[CTAH] path: 845
a10[CTAH] path: 846
a10[CTAH] path: 847
a10[CTAH] path: 848
a10[CTAH] path: 849
a10[CTAH] path: 850
a10[CTAH] path: 851
a10[CTAH] path: 852
a10[CTAH] path: 853
a10[CTAH] path: 854
a10[CTAH] path: 855
a10[CTAH] path: 856
a10[CTAH] path: 857
a10[CTAH] path: 858
a10[CTAH] path: 859
a10[CTAH] path: 860
a10[CTAH] path: 861
a10[CTAH] path: 862
a10[CTAH] path: 863
a10[CTAH] path: 864
a10[CTAH] path: 865
a10[CTAH] path: 866
a10[CTAH] path: 867
a10[CTAH] path: 868
a10[CTAH] path: 869
a10[CTAH] path: 870
a10[CTAH] path: 871
a10[CTAH] path: 872
a10[CTAH] path: 873
a10[CTAH] path: 874
a10[CTAH] path: 875
a10[CTAH] path: 876
a10[CTAH] path: 877
a10[CTAH] path: 878
a10[CTAH] path: 879
a10[CTAH] path: 880
a10[CTAH] path: 881
a10[CTAH] path: 882
a10[CTAH] path: 883
a10[CTAH] path: 884
a10[CTAH] path: 885
a10[CTAH] path: 886
a10[CTAH] path: 887
a10[CTAH] path: 888
a10[CTAH] path: 889
a10[CTAH] path: 890
a10[CTAH] path: 891
a10[CTAH] path: 892
a10[CTAH] path: 893
a10[CTAH] path: 894
a10[CTAH] path: 895
a10[CTAH] path: 896
a10[CTAH] path: 897
a10[CTAH] path: 898
a10[CTAH] path: 899
a10[CTAH] path: 900
a10[CTAH] path: 901
a10[CTAH] path: 902
a10[CTAH] path: 903
a10[CTAH] path: 904
a10[CTAH] path: 905
a10[CTAH] path: 906
a10[CTAH] path: 907
a10[CTAH] path: 908
a10[CTAH] path: 909
a10[CTAH] path: 910
a10[CTAH] path: 911
a10[CTAH] path: 912
a10[CTAH] path: 913
a10[CTAH] path: 914
a10[CTAH] path: 915
a10[CTAH] path: 916
a10[CTAH] path: 917
a10[CTAH] path: 918
a10[CTAH] path: 919
a10[CTAH] path: 920
a10[CTAH] path: 921
a10[CTAH] path: 922
a10[CTAH] path: 923
a10[CTAH] path: 924
a10[CTAH] path: 925
a10[CTAH] path: 926
a10[CTAH] path: 927
a10[CTAH] path: 928
a10[CTAH] path: 929
a10[CTAH] path: 930
a10[CTAH] path: 931
a10[CTAH] path: 932
a10[CTAH] path: 933
a10[CTAH] path: 934
a10[CTAH] path: 935
a10[CTAH] path: 936
a10[CTAH] path: 937
a10[CTAH] path: 938
a10[CTAH] path: 939
a10[CTAH] path: 940
a10[CTAH] path: 941
a10[CTAH] path: 942
a10[CTAH] path: 943
a10[CTAH] path: 944
a10[CTAH] path: 945
a10[CTAH] path: 946
a10[CTAH] path: 947
a10[CTAH] path: 948
a10[CTAH] path: 949
a10[CTAH] path: 950
a10[CTAH] path: 951
a10[CTAH] path: 952
a10[CTAH] path: 953
a10[CTAH] path: 954
a10[CTAH] path: 955
a10[CTAH] path: 956
a10[CTAH] path: 957
a10[CTAH] path: 958
a10[CTAH] path: 959
a10[CTAH] path: 960
a10[CTAH] path: 961
a10[CTAH] path: 962
a10[CTAH] path: 963
a10[CTAH] path: 964
a10[CTAH] path: 965
a10[CTAH] path: 966
a10[CTAH] path: 967
a10[CTAH] path: 968
a10[CTAH] path: 969
a10[CTAH] path: 970
a10[CTAH] path: 971
a10[CTAH] path: 972
a10[CTAH] path: 973
a10[CTAH] path: 974
a10[CTAH] path: 975
a10[CTAH] path: 976
a10[CTAH] path: 977
a10[CTAH] path: 978
a10[CTAH] path: 979
a10[CTAH] path: 980
a10[CTAH] path: 981
a10[CTAH] path: 982
a10[CTAH] path: 983
a10[CTAH] path: 984
a10[CTAH] path: 985
a10[CTAH] path: 986
a10[CTAH] path: 987
a10[CTAH] path: 988
a10[CTAH] path: 989
a10[CTAH] path: 990
a10[CTAH] path: 991
a10[CTAH] path: 992
a10[CTAH] path: 993
a10[CTAH] path: 994
a10[CTAH] path: 995
a10[CTAH] path: 996
a10[CTAH] path: 997
a10[CTAH] path: 998
a10[CTAH] path: 999
a10[CTAH] moveStepToGoalTest havent found anything
Event processed UpdateClock(12)
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(12)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(12)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(12)
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A1,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A1,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	B([A1,B]=[3,2]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[B([A1,B]=[3,2]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	B([A1,B]=[3,2]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 3, 2, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(700>100) then @ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoalTest(blue, no, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a10[CTAH] going goal: 3,2 color: blue
a40[CTAH] paths: 1000
Need to wait 3 more seconds
org notification: Time [clock=13, time=2015-05-27 16:48:19.344]
object notification: Time [clock=13, time=2015-05-27 16:48:19.344]
object notification: Time [clock=13, time=2015-05-27 16:48:19.344]
object notification: Time [clock=13, time=2015-05-27 16:48:19.344]
a30[CTAH] path: 0
a30[CTAH] path: 1
a30[CTAH] path: 2
a30[CTAH] path: 3
a30[CTAH] path: 4
a30[CTAH] path: 5
a30[CTAH] path: 6
a30[CTAH] path: 7
a30[CTAH] path: 8
a30[CTAH] path: 9
a30[CTAH] path: 10
a30[CTAH] path: 11
a30[CTAH] path: 12
a30[CTAH] path: 13
a30[CTAH] path: 14
a30[CTAH] path: 15
a30[CTAH] path: 16
a30[CTAH] path: 17
a30[CTAH] path: 18
a30[CTAH] path: 19
a30[CTAH] path: 20
a30[CTAH] path: 21
a30[CTAH] path: 22
a30[CTAH] path: 23
a30[CTAH] path: 24
a30[CTAH] path: 25
a30[CTAH] path: 26
a30[CTAH] path: 27
a30[CTAH] path: 28
a30[CTAH] path: 29
a30[CTAH] path: 30
a30[CTAH] path: 31
a30[CTAH] path: 32
a30[CTAH] path: 33
a30[CTAH] path: 34
a30[CTAH] path: 35
a30[CTAH] path: 36
a30[CTAH] path: 37
a30[CTAH] path: 38
a30[CTAH] path: 39
a30[CTAH] path: 40
a30[CTAH] path: 41
a30[CTAH] path: 42
a30[CTAH] path: 43
a30[CTAH] path: 44
a30[CTAH] path: 45
a30[CTAH] path: 46
a30[CTAH] path: 47
a30[CTAH] path: 48
a30[CTAH] path: 49
a30[CTAH] path: 50
a30[CTAH] path: 51
a30[CTAH] path: 52
a30[CTAH] path: 53
a30[CTAH] path: 54
a30[CTAH] path: 55
a30[CTAH] path: 56
a30[CTAH] path: 57
a30[CTAH] path: 58
a30[CTAH] path: 59
a30[CTAH] path: 60
a30[CTAH] path: 61
a30[CTAH] path: 62
a30[CTAH] path: 63
a30[CTAH] path: 64
a30[CTAH] path: 65
a30[CTAH] path: 66
a30[CTAH] path: 67
a30[CTAH] path: 68
a30[CTAH] path: 69
a30[CTAH] path: 70
a30[CTAH] path: 71
a30[CTAH] path: 72
a30[CTAH] path: 73
a30[CTAH] path: 74
a30[CTAH] path: 75
a30[CTAH] path: 76
a30[CTAH] path: 77
a30[CTAH] path: 78
a30[CTAH] path: 79
a30[CTAH] path: 80
a30[CTAH] path: 81
a30[CTAH] path: 82
a30[CTAH] path: 83
a30[CTAH] path: 84
a30[CTAH] path: 85
a30[CTAH] path: 86
a30[CTAH] path: 87
a30[CTAH] path: 88
a30[CTAH] path: 89
a30[CTAH] path: 90
a30[CTAH] path: 91
a30[CTAH] path: 92
a30[CTAH] path: 93
a30[CTAH] path: 94
a30[CTAH] path: 95
a30[CTAH] path: 96
a30[CTAH] path: 97
a30[CTAH] path: 98
a30[CTAH] path: 99
a30[CTAH] path: 100
a30[CTAH] path: 101
a30[CTAH] path: 102
a30[CTAH] path: 103
a30[CTAH] path: 104
a30[CTAH] path: 105
a30[CTAH] path: 106
a30[CTAH] path: 107
a30[CTAH] path: 108
a30[CTAH] path: 109
a30[CTAH] path: 110
a30[CTAH] path: 111
a30[CTAH] path: 112
a30[CTAH] path: 113
a30[CTAH] path: 114
a30[CTAH] path: 115
a30[CTAH] path: 116
a30[CTAH] path: 117
a30[CTAH] path: 118
a30[CTAH] path: 119
a30[CTAH] path: 120
a30[CTAH] path: 121
a30[CTAH] path: 122
a30[CTAH] path: 123
a30[CTAH] path: 124
a30[CTAH] path: 125
a30[CTAH] path: 126
a30[CTAH] path: 127
a30[CTAH] path: 128
a30[CTAH] path: 129
a30[CTAH] path: 130
a30[CTAH] path: 131
a30[CTAH] path: 132
a30[CTAH] path: 133
a30[CTAH] path: 134
a30[CTAH] path: 135
a30[CTAH] path: 136
a30[CTAH] path: 137
a30[CTAH] path: 138
a30[CTAH] path: 139
a30[CTAH] path: 140
a30[CTAH] path: 141
a30[CTAH] path: 142
a30[CTAH] path: 143
a30[CTAH] path: 144
a30[CTAH] path: 145
a30[CTAH] path: 146
a30[CTAH] path: 147
a30[CTAH] path: 148
a30[CTAH] path: 149
a30[CTAH] path: 150
a30[CTAH] path: 151
a30[CTAH] path: 152
a30[CTAH] path: 153
a30[CTAH] path: 154
a30[CTAH] path: 155
a30[CTAH] path: 156
a30[CTAH] path: 157
a30[CTAH] path: 158
a30[CTAH] path: 159
a30[CTAH] path: 160
a30[CTAH] path: 161
a30[CTAH] path: 162
a30[CTAH] path: 163
a30[CTAH] path: 164
a30[CTAH] path: 165
a30[CTAH] path: 166
a30[CTAH] path: 167
a30[CTAH] path: 168
a30[CTAH] path: 169
a30[CTAH] path: 170
a30[CTAH] path: 171
a30[CTAH] path: 172
a30[CTAH] path: 173
a30[CTAH] path: 174
a30[CTAH] path: 175
a30[CTAH] path: 176
a30[CTAH] path: 177
a30[CTAH] path: 178
a30[CTAH] path: 179
a30[CTAH] path: 180
a30[CTAH] path: 181
a30[CTAH] path: 182
a30[CTAH] path: 183
a30[CTAH] path: 184
a30[CTAH] path: 185
a30[CTAH] path: 186
a30[CTAH] path: 187
a30[CTAH] path: 188
a30[CTAH] path: 189
a30[CTAH] path: 190
a30[CTAH] path: 191
a30[CTAH] path: 192
a30[CTAH] path: 193
a30[CTAH] path: 194
a30[CTAH] path: 195
a30[CTAH] path: 196
a30[CTAH] path: 197
a30[CTAH] path: 198
a30[CTAH] path: 199
a30[CTAH] path: 200
a30[CTAH] path: 201
a30[CTAH] path: 202
a30[CTAH] path: 203
a30[CTAH] path: 204
a30[CTAH] path: 205
a30[CTAH] path: 206
a30[CTAH] path: 207
a30[CTAH] path: 208
a30[CTAH] path: 209
a30[CTAH] path: 210
a30[CTAH] path: 211
a30[CTAH] path: 212
a30[CTAH] path: 213
a30[CTAH] path: 214
a30[CTAH] path: 215
a30[CTAH] path: 216
a30[CTAH] path: 217
a30[CTAH] path: 218
a30[CTAH] path: 219
a30[CTAH] path: 220
a30[CTAH] path: 221
a30[CTAH] path: 222
a30[CTAH] path: 223
a30[CTAH] path: 224
a30[CTAH] path: 225
a30[CTAH] path: 226
a30[CTAH] path: 227
a30[CTAH] path: 228
a30[CTAH] path: 229
a30[CTAH] path: 230
a30[CTAH] path: 231
a30[CTAH] path: 232
a30[CTAH] path: 233
a30[CTAH] path: 234
a30[CTAH] path: 235
a30[CTAH] path: 236
a30[CTAH] path: 237
a30[CTAH] path: 238
a30[CTAH] path: 239
a30[CTAH] path: 240
a30[CTAH] path: 241
a30[CTAH] path: 242
a30[CTAH] path: 243
a30[CTAH] path: 244
a30[CTAH] path: 245
a30[CTAH] path: 246
a30[CTAH] path: 247
a30[CTAH] path: 248
a30[CTAH] path: 249
a30[CTAH] path: 250
a30[CTAH] path: 251
a30[CTAH] path: 252
a30[CTAH] path: 253
a30[CTAH] path: 254
a30[CTAH] path: 255
a30[CTAH] path: 256
a30[CTAH] path: 257
a30[CTAH] path: 258
a30[CTAH] path: 259
a30[CTAH] path: 260
a30[CTAH] path: 261
a30[CTAH] path: 262
a30[CTAH] path: 263
a30[CTAH] path: 264
a30[CTAH] path: 265
a30[CTAH] path: 266
a30[CTAH] path: 267
a30[CTAH] path: 268
a30[CTAH] path: 269
a30[CTAH] path: 270
a30[CTAH] path: 271
a30[CTAH] path: 272
a30[CTAH] path: 273
a30[CTAH] path: 274
a30[CTAH] path: 275
a30[CTAH] path: 276
a30[CTAH] path: 277
a30[CTAH] path: 278
a30[CTAH] path: 279
a30[CTAH] path: 280
a30[CTAH] path: 281
a30[CTAH] path: 282
a30[CTAH] path: 283
a30[CTAH] path: 284
a30[CTAH] path: 285
a30[CTAH] path: 286
a30[CTAH] path: 287
a30[CTAH] path: 288
a30[CTAH] path: 289
a30[CTAH] path: 290
a30[CTAH] path: 291
a30[CTAH] path: 292
a30[CTAH] path: 293
a30[CTAH] path: 294
a30[CTAH] path: 295
a30[CTAH] path: 296
a30[CTAH] path: 297
a30[CTAH] path: 298
a30[CTAH] path: 299
a30[CTAH] path: 300
a30[CTAH] path: 301
a30[CTAH] path: 302
a30[CTAH] path: 303
a30[CTAH] path: 304
a30[CTAH] path: 305
a30[CTAH] path: 306
a30[CTAH] path: 307
a30[CTAH] path: 308
a30[CTAH] path: 309
a30[CTAH] path: 310
a30[CTAH] path: 311
a30[CTAH] path: 312
a30[CTAH] path: 313
a30[CTAH] path: 314
a30[CTAH] path: 315
a30[CTAH] path: 316
a30[CTAH] path: 317
a30[CTAH] path: 318
a30[CTAH] path: 319
a30[CTAH] path: 320
a30[CTAH] path: 321
a30[CTAH] path: 322
a30[CTAH] path: 323
a30[CTAH] path: 324
a30[CTAH] path: 325
a30[CTAH] path: 326
a30[CTAH] path: 327
a30[CTAH] path: 328
a30[CTAH] path: 329
a30[CTAH] path: 330
a30[CTAH] path: 331
a30[CTAH] path: 332
a30[CTAH] path: 333
a30[CTAH] path: 334
a30[CTAH] path: 335
a30[CTAH] path: 336
a30[CTAH] path: 337
a30[CTAH] path: 338
a30[CTAH] path: 339
a30[CTAH] path: 340
a30[CTAH] path: 341
a30[CTAH] path: 342
a30[CTAH] path: 343
a30[CTAH] path: 344
a30[CTAH] path: 345
a30[CTAH] path: 346
a30[CTAH] path: 347
a30[CTAH] path: 348
a30[CTAH] path: 349
a30[CTAH] path: 350
a30[CTAH] path: 351
a30[CTAH] path: 352
a30[CTAH] path: 353
a30[CTAH] path: 354
a30[CTAH] path: 355
a30[CTAH] path: 356
a30[CTAH] path: 357
a30[CTAH] path: 358
a30[CTAH] path: 359
a30[CTAH] path: 360
a30[CTAH] path: 361
a30[CTAH] path: 362
a30[CTAH] path: 363
a30[CTAH] path: 364
a30[CTAH] path: 365
a30[CTAH] path: 366
a30[CTAH] path: 367
a30[CTAH] path: 368
a30[CTAH] path: 369
a30[CTAH] path: 370
a30[CTAH] path: 371
a30[CTAH] path: 372
a30[CTAH] path: 373
a30[CTAH] path: 374
a30[CTAH] path: 375
a30[CTAH] path: 376
a30[CTAH] path: 377
a30[CTAH] path: 378
a30[CTAH] path: 379
a30[CTAH] path: 380
a30[CTAH] path: 381
a30[CTAH] path: 382
a30[CTAH] path: 383
a30[CTAH] path: 384
a30[CTAH] path: 385
a30[CTAH] path: 386
a30[CTAH] path: 387
a30[CTAH] path: 388
a30[CTAH] path: 389
a30[CTAH] path: 390
a30[CTAH] path: 391
a30[CTAH] path: 392
a30[CTAH] path: 393
a30[CTAH] path: 394
a30[CTAH] path: 395
a30[CTAH] path: 396
a30[CTAH] path: 397
a30[CTAH] path: 398
a30[CTAH] path: 399
a30[CTAH] path: 400
a30[CTAH] path: 401
a30[CTAH] path: 402
a30[CTAH] path: 403
a30[CTAH] path: 404
a30[CTAH] path: 405
a30[CTAH] path: 406
a30[CTAH] path: 407
a30[CTAH] path: 408
a30[CTAH] path: 409
a30[CTAH] path: 410
a30[CTAH] path: 411
a30[CTAH] path: 412
a30[CTAH] path: 413
a30[CTAH] path: 414
a30[CTAH] path: 415
a30[CTAH] path: 416
a30[CTAH] path: 417
a30[CTAH] path: 418
a30[CTAH] path: 419
a30[CTAH] path: 420
a30[CTAH] path: 421
a30[CTAH] path: 422
a30[CTAH] path: 423
a30[CTAH] path: 424
a30[CTAH] path: 425
a30[CTAH] path: 426
a30[CTAH] path: 427
a30[CTAH] path: 428
a30[CTAH] path: 429
a30[CTAH] path: 430
a30[CTAH] path: 431
a30[CTAH] path: 432
a30[CTAH] path: 433
a30[CTAH] path: 434
a30[CTAH] path: 435
a30[CTAH] path: 436
a30[CTAH] path: 437
a30[CTAH] path: 438
a30[CTAH] path: 439
a30[CTAH] path: 440
a30[CTAH] path: 441
a30[CTAH] path: 442
a30[CTAH] path: 443
a30[CTAH] path: 444
a30[CTAH] path: 445
a30[CTAH] path: 446
a30[CTAH] path: 447
a30[CTAH] path: 448
a30[CTAH] path: 449
a30[CTAH] path: 450
a30[CTAH] path: 451
a30[CTAH] path: 452
a30[CTAH] path: 453
a30[CTAH] path: 454
a30[CTAH] path: 455
a30[CTAH] path: 456
a30[CTAH] path: 457
a30[CTAH] path: 458
a30[CTAH] path: 459
a30[CTAH] path: 460
a30[CTAH] path: 461
a30[CTAH] path: 462
a30[CTAH] path: 463
a30[CTAH] path: 464
a30[CTAH] path: 465
a30[CTAH] path: 466
a30[CTAH] path: 467
a30[CTAH] path: 468
a30[CTAH] path: 469
a30[CTAH] path: 470
a30[CTAH] path: 471
a30[CTAH] path: 472
a30[CTAH] path: 473
a30[CTAH] path: 474
a30[CTAH] path: 475
a30[CTAH] path: 476
a30[CTAH] path: 477
a30[CTAH] path: 478
a30[CTAH] path: 479
a30[CTAH] path: 480
a30[CTAH] path: 481
a30[CTAH] path: 482
a30[CTAH] path: 483
a30[CTAH] path: 484
a30[CTAH] path: 485
a30[CTAH] path: 486
a30[CTAH] path: 487
a30[CTAH] path: 488
a30[CTAH] path: 489
a30[CTAH] path: 490
a30[CTAH] path: 491
a30[CTAH] path: 492
a30[CTAH] path: 493
a30[CTAH] path: 494
a30[CTAH] path: 495
a30[CTAH] path: 496
a30[CTAH] path: 497
a30[CTAH] path: 498
a30[CTAH] path: 499
a30[CTAH] path: 500
a30[CTAH] path: 501
a30[CTAH] path: 502
a30[CTAH] path: 503
a30[CTAH] path: 504
a30[CTAH] path: 505
a30[CTAH] path: 506
a30[CTAH] path: 507
a30[CTAH] path: 508
a30[CTAH] path: 509
a30[CTAH] path: 510
a30[CTAH] path: 511
a30[CTAH] path: 512
a30[CTAH] path: 513
a30[CTAH] path: 514
a30[CTAH] path: 515
a30[CTAH] path: 516
a30[CTAH] path: 517
a30[CTAH] path: 518
a30[CTAH] path: 519
a30[CTAH] path: 520
a30[CTAH] path: 521
a30[CTAH] path: 522
a30[CTAH] path: 523
a30[CTAH] path: 524
a30[CTAH] path: 525
a30[CTAH] path: 526
a30[CTAH] path: 527
a30[CTAH] path: 528
a30[CTAH] path: 529
a30[CTAH] path: 530
a30[CTAH] path: 531
a30[CTAH] path: 532
a30[CTAH] path: 533
a30[CTAH] path: 534
a30[CTAH] path: 535
a30[CTAH] path: 536
a30[CTAH] path: 537
a30[CTAH] path: 538
a30[CTAH] path: 539
a30[CTAH] path: 540
a30[CTAH] path: 541
a30[CTAH] path: 542
a30[CTAH] path: 543
a30[CTAH] path: 544
a30[CTAH] path: 545
a30[CTAH] path: 546
a30[CTAH] path: 547
a30[CTAH] path: 548
a30[CTAH] path: 549
a30[CTAH] path: 550
a30[CTAH] path: 551
a30[CTAH] path: 552
a30[CTAH] path: 553
a30[CTAH] path: 554
a30[CTAH] path: 555
a30[CTAH] path: 556
a30[CTAH] path: 557
a30[CTAH] path: 558
a30[CTAH] path: 559
a30[CTAH] path: 560
a30[CTAH] path: 561
a30[CTAH] path: 562
a30[CTAH] path: 563
a30[CTAH] path: 564
a30[CTAH] path: 565
a30[CTAH] path: 566
a30[CTAH] path: 567
a30[CTAH] path: 568
a30[CTAH] path: 569
a30[CTAH] path: 570
a30[CTAH] path: 571
a30[CTAH] path: 572
a30[CTAH] path: 573
a30[CTAH] path: 574
a30[CTAH] path: 575
a30[CTAH] path: 576
a30[CTAH] path: 577
a30[CTAH] path: 578
a30[CTAH] path: 579
a30[CTAH] path: 580
a30[CTAH] path: 581
a30[CTAH] path: 582
a30[CTAH] path: 583
a30[CTAH] path: 584
a30[CTAH] path: 585
a30[CTAH] path: 586
a30[CTAH] path: 587
a30[CTAH] path: 588
a30[CTAH] path: 589
a30[CTAH] path: 590
a30[CTAH] path: 591
a30[CTAH] path: 592
a30[CTAH] path: 593
a30[CTAH] path: 594
a30[CTAH] path: 595
a30[CTAH] path: 596
a30[CTAH] path: 597
a30[CTAH] path: 598
a30[CTAH] path: 599
a30[CTAH] path: 600
a30[CTAH] path: 601
a30[CTAH] path: 602
a30[CTAH] path: 603
a30[CTAH] path: 604
a30[CTAH] path: 605
a30[CTAH] path: 606
a30[CTAH] path: 607
a30[CTAH] path: 608
a30[CTAH] path: 609
a30[CTAH] path: 610
a30[CTAH] path: 611
a30[CTAH] path: 612
a30[CTAH] path: 613
a30[CTAH] path: 614
a30[CTAH] path: 615
a30[CTAH] path: 616
a30[CTAH] path: 617
a30[CTAH] path: 618
a30[CTAH] path: 619
a30[CTAH] path: 620
a30[CTAH] path: 621
a30[CTAH] path: 622
a30[CTAH] path: 623
a30[CTAH] path: 624
a30[CTAH] path: 625
a30[CTAH] path: 626
a30[CTAH] path: 627
a30[CTAH] path: 628
a30[CTAH] path: 629
a30[CTAH] path: 630
a30[CTAH] path: 631
a30[CTAH] path: 632
a30[CTAH] path: 633
a30[CTAH] path: 634
a30[CTAH] path: 635
a30[CTAH] path: 636
a30[CTAH] path: 637
a30[CTAH] path: 638
a30[CTAH] path: 639
a30[CTAH] path: 640
a30[CTAH] path: 641
a30[CTAH] path: 642
a30[CTAH] path: 643
a30[CTAH] path: 644
a30[CTAH] path: 645
a30[CTAH] path: 646
a30[CTAH] path: 647
a30[CTAH] path: 648
a30[CTAH] path: 649
a30[CTAH] path: 650
a30[CTAH] path: 651
a30[CTAH] path: 652
a30[CTAH] path: 653
a30[CTAH] path: 654
a30[CTAH] path: 655
a30[CTAH] path: 656
a30[CTAH] path: 657
a30[CTAH] path: 658
a30[CTAH] path: 659
a30[CTAH] path: 660
a30[CTAH] path: 661
a30[CTAH] path: 662
a30[CTAH] path: 663
a30[CTAH] path: 664
a30[CTAH] path: 665
a30[CTAH] path: 666
a30[CTAH] path: 667
a30[CTAH] path: 668
a30[CTAH] path: 669
a30[CTAH] path: 670
a30[CTAH] path: 671
a30[CTAH] path: 672
a30[CTAH] path: 673
a30[CTAH] path: 674
a30[CTAH] path: 675
a30[CTAH] path: 676
a30[CTAH] path: 677
a30[CTAH] path: 678
a30[CTAH] path: 679
a30[CTAH] path: 680
a30[CTAH] path: 681
a30[CTAH] path: 682
a30[CTAH] path: 683
a30[CTAH] path: 684
a30[CTAH] path: 685
a30[CTAH] path: 686
a30[CTAH] path: 687
a30[CTAH] path: 688
a30[CTAH] path: 689
a30[CTAH] path: 690
a30[CTAH] path: 691
a30[CTAH] path: 692
a30[CTAH] path: 693
a30[CTAH] path: 694
a30[CTAH] path: 695
a30[CTAH] path: 696
a30[CTAH] path: 697
a30[CTAH] path: 698
a30[CTAH] path: 699
a30[CTAH] path: 700
a30[CTAH] path: 701
a30[CTAH] path: 702
a30[CTAH] path: 703
a30[CTAH] path: 704
a30[CTAH] path: 705
a30[CTAH] path: 706
a30[CTAH] path: 707
a30[CTAH] path: 708
a30[CTAH] path: 709
a30[CTAH] path: 710
a30[CTAH] path: 711
a30[CTAH] path: 712
a30[CTAH] path: 713
a30[CTAH] path: 714
a30[CTAH] path: 715
a30[CTAH] path: 716
a30[CTAH] path: 717
a30[CTAH] path: 718
a30[CTAH] path: 719
a30[CTAH] path: 720
a30[CTAH] path: 721
a30[CTAH] path: 722
a30[CTAH] path: 723
a30[CTAH] path: 724
a30[CTAH] path: 725
a30[CTAH] path: 726
a30[CTAH] path: 727
a30[CTAH] path: 728
a30[CTAH] path: 729
a30[CTAH] path: 730
a30[CTAH] path: 731
a30[CTAH] path: 732
a30[CTAH] path: 733
a30[CTAH] path: 734
a30[CTAH] path: 735
a30[CTAH] path: 736
a30[CTAH] path: 737
a30[CTAH] path: 738
a30[CTAH] path: 739
a30[CTAH] path: 740
a30[CTAH] path: 741
a30[CTAH] path: 742
a30[CTAH] path: 743
a30[CTAH] path: 744
a30[CTAH] path: 745
a30[CTAH] path: 746
a30[CTAH] path: 747
a30[CTAH] path: 748
a30[CTAH] path: 749
a30[CTAH] path: 750
a30[CTAH] path: 751
a30[CTAH] path: 752
a30[CTAH] path: 753
a30[CTAH] path: 754
a30[CTAH] path: 755
a30[CTAH] path: 756
a30[CTAH] path: 757
a30[CTAH] path: 758
a30[CTAH] path: 759
a30[CTAH] path: 760
a30[CTAH] path: 761
a30[CTAH] path: 762
a30[CTAH] path: 763
a30[CTAH] path: 764
a30[CTAH] path: 765
a30[CTAH] path: 766
a30[CTAH] path: 767
a30[CTAH] path: 768
a30[CTAH] path: 769
a30[CTAH] path: 770
a30[CTAH] path: 771
a30[CTAH] path: 772
a30[CTAH] path: 773
a30[CTAH] path: 774
a30[CTAH] path: 775
a30[CTAH] path: 776
a30[CTAH] path: 777
a30[CTAH] path: 778
a30[CTAH] path: 779
a30[CTAH] path: 780
a30[CTAH] path: 781
a30[CTAH] path: 782
a30[CTAH] path: 783
a30[CTAH] path: 784
a30[CTAH] path: 785
a30[CTAH] path: 786
a30[CTAH] path: 787
a30[CTAH] path: 788
a30[CTAH] path: 789
a30[CTAH] path: 790
a30[CTAH] path: 791
a30[CTAH] path: 792
a30[CTAH] path: 793
a30[CTAH] path: 794
a30[CTAH] path: 795
a30[CTAH] path: 796
a30[CTAH] path: 797
a30[CTAH] path: 798
a30[CTAH] path: 799
a30[CTAH] path: 800
a30[CTAH] path: 801
a30[CTAH] path: 802
a30[CTAH] path: 803
a30[CTAH] path: 804
a30[CTAH] path: 805
a30[CTAH] path: 806
a30[CTAH] path: 807
a30[CTAH] path: 808
a30[CTAH] path: 809
a30[CTAH] path: 810
a30[CTAH] path: 811
a30[CTAH] path: 812
a30[CTAH] path: 813
a30[CTAH] path: 814
a30[CTAH] path: 815
a30[CTAH] path: 816
a30[CTAH] path: 817
a30[CTAH] path: 818
a30[CTAH] path: 819
a30[CTAH] path: 820
a30[CTAH] path: 821
a30[CTAH] path: 822
a30[CTAH] path: 823
a30[CTAH] path: 824
a30[CTAH] path: 825
a30[CTAH] path: 826
a30[CTAH] path: 827
a30[CTAH] path: 828
a30[CTAH] path: 829
a30[CTAH] path: 830
a30[CTAH] path: 831
a30[CTAH] path: 832
a30[CTAH] path: 833
a30[CTAH] path: 834
a30[CTAH] path: 835
a30[CTAH] path: 836
a30[CTAH] path: 837
a30[CTAH] path: 838
a30[CTAH] path: 839
a30[CTAH] path: 840
a30[CTAH] path: 841
a30[CTAH] path: 842
a30[CTAH] path: 843
a30[CTAH] path: 844
a30[CTAH] path: 845
a30[CTAH] path: 846
a30[CTAH] path: 847
a30[CTAH] path: 848
a30[CTAH] path: 849
a30[CTAH] path: 850
a30[CTAH] path: 851
a30[CTAH] path: 852
a30[CTAH] path: 853
a30[CTAH] path: 854
a30[CTAH] path: 855
a30[CTAH] path: 856
a30[CTAH] path: 857
a30[CTAH] path: 858
a30[CTAH] path: 859
a30[CTAH] path: 860
a30[CTAH] path: 861
a30[CTAH] path: 862
a30[CTAH] path: 863
a30[CTAH] path: 864
a30[CTAH] path: 865
a30[CTAH] path: 866
a30[CTAH] path: 867
a30[CTAH] path: 868
a30[CTAH] path: 869
a30[CTAH] path: 870
a30[CTAH] path: 871
a30[CTAH] path: 872
a30[CTAH] path: 873
a30[CTAH] path: 874
a30[CTAH] path: 875
a30[CTAH] path: 876
a30[CTAH] path: 877
a30[CTAH] path: 878
a30[CTAH] path: 879
a30[CTAH] path: 880
a30[CTAH] path: 881
a30[CTAH] path: 882
a30[CTAH] path: 883
a30[CTAH] path: 884
a30[CTAH] path: 885
a30[CTAH] path: 886
a30[CTAH] path: 887
a30[CTAH] path: 888
a30[CTAH] path: 889
a30[CTAH] path: 890
a30[CTAH] path: 891
a30[CTAH] path: 892
a30[CTAH] path: 893
a30[CTAH] path: 894
a30[CTAH] path: 895
a30[CTAH] path: 896
a30[CTAH] path: 897
a30[CTAH] path: 898
a30[CTAH] path: 899
a30[CTAH] path: 900
a30[CTAH] path: 901
a30[CTAH] path: 902
a30[CTAH] path: 903
a30[CTAH] path: 904
a30[CTAH] path: 905
a30[CTAH] path: 906
a30[CTAH] path: 907
a30[CTAH] path: 908
a30[CTAH] path: 909
a30[CTAH] path: 910
a30[CTAH] path: 911
a30[CTAH] path: 912
a30[CTAH] path: 913
a30[CTAH] path: 914
a30[CTAH] path: 915
a30[CTAH] path: 916
a30[CTAH] path: 917
a30[CTAH] path: 918
a30[CTAH] path: 919
a30[CTAH] path: 920
a30[CTAH] path: 921
a30[CTAH] path: 922
a30[CTAH] path: 923
a30[CTAH] path: 924
a30[CTAH] path: 925
a30[CTAH] path: 926
a30[CTAH] path: 927
a30[CTAH] path: 928
a30[CTAH] path: 929
a30[CTAH] path: 930
a30[CTAH] path: 931
a30[CTAH] path: 932
a30[CTAH] path: 933
a30[CTAH] path: 934
a30[CTAH] path: 935
a30[CTAH] path: 936
a30[CTAH] path: 937
a30[CTAH] path: 938
a30[CTAH] path: 939
a30[CTAH] path: 940
a30[CTAH] path: 941
a30[CTAH] path: 942
a30[CTAH] path: 943
a30[CTAH] path: 944
a30[CTAH] path: 945
a30[CTAH] path: 946
a30[CTAH] path: 947
a30[CTAH] path: 948
a30[CTAH] path: 949
a30[CTAH] path: 950
a30[CTAH] path: 951
a30[CTAH] path: 952
a30[CTAH] path: 953
a30[CTAH] path: 954
a30[CTAH] path: 955
a30[CTAH] path: 956
a30[CTAH] path: 957
a30[CTAH] path: 958
a30[CTAH] path: 959
a30[CTAH] path: 960
a30[CTAH] path: 961
a30[CTAH] path: 962
a30[CTAH] path: 963
a30[CTAH] path: 964
a30[CTAH] path: 965
a30[CTAH] path: 966
a30[CTAH] path: 967
a30[CTAH] path: 968
a30[CTAH] path: 969
a30[CTAH] path: 970
a30[CTAH] path: 971
a30[CTAH] path: 972
a30[CTAH] path: 973
a30[CTAH] path: 974
a30[CTAH] path: 975
a30[CTAH] path: 976
a30[CTAH] path: 977
a30[CTAH] path: 978
a30[CTAH] path: 979
a30[CTAH] path: 980
a30[CTAH] path: 981
a30[CTAH] path: 982
a30[CTAH] path: 983
a30[CTAH] path: 984
a30[CTAH] path: 985
a30[CTAH] path: 986
a30[CTAH] path: 987
a30[CTAH] path: 988
a30[CTAH] path: 989
a30[CTAH] path: 990
a30[CTAH] path: 991
a30[CTAH] path: 992
a30[CTAH] path: 993
a30[CTAH] path: 994
a30[CTAH] path: 995
a30[CTAH] path: 996
a30[CTAH] path: 997
a30[CTAH] path: 998
a30[CTAH] path: 999
a30[CTAH] moveStepToGoalTest havent found anything
Event processed UpdateClock(12)
Event processed UpdateClock(13)
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(12)
},
{	UpdateClock(13)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(12), UpdateClock(13)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(12)
},
{	UpdateClock(13)
}


[Planbase]:{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A1,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A1,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A1,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A1,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	B([A1,B]=[4,3]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[B([A1,B]=[4,3]); if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	B([A1,B]=[4,3]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A1, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A1, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 4, 3, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(700>V3) then @ctenv(moveStepToGoalTest(Color2, no, 4, 3, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(700>V3)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 4, 3, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(700>100) then @ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(700>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoalTest(blue, no, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a30[CTAH] going goal: 4,3 color: blue
a40[CTAH] path: 0
a40[CTAH] path: 1
a40[CTAH] path: 2
a40[CTAH] path: 3
a40[CTAH] path: 4
a40[CTAH] path: 5
a40[CTAH] path: 6
a40[CTAH] path: 7
a40[CTAH] path: 8
a40[CTAH] path: 9
a40[CTAH] path: 10
a40[CTAH] path: 11
a40[CTAH] path: 12
a40[CTAH] path: 13
a40[CTAH] path: 14
a40[CTAH] path: 15
a40[CTAH] path: 16
a40[CTAH] path: 17
a40[CTAH] path: 18
a40[CTAH] path: 19
a40[CTAH] path: 20
a40[CTAH] path: 21
a40[CTAH] path: 22
a40[CTAH] path: 23
a40[CTAH] path: 24
a40[CTAH] path: 25
a40[CTAH] path: 26
a40[CTAH] path: 27
a40[CTAH] path: 28
a40[CTAH] path: 29
a40[CTAH] path: 30
a40[CTAH] path: 31
a40[CTAH] path: 32
a40[CTAH] path: 33
a40[CTAH] path: 34
a40[CTAH] path: 35
a40[CTAH] path: 36
a40[CTAH] path: 37
a40[CTAH] path: 38
a40[CTAH] path: 39
a40[CTAH] path: 40
a40[CTAH] path: 41
a40[CTAH] path: 42
a40[CTAH] path: 43
a40[CTAH] path: 44
a40[CTAH] path: 45
a40[CTAH] path: 46
a40[CTAH] path: 47
a40[CTAH] path: 48
a40[CTAH] path: 49
a40[CTAH] path: 50
a40[CTAH] path: 51
a40[CTAH] path: 52
a40[CTAH] path: 53
a40[CTAH] path: 54
a40[CTAH] path: 55
a40[CTAH] path: 56
a40[CTAH] path: 57
a40[CTAH] path: 58
a40[CTAH] path: 59
a40[CTAH] path: 60
a40[CTAH] path: 61
a40[CTAH] path: 62
a40[CTAH] path: 63
a40[CTAH] path: 64
a40[CTAH] path: Path: [6][1] [6][2] [6][3] [6][4] [6][5] [5][5] [4][5] [4][4] [3][4]

a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] found any chip....: (R:6,C:2)
a40[CTAH] moveStepToGoalTest sent proposal for: [6,2,0,5793]
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscourseMessage
[MSG] Message is of type: basicproposal
[MSG] Message is for: 0
[MSG] i'm: 0
Received a proposal creating event
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 3
[MSG] i'm: 3
AGENT : got response to offer
org notification: Proposal [id=5793, agent=a40, agent2=a10, clock=13, time=2015-05-27 16:48:21.159]
Event processed UpdateClock(13)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 6, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 5793=no)
							then	{	NextStep(6, 2, 5793)
								}
							else	{	NextStep(6, 2)
								}
						}
				}
			else	{	if	B(not 5793=no)
					then	{	NextStep(6, 2, 5793)
						}
					else	{	NextStep(6, 2)
						}
				}
		};
	if	B(not 5793=no)
	then	{	Sent(5793, 0, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(13)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 6, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 5793=no) then NextStep(6, 2, 5793) else NextStep(6, 2) else if B(not 5793=no) then NextStep(6, 2, 5793) else NextStep(6, 2); if B(not 5793=no) then Sent(5793, 0, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(13)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 6, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 5793=no)
							then	{	NextStep(6, 2, 5793)
								}
							else	{	NextStep(6, 2)
								}
						}
				}
			else	{	if	B(not 5793=no)
					then	{	NextStep(6, 2, 5793)
						}
					else	{	NextStep(6, 2)
						}
				}
		};
	if	B(not 5793=no)
	then	{	Sent(5793, 0, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(13)
}


[Planbase]:{	if	B(tile(Color1, 6, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 5793=no)
							then	{	NextStep(6, 2, 5793)
								}
							else	{	NextStep(6, 2)
								}
						}
				}
			else	{	if	B(not 5793=no)
					then	{	NextStep(6, 2, 5793)
						}
					else	{	NextStep(6, 2)
						}
				}
		};
	if	B(not 5793=no)
	then	{	Sent(5793, 0, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 6, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 5793=no) then NextStep(6, 2, 5793) else NextStep(6, 2) else if B(not 5793=no) then NextStep(6, 2, 5793) else NextStep(6, 2); if B(not 5793=no) then Sent(5793, 0, open, 12); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(tile(Color1, 6, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 5793=no)
							then	{	NextStep(6, 2, 5793)
								}
							else	{	NextStep(6, 2)
								}
						}
				}
			else	{	if	B(not 5793=no)
					then	{	NextStep(6, 2, 5793)
						}
					else	{	NextStep(6, 2)
						}
				}
		};
	if	B(not 5793=no)
	then	{	Sent(5793, 0, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(white, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 5793=no)
					then	{	NextStep(6, 2, 5793)
						}
					else	{	NextStep(6, 2)
						}
				}
		}
	else	{	if	B(not 5793=no)
			then	{	NextStep(6, 2, 5793)
				}
			else	{	NextStep(6, 2)
				}
		};
	if	B(not 5793=no)
	then	{	Sent(5793, 0, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(white, V2))) then if B(700>V2) then if B(not 5793=no) then NextStep(6, 2, 5793) else NextStep(6, 2) else if B(not 5793=no) then NextStep(6, 2, 5793) else NextStep(6, 2); if B(not 5793=no) then Sent(5793, 0, open, 12); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(white, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 5793=no)
					then	{	NextStep(6, 2, 5793)
						}
					else	{	NextStep(6, 2)
						}
				}
		}
	else	{	if	B(not 5793=no)
			then	{	NextStep(6, 2, 5793)
				}
			else	{	NextStep(6, 2)
				}
		};
	if	B(not 5793=no)
	then	{	Sent(5793, 0, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not 5793=no)
	then	{	NextStep(6, 2, 5793)
		}
	else	{	NextStep(6, 2)
		};
	if	B(not 5793=no)
	then	{	Sent(5793, 0, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not 5793=no) then NextStep(6, 2, 5793) else NextStep(6, 2); if B(not 5793=no) then Sent(5793, 0, open, 12); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not 5793=no)
	then	{	NextStep(6, 2, 5793)
		}
	else	{	NextStep(6, 2)
		};
	if	B(not 5793=no)
	then	{	Sent(5793, 0, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	NextStep(6, 2, 5793);
	if	B(not 5793=no)
	then	{	Sent(5793, 0, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[NextStep(6, 2, 5793); if B(not 5793=no) then Sent(5793, 0, open, 12); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	NextStep(6, 2, 5793);
	if	B(not 5793=no)
	then	{	Sent(5793, 0, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not 5793=no)
	then	{	Sent(5793, 0, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not 5793=no) then Sent(5793, 0, open, 12); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not 5793=no)
	then	{	Sent(5793, 0, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	Sent(5793, 0, open, 12);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[Sent(5793, 0, open, 12); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	Sent(5793, 0, open, 12);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(13>12+5)
	then	{	NoNextStep(6, 2, 5793);
			ReceivedMessage(noresponse, 5793)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(13>12+5) then {NoNextStep(6, 2, 5793); ReceivedMessage(noresponse, 5793)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(13>12+5)
	then	{	NoNextStep(6, 2, 5793);
			ReceivedMessage(noresponse, 5793)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(13>12+5)
	then	{	NoNextStep(6, 2, 5793);
			ReceivedMessage(noresponse, 5793)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(13>12+5) then {NoNextStep(6, 2, 5793); ReceivedMessage(noresponse, 5793)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(13>12+5)
	then	{	NoNextStep(6, 2, 5793);
			ReceivedMessage(noresponse, 5793)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(13>12+5)
	then	{	NoNextStep(6, 2, 5793);
			ReceivedMessage(noresponse, 5793)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(13>12+5) then {NoNextStep(6, 2, 5793); ReceivedMessage(noresponse, 5793)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(13>12+5)
	then	{	NoNextStep(6, 2, 5793);
			ReceivedMessage(noresponse, 5793)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(13>12+5)
	then	{	NoNextStep(6, 2, 5793);
			ReceivedMessage(noresponse, 5793)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(13>12+5) then {NoNextStep(6, 2, 5793); ReceivedMessage(noresponse, 5793)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(13>12+5)
	then	{	NoNextStep(6, 2, 5793);
			ReceivedMessage(noresponse, 5793)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


