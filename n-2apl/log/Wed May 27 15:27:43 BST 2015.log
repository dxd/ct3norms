2015-05-27 15:27:45,549 CONFIG [com.gigaspaces.logger] - Log file: /Users/dxd/git/ct3/logs/2015-05-27~15.27-gigaspaces-service-128.243.23.149-39730.log
-------------------------last log tuples start--------------------------------
Prohibition [subject=a40, prohibition=[moveTooFast], sanction=[reduce(a40, 300)], clock=4, time=2015-05-27 15:20:34.991]
Time [clock=37, time=2015-05-27 15:26:32.733]
Tile [id=null, cell=Cell [x=5, y=2], subject=brown, time=2015-05-27 15:20:34.614, clock=0]
Proposal [id=5477, agent=a20, agent2=a10, clock=27, time=2015-05-27 15:24:54.905]
Time [clock=43, time=2015-05-27 15:26:59.461]
Response [id=8801, response=accepted, clock=13, time=2015-05-27 15:22:32.721]
Group [name=g, ra=a10, clock=0, time=2015-05-27 15:20:34.806]
Prohibition [subject=a40, prohibition=[color(blue, a40)], sanction=[reduce(a40, 100)], clock=5, time=2015-05-27 15:20:43.524]
Prohibition [subject=a30, prohibition=[color(blue, a30)], sanction=[reduce(a30, 100)], clock=2, time=2015-05-27 15:20:43.38]
Response [id=2803, response=accepted, clock=42, time=2015-05-27 15:26:51.503]
Color [id=null, color=white, agent=a10, type=yes, sanction=1000, time=2015-05-27 15:20:42.438, clock=1]
Tile [id=null, cell=Cell [x=6, y=2], subject=white, time=2015-05-27 15:20:34.657, clock=0]
Position [subject=a40, id=null, cell=Cell [x=3, y=4], time=2015-05-27 15:23:06.142, clock=16]
Time [clock=35, time=2015-05-27 15:26:12.729]
Position [subject=a30, id=null, cell=Cell [x=5, y=4], time=2015-05-27 15:22:13.385, clock=11]
Tile [id=null, cell=Cell [x=1, y=4], subject=blue, time=2015-05-27 15:20:34.484, clock=0]
Time [clock=41, time=2015-05-27 15:26:39.457]
Response [id=3916, response=accepted, clock=8, time=2015-05-27 15:21:43.832]
Position [subject=a20, id=null, cell=Cell [x=0, y=5], time=2015-05-27 15:23:17.244, clock=17]
Time [clock=36, time=2015-05-27 15:26:22.732]
Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-05-27 15:20:34.556, clock=0]
Position [subject=a40, id=null, cell=Cell [x=4, y=3], time=2015-05-27 15:22:30.85, clock=16]
Position [subject=a10, id=null, cell=Cell [x=2, y=1], time=2015-05-27 15:22:01.663, clock=13]
Obligation [subject=a10, obligation=[at(3, 2, a10)], sanction=[reduce(a10, 700)], deadline=31, time=2015-05-27 15:20:41.904, clock=1]
Time [clock=32, time=2015-05-27 15:25:42.721]
Prohibition [subject=a20, prohibition=[moveTooFast], sanction=[reduce(a20, 300)], clock=1, time=2015-05-27 15:20:34.982]
SetGoal [id=null, agent=a30, cell=Cell [x=4, y=3], goal=Cell [x=3, y=3], sanction=100, clock=1, time=2015-05-27 15:20:42.152]
Prohibition [subject=a30, prohibition=[moveTooFast], sanction=[reduce(a30, 300)], clock=1, time=2015-05-27 15:20:34.984]
Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-05-27 15:20:34.639, clock=0]
Obligation [subject=a40, obligation=[color(white, a40)], sanction=[reduce(a40, 1000)], deadline=22, time=2015-05-27 15:20:42.931, clock=2]
Position [subject=a40, id=null, cell=Cell [x=3, y=3], time=2015-05-27 15:22:54.771, clock=15]
Position [subject=a40, id=null, cell=Cell [x=4, y=2], time=2015-05-27 15:22:13.317, clock=11]
SetGoal [id=null, agent=a40, cell=Cell [x=3, y=4], goal=Cell [x=3, y=3], sanction=100, clock=1, time=2015-05-27 15:20:42.304]
Time [clock=40, time=2015-05-27 15:27:02.74]
Position [subject=a30, id=null, cell=Cell [x=4, y=3], time=2015-05-27 15:22:54.477, clock=15]
Time [clock=29, time=2015-05-27 15:24:39.429]
Position [subject=a10, id=null, cell=Cell [x=3, y=2], time=2015-05-27 15:23:14.078, clock=17]
Response [id=8778, response=accepted, clock=12, time=2015-05-27 15:21:49.982]
Position [subject=a10, id=null, cell=Cell [x=2, y=1], time=2015-05-27 15:22:12.933, clock=11]
Time [clock=34, time=2015-05-27 15:25:29.44]
Goal [id=null, cell=Cell [x=3, y=3], agent=null, time=2015-05-27 15:20:34.716, clock=0]
Position [subject=a30, id=null, cell=Cell [x=5, y=3], time=2015-05-27 15:22:30.686, clock=16]
Proposal [id=4725, agent=a10, agent2=a30, clock=15, time=2015-05-27 15:22:55.441]
Position [subject=a30, id=null, cell=Cell [x=6, y=4], time=2015-05-27 15:21:43.018, clock=8]
Time [clock=24, time=2015-05-27 15:23:49.417]
Time [clock=42, time=2015-05-27 15:26:49.458]
Time [clock=27, time=2015-05-27 15:24:52.707]
Proposal [id=2571, agent=a20, agent2=a20, clock=15, time=2015-05-27 15:22:56.373]
Time [clock=29, time=2015-05-27 15:25:12.712]
Color [id=null, color=white, agent=a40, type=yes, sanction=1000, time=2015-05-27 15:20:42.926, clock=2]
Time [clock=33, time=2015-05-27 15:25:52.724]
Response [id=7113, response=accepted, clock=16, time=2015-05-27 15:22:29.947]
Position [subject=a10, id=null, cell=Cell [x=0, y=1], time=2015-05-27 15:21:23.599, clock=6]
Position [subject=a40, id=null, cell=Cell [x=6, y=1], time=2015-05-27 15:21:31.921, clock=10]
Prohibition [subject=a40, prohibition=[rejectRequests], sanction=[reduce(a40, 500)], clock=1, time=2015-05-27 15:20:34.976]
Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-05-27 15:20:34.666, clock=0]
Prohibition [subject=a10, prohibition=[color(blue, a10)], sanction=[reduce(a10, 100)], clock=2, time=2015-05-27 15:20:43.072]
Time [clock=37, time=2015-05-27 15:25:59.447]
Time [clock=34, time=2015-05-27 15:26:02.727]
Position [subject=a10, id=null, cell=Cell [x=2, y=2], time=2015-05-27 15:22:33.379, clock=13]
Obligation [subject=a20, obligation=[at(2, 3, a20)], sanction=[reduce(a20, 700)], deadline=31, time=2015-05-27 15:20:42.02, clock=5]
Tile [id=null, cell=Cell [x=6, y=4], subject=white, time=2015-05-27 15:20:34.661, clock=0]
SetGoal [id=null, agent=a10, cell=Cell [x=3, y=2], goal=Cell [x=3, y=3], sanction=100, clock=1, time=2015-05-27 15:20:41.891]
Response [id=1331, response=accepted, clock=6, time=2015-05-27 15:21:22.929]
Prohibition [subject=a30, prohibition=[color(blue, a30)], sanction=[reduce(a30, 100)], clock=5, time=2015-05-27 15:20:43.383]
Time [clock=17, time=2015-05-27 15:22:39.393]
Tile [id=null, cell=Cell [x=3, y=2], subject=blue, time=2015-05-27 15:20:34.574, clock=0]
Time [clock=28, time=2015-05-27 15:24:29.426]
SetGoal [id=null, agent=a20, cell=Cell [x=2, y=3], goal=Cell [x=3, y=3], sanction=100, clock=1, time=2015-05-27 15:20:42.014]
Position [subject=a10, id=null, cell=Cell [x=1, y=1], time=2015-05-27 15:21:44.367, clock=8]
Tile [id=null, cell=Cell [x=6, y=0], subject=blue, time=2015-05-27 15:20:34.65, clock=0]
Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-05-27 15:20:34.579, clock=0]
Time [clock=39, time=2015-05-27 15:26:52.737]
Prohibition [subject=a40, prohibition=[color(blue, a40)], sanction=[reduce(a40, 100)], clock=2, time=2015-05-27 15:20:43.523]
Tile [id=null, cell=Cell [x=6, y=5], subject=brown, time=2015-05-27 15:20:34.663, clock=0]
Obligation [subject=a20, obligation=[color(white, a20)], sanction=[reduce(a20, 1000)], deadline=25, time=2015-05-27 15:20:42.599, clock=5]
Prohibition [subject=a30, prohibition=[rejectRequests], sanction=[reduce(a30, 500)], clock=1, time=2015-05-27 15:20:34.97]
Position [subject=a30, id=null, cell=Cell [x=6, y=4], time=2015-05-27 15:21:46.218, clock=8]
Obligation [subject=a30, obligation=[color(white, a30)], sanction=[reduce(a30, 1000)], deadline=22, time=2015-05-27 15:20:42.78, clock=2]
Proposal [id=7281, agent=a20, agent2=a30, clock=17, time=2015-05-27 15:23:13.195]
Time [clock=10, time=2015-05-27 15:22:02.659]
Response [id=7281, response=accepted, clock=17, time=2015-05-27 15:23:13.674]
Time [clock=25, time=2015-05-27 15:23:59.42]
Position [subject=a40, id=null, cell=Cell [x=5, y=2], time=2015-05-27 15:22:01.199, clock=13]
Time [clock=23, time=2015-05-27 15:24:12.697]
Position [subject=a40, id=null, cell=Cell [x=6, y=1], time=2015-05-27 15:21:23.273, clock=6]
Obligation [subject=a40, obligation=[at(3, 4, a40)], sanction=[reduce(a40, 700)], deadline=31, time=2015-05-27 15:20:42.308, clock=5]
Time [clock=20, time=2015-05-27 15:23:42.688]
Obligation [subject=a30, obligation=[color(white, a30)], sanction=[reduce(a30, 1000)], deadline=22, time=2015-05-27 15:20:42.78, clock=5]
Position [subject=a40, id=null, cell=Cell [x=6, y=2], time=2015-05-27 15:21:44.611, clock=8]
Position [subject=a30, id=null, cell=Cell [x=6, y=5], time=2015-05-27 15:21:22.485, clock=9]
Proposal [id=2803, agent=a20, agent2=a10, clock=42, time=2015-05-27 15:26:50.834]
Time [clock=38, time=2015-05-27 15:26:42.735]
Time [clock=35, time=2015-05-27 15:25:39.442]
Time [clock=27, time=2015-05-27 15:24:19.423]
Color [id=null, color=white, agent=a30, type=yes, sanction=1000, time=2015-05-27 15:20:42.768, clock=2]
Color [id=null, color=blue, agent=a40, type=no, sanction=100, time=2015-05-27 15:20:43.519, clock=2]
Response [id=4190, response=accepted, clock=11, time=2015-05-27 15:21:42.298]
Response [id=4725, response=accepted, clock=19, time=2015-05-27 15:22:59.96]
Time [clock=22, time=2015-05-27 15:23:29.413]
Time [clock=36, time=2015-05-27 15:25:49.445]
Obligation [subject=a10, obligation=[color(white, a10)], sanction=[reduce(a10, 1000)], deadline=25, time=2015-05-27 15:20:42.45, clock=5]
Time [clock=16, time=2015-05-27 15:23:02.677]
Time [clock=19, time=2015-05-27 15:22:59.404]
Prohibition [subject=a20, prohibition=[color(blue, a20)], sanction=[reduce(a20, 100)], clock=5, time=2015-05-27 15:20:43.213]
Response [id=1150, response=accepted, clock=23, time=2015-05-27 15:23:40.735]
Color [id=null, color=blue, agent=a30, type=no, sanction=100, time=2015-05-27 15:20:43.376, clock=2]
Time [clock=40, time=2015-05-27 15:26:29.455]
Time [clock=21, time=2015-05-27 15:23:52.691]
Prohibition [subject=a10, prohibition=[color(blue, a10)], sanction=[reduce(a10, 100)], clock=5, time=2015-05-27 15:20:43.072]
Time [clock=39, time=2015-05-27 15:26:19.452]
Color [id=null, color=blue, agent=a10, type=no, sanction=100, time=2015-05-27 15:20:43.068, clock=2]
Prohibition [subject=a20, prohibition=[moveTooFast], sanction=[reduce(a20, 300)], clock=4, time=2015-05-27 15:20:34.924]
Prohibition [subject=a40, prohibition=[rejectRequests], sanction=[reduce(a40, 500)], clock=4, time=2015-05-27 15:20:34.905]
Time [clock=8, time=2015-05-27 15:21:42.652]
Tile [id=null, cell=Cell [x=5, y=4], subject=blue, time=2015-05-27 15:20:34.634, clock=0]
Time [clock=12, time=2015-05-27 15:22:22.664]
Time [clock=26, time=2015-05-27 15:24:09.422]
Tile [id=null, cell=Cell [x=5, y=5], subject=brown, time=2015-05-27 15:20:34.636, clock=0]
Proposal [id=7113, agent=a30, agent2=a40, clock=12, time=2015-05-27 15:22:28.755]
Color [id=null, color=blue, agent=a20, type=no, sanction=100, time=2015-05-27 15:20:43.208, clock=2]
Time [clock=31, time=2015-05-27 15:25:32.719]
Time [clock=3, time=2015-05-27 15:20:52.641]
Color [id=null, color=white, agent=a20, type=yes, sanction=1000, time=2015-05-27 15:20:42.592, clock=1]
Time [clock=13, time=2015-05-27 15:22:32.667]
Prohibition [subject=a10, prohibition=[moveTooFast], sanction=[reduce(a10, 300)], clock=4, time=2015-05-27 15:20:34.921]
Obligation [subject=a10, obligation=[color(white, a10)], sanction=[reduce(a10, 1000)], deadline=25, time=2015-05-27 15:20:42.449, clock=1]
Tile [id=null, cell=Cell [x=5, y=3], subject=yellow, time=2015-05-27 15:20:34.63, clock=0]
Obligation [subject=a20, obligation=[color(white, a20)], sanction=[reduce(a20, 1000)], deadline=25, time=2015-05-27 15:20:42.597, clock=1]
Time [clock=32, time=2015-05-27 15:25:09.437]
Time [clock=18, time=2015-05-27 15:23:22.683]
Proposal [id=8778, agent=a40, agent2=a20, clock=8, time=2015-05-27 15:21:47.373]
Time [clock=26, time=2015-05-27 15:24:42.704]
Time [clock=33, time=2015-05-27 15:25:19.438]
Response [id=4736, response=accepted, clock=5, time=2015-05-27 15:21:18.686]
Prohibition [subject=a10, prohibition=[rejectRequests], sanction=[reduce(a10, 500)], clock=4, time=2015-05-27 15:20:34.887]
Obligation [subject=a10, obligation=[surround(3, 3)], sanction=[reduce(g, 700)], deadline=31, time=2015-05-27 15:20:34.92, clock=1]
Time [clock=28, time=2015-05-27 15:25:02.709]
Proposal [id=4736, agent=a40, agent2=a20, clock=5, time=2015-05-27 15:21:17.017]
Time [clock=16, time=2015-05-27 15:22:29.391]
Tile [id=null, cell=Cell [x=1, y=2], subject=white, time=2015-05-27 15:20:34.472, clock=0]
Prohibition [subject=a10, prohibition=[rejectRequests], sanction=[reduce(a10, 500)], clock=1, time=2015-05-27 15:20:34.928]
Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-05-27 15:20:34.604, clock=0]
Time [clock=20, time=2015-05-27 15:23:09.409]
Prohibition [subject=a30, prohibition=[rejectRequests], sanction=[reduce(a30, 500)], clock=4, time=2015-05-27 15:20:34.901]
Time [clock=15, time=2015-05-27 15:22:52.675]
Time [clock=8, time=2015-05-27 15:21:09.361]
Time [clock=19, time=2015-05-27 15:23:32.686]
Prohibition [subject=a20, prohibition=[color(blue, a20)], sanction=[reduce(a20, 100)], clock=2, time=2015-05-27 15:20:43.212]
Response [id=5477, response=accepted, clock=27, time=2015-05-27 15:24:55.514]
Tile [id=null, cell=Cell [x=6, y=1], subject=brown, time=2015-05-27 15:20:34.654, clock=0]
Prohibition [subject=a40, prohibition=[moveTooFast], sanction=[reduce(a40, 300)], clock=1, time=2015-05-27 15:20:35.016]
Time [clock=30, time=2015-05-27 15:25:22.713]
Proposal [id=3916, agent=a40, agent2=a10, clock=7, time=2015-05-27 15:21:37.915]
Time [clock=13, time=2015-05-27 15:21:59.381]
Time [clock=30, time=2015-05-27 15:24:49.432]
Time [clock=21, time=2015-05-27 15:23:19.411]
Obligation [subject=a10, obligation=[at(3, 2, a10)], sanction=[reduce(a10, 700)], deadline=31, time=2015-05-27 15:20:41.904, clock=5]
Prohibition [subject=a10, prohibition=[moveTooFast], sanction=[reduce(a10, 300)], clock=1, time=2015-05-27 15:20:34.979]
Time [clock=18, time=2015-05-27 15:22:49.398]
Time [clock=15, time=2015-05-27 15:22:19.386]
Prohibition [subject=a20, prohibition=[rejectRequests], sanction=[reduce(a20, 500)], clock=4, time=2015-05-27 15:20:34.898]
Time [clock=11, time=2015-05-27 15:22:12.662]
Prohibition [subject=a20, prohibition=[rejectRequests], sanction=[reduce(a20, 500)], clock=1, time=2015-05-27 15:20:34.936]
Time [clock=14, time=2015-05-27 15:22:09.384]
Response [id=2571, response=rejected, clock=16, time=2015-05-27 15:23:05.481]
Time [clock=9, time=2015-05-27 15:21:19.367]
Time [clock=12, time=2015-05-27 15:21:49.378]
Time [clock=14, time=2015-05-27 15:22:42.67]
Proposal [id=1456, agent=a30, agent2=a20, clock=9, time=2015-05-27 15:21:20.075]
Prohibition [subject=a30, prohibition=[moveTooFast], sanction=[reduce(a30, 300)], clock=4, time=2015-05-27 15:20:34.985]
Time [clock=4, time=2015-05-27 15:21:02.643]
Time [clock=9, time=2015-05-27 15:21:52.655]
Obligation [subject=a40, obligation=[color(white, a40)], sanction=[reduce(a40, 1000)], deadline=22, time=2015-05-27 15:20:42.931, clock=5]
Response [id=1456, response=accepted, clock=9, time=2015-05-27 15:21:21.198]
Obligation [subject=a40, obligation=[at(3, 4, a40)], sanction=[reduce(a40, 700)], deadline=31, time=2015-05-27 15:20:42.308, clock=1]
Obligation [subject=a10, obligation=[surround(3, 3)], sanction=[reduce(g, 700)], deadline=31, time=2015-05-27 15:20:34.883, clock=4]
Obligation [subject=a30, obligation=[at(4, 3, a30)], sanction=[reduce(a30, 700)], deadline=31, time=2015-05-27 15:20:42.158, clock=5]
Time [clock=5, time=2015-05-27 15:21:12.645]
Tile [id=null, cell=Cell [x=4, y=5], subject=yellow, time=2015-05-27 15:20:34.602, clock=0]
Obligation [subject=a30, obligation=[at(4, 3, a30)], sanction=[reduce(a30, 700)], deadline=31, time=2015-05-27 15:20:42.157, clock=1]
Obligation [subject=a20, obligation=[at(2, 3, a20)], sanction=[reduce(a20, 700)], deadline=31, time=2015-05-27 15:20:42.023, clock=1]
Points [subject=a20, time=2015-05-27 15:23:17.255, clock=17, value=900, id=null]
Response [id=8155, response=accepted, clock=16, time=2015-05-27 15:22:30.057]
Time [clock=6, time=2015-05-27 15:20:49.357]
Time [clock=2, time=2015-05-27 15:20:42.638]
Tile [id=null, cell=Cell [x=4, y=0], subject=brown, time=2015-05-27 15:20:34.587, clock=0]
Time [clock=38, time=2015-05-27 15:26:09.45]
Time [clock=7, time=2015-05-27 15:21:32.65]
Time [clock=11, time=2015-05-27 15:21:39.375]
Time [clock=7, time=2015-05-27 15:20:59.358]
Proposal [id=7403, agent=a40, agent2=a30, clock=13, time=2015-05-27 15:22:36.828]
Time [clock=22, time=2015-05-27 15:24:02.694]
Time [clock=23, time=2015-05-27 15:23:39.415]
Time [clock=4, time=2015-05-27 15:20:29.348]
Time [clock=1, time=2015-05-27 15:20:32.635]
Points [subject=a10, time=2015-05-27 15:23:14.087, clock=17, value=900, id=null]
Time [clock=25, time=2015-05-27 15:24:32.702]
Points [subject=a10, time=2015-05-27 15:23:14.087, clock=17, value=900, id=null]
Points [subject=a40, time=2015-05-27 15:22:30.874, clock=16, value=900, id=null]
Time [clock=31, time=2015-05-27 15:24:59.434]
Time [clock=24, time=2015-05-27 15:24:22.699]
Time [clock=5, time=2015-05-27 15:20:39.353]
Points [subject=a20, time=2015-05-27 15:25:09.449, clock=32, value=-800, id=null]
Time [clock=17, time=2015-05-27 15:23:12.68]
Time [clock=6, time=2015-05-27 15:21:22.647]
Time [clock=10, time=2015-05-27 15:21:29.372]
Points [subject=a30, time=2015-05-27 15:22:13.406, clock=11, value=900, id=null]
Points [subject=a20, time=2015-05-27 15:23:17.254, clock=17, value=900, id=null]
Proposal [id=1150, agent=a20, agent2=a10, clock=23, time=2015-05-27 15:23:40.223]
Points [subject=a30, time=2015-05-27 15:22:13.392, clock=11, value=900, id=null]
Points [subject=a20, time=2015-05-27 15:24:09.437, clock=26, value=-100, id=null]
Proposal [id=1331, agent=a10, agent2=a40, clock=9, time=2015-05-27 15:21:21.4]
Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-05-27 15:20:34.598, clock=0]
Proposal [id=8801, agent=a10, agent2=a20, clock=16, time=2015-05-27 15:22:29.994]
Proposal [id=1532, agent=a40, agent2=a20, clock=10, time=2015-05-27 15:21:29.843]
Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-05-27 15:20:34.608, clock=0]
Tile [id=null, cell=Cell [x=2, y=2], subject=brown, time=2015-05-27 15:20:34.531, clock=0]
Response [id=1532, response=accepted, clock=10, time=2015-05-27 15:21:31.259]
Response [id=7403, response=accepted, clock=15, time=2015-05-27 15:22:54.267]
Points [subject=a40, time=2015-05-27 15:22:30.874, clock=16, value=900, id=null]
Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-05-27 15:20:34.468, clock=0]
Response [id=6306, response=accepted, clock=11, time=2015-05-27 15:21:41.862]
Tile [id=null, cell=Cell [x=2, y=4], subject=white, time=2015-05-27 15:20:34.549, clock=0]
Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-05-27 15:20:34.461, clock=0]
Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-05-27 15:20:34.581, clock=0]
Tile [id=null, cell=Cell [x=3, y=0], subject=white, time=2015-05-27 15:20:34.563, clock=0]
Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-05-27 15:20:34.59, clock=0]
Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-05-27 15:20:34.559, clock=0]
Tile [id=null, cell=Cell [x=6, y=3], subject=brown, time=2015-05-27 15:20:34.659, clock=0]
Tile [id=null, cell=Cell [x=3, y=1], subject=yellow, time=2015-05-27 15:20:34.569, clock=0]
Tile [id=null, cell=Cell [x=2, y=3], subject=blue, time=2015-05-27 15:20:34.536, clock=0]
Tile [id=null, cell=Cell [x=3, y=6], subject=white, time=2015-05-27 15:20:34.584, clock=0]
Tile [id=null, cell=Cell [x=5, y=0], subject=yellow, time=2015-05-27 15:20:34.606, clock=0]
Tile [id=null, cell=Cell [x=1, y=1], subject=yellow, time=2015-05-27 15:20:34.47, clock=0]
Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-05-27 15:20:34.446, clock=0]
Tile [id=null, cell=Cell [x=4, y=3], subject=blue, time=2015-05-27 15:20:34.596, clock=0]
Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-05-27 15:20:34.444, clock=0]
Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-05-27 15:20:34.592, clock=0]
Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-05-27 15:20:34.521, clock=0]
Tile [id=null, cell=Cell [x=1, y=6], subject=yellow, time=2015-05-27 15:20:34.509, clock=0]
Tile [id=null, cell=Cell [x=1, y=3], subject=white, time=2015-05-27 15:20:34.475, clock=0]
Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-05-27 15:20:34.488, clock=0]
Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-05-27 15:20:34.465, clock=0]
Tile [id=null, cell=Cell [x=0, y=0], subject=brown, time=2015-05-27 15:20:34.413, clock=0]
Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-05-27 15:20:34.452, clock=0]
Tile [id=null, cell=Cell [x=3, y=3], subject=blue, time=2015-05-27 15:20:34.577, clock=0]
Tile [id=null, cell=Cell [x=0, y=3], subject=yellow, time=2015-05-27 15:20:34.449, clock=0]
Tile [id=null, cell=Cell [x=2, y=0], subject=white, time=2015-05-27 15:20:34.518, clock=0]
Proposal [id=6306, agent=a30, agent2=a10, clock=7, time=2015-05-27 15:21:35.99]
Proposal [id=8155, agent=a40, agent2=a30, clock=11, time=2015-05-27 15:22:18.194]
Proposal [id=4190, agent=a10, agent2=a40, clock=11, time=2015-05-27 15:21:39.728]
-------------------------last log tuples end----------------------------------
[CTAH] started agent 10
[CTAH] Added a new agent to the game by the name of 10.
[ENV] added agent a10
[CTAH] started agent 30
[CTAH] Added a new agent to the game by the name of 30.
[ENV] added agent a30
[CTAH] started agent 40
[CTAH] Added a new agent to the game by the name of 40.
[ENV] added agent a40
object notification: Time [clock=1, time=2015-05-27 15:27:57.704]
object notification: Time [clock=1, time=2015-05-27 15:27:57.704]
org notification: Time [clock=1, time=2015-05-27 15:27:57.704]
object notification: Time [clock=1, time=2015-05-27 15:27:57.704]
#########################Game started
#########################Game started
#########################Game started
[Planbase]:{	initialize
}


[new scheduled]:[initialize]
[After]:{	initialize
}


[Planbase]:{	initialize
}


[new scheduled]:[initialize]
[After]:{	initialize
}


[Planbase]:{	initialize
}


[new scheduled]:[initialize]
[After]:{	initialize
}


Event processed UpdateClock(1)
Event processed UpdateClock(1)
Event processed UpdateClock(1)
Event processed @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateClock(1)
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[getPhase; getId; B(agentId(ID)); getRole(ID); getPos, UpdateClock(1), @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateClock(1)
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[Planbase]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateClock(1)
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[getPhase; getId; B(agentId(ID)); getRole(ID); getPos, UpdateClock(1), @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateClock(1)
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[Planbase]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateClock(1)
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[getPhase; getId; B(agentId(ID)); getRole(ID); getPos, UpdateClock(1), @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateClock(1)
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@60d861b7
[CTAH] The created APLList : [game_initialized]
[CTAH] Array of Terms: [Lapapl.data.Term;@332af08b
[CTAH] The created APLList : [game_initialized]
[CTAH] Array of Terms: [Lapapl.data.Term;@18a3fe6
[CTAH] The created APLList : [game_initialized]
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


setPhases in ClientGameStatus, the current phase is 
setPhases in ClientGameStatus, the current phase is 
setPhases in ClientGameStatus, the current phase is 
setPhases in ClientGameStatus, the current phase is Norm Phase
setPhases in ClientGameStatus, the current phase is Norm Phase
setPhases in ClientGameStatus, the current phase is Norm Phase
object notification: Tile [id=null, cell=Cell [x=0, y=0], subject=brown, time=2015-05-27 15:28:00.159, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=0], subject=brown, time=2015-05-27 15:28:00.159, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=0], subject=brown, time=2015-05-27 15:28:00.159, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=0], subject=brown, time=2015-05-27 15:28:00.159, clock=0]
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


Event processed UpdateTile(brown, 0, 0)
org notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-05-27 15:28:00.221, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-05-27 15:28:00.221, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-05-27 15:28:00.221, clock=0]
Event processed UpdateTile(brown, 0, 0)
object notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-05-27 15:28:00.221, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-05-27 15:28:00.229, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-05-27 15:28:00.229, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-05-27 15:28:00.229, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-05-27 15:28:00.229, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=3], subject=yellow, time=2015-05-27 15:28:00.236, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=3], subject=yellow, time=2015-05-27 15:28:00.236, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=3], subject=yellow, time=2015-05-27 15:28:00.236, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=3], subject=yellow, time=2015-05-27 15:28:00.236, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-05-27 15:28:00.243, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-05-27 15:28:00.243, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-05-27 15:28:00.248, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-05-27 15:28:00.248, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-05-27 15:28:00.243, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-05-27 15:28:00.253, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-05-27 15:28:00.253, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-05-27 15:28:00.243, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-05-27 15:28:00.248, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-05-27 15:28:00.253, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-05-27 15:28:00.259, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-05-27 15:28:00.259, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-05-27 15:28:00.259, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-05-27 15:28:00.248, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=1], subject=yellow, time=2015-05-27 15:28:00.268, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=1], subject=yellow, time=2015-05-27 15:28:00.268, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=1], subject=yellow, time=2015-05-27 15:28:00.268, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=2], subject=white, time=2015-05-27 15:28:00.272, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=2], subject=white, time=2015-05-27 15:28:00.272, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=2], subject=white, time=2015-05-27 15:28:00.272, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=3], subject=white, time=2015-05-27 15:28:00.276, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=3], subject=white, time=2015-05-27 15:28:00.276, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=3], subject=white, time=2015-05-27 15:28:00.276, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=4], subject=blue, time=2015-05-27 15:28:00.28, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=4], subject=blue, time=2015-05-27 15:28:00.28, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=4], subject=blue, time=2015-05-27 15:28:00.28, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-05-27 15:28:00.253, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-05-27 15:28:00.284, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-05-27 15:28:00.284, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-05-27 15:28:00.284, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=6], subject=yellow, time=2015-05-27 15:28:00.289, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=6], subject=yellow, time=2015-05-27 15:28:00.289, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=6], subject=yellow, time=2015-05-27 15:28:00.289, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=0], subject=white, time=2015-05-27 15:28:00.292, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=0], subject=white, time=2015-05-27 15:28:00.292, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=0], subject=white, time=2015-05-27 15:28:00.292, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-05-27 15:28:00.296, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-05-27 15:28:00.296, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-05-27 15:28:00.296, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=2], subject=brown, time=2015-05-27 15:28:00.3, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=2], subject=brown, time=2015-05-27 15:28:00.3, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=2], subject=brown, time=2015-05-27 15:28:00.3, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=3], subject=blue, time=2015-05-27 15:28:00.304, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=3], subject=blue, time=2015-05-27 15:28:00.304, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-05-27 15:28:00.259, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=3], subject=blue, time=2015-05-27 15:28:00.304, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=4], subject=white, time=2015-05-27 15:28:00.307, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=4], subject=white, time=2015-05-27 15:28:00.307, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-05-27 15:28:00.31, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-05-27 15:28:00.312, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=0], subject=white, time=2015-05-27 15:28:00.314, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=1], subject=yellow, time=2015-05-27 15:28:00.316, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=1], subject=yellow, time=2015-05-27 15:28:00.268, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=2], subject=blue, time=2015-05-27 15:28:00.32, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=3], subject=blue, time=2015-05-27 15:28:00.323, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=2], subject=white, time=2015-05-27 15:28:00.272, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-05-27 15:28:00.326, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-05-27 15:28:00.31, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-05-27 15:28:00.342, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=6], subject=white, time=2015-05-27 15:28:00.345, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=0], subject=brown, time=2015-05-27 15:28:00.351, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-05-27 15:28:00.354, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-05-27 15:28:00.357, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=3], subject=blue, time=2015-05-27 15:28:00.36, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-05-27 15:28:00.362, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=5], subject=yellow, time=2015-05-27 15:28:00.365, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=4], subject=white, time=2015-05-27 15:28:00.307, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=3], subject=white, time=2015-05-27 15:28:00.276, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-05-27 15:28:00.31, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-05-27 15:28:00.312, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=0], subject=white, time=2015-05-27 15:28:00.314, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=1], subject=yellow, time=2015-05-27 15:28:00.316, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=2], subject=blue, time=2015-05-27 15:28:00.32, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=3], subject=blue, time=2015-05-27 15:28:00.323, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-05-27 15:28:00.326, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-05-27 15:28:00.342, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=6], subject=white, time=2015-05-27 15:28:00.345, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=0], subject=brown, time=2015-05-27 15:28:00.351, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-05-27 15:28:00.354, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-05-27 15:28:00.357, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=3], subject=blue, time=2015-05-27 15:28:00.36, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-05-27 15:28:00.362, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-05-27 15:28:00.368, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=0], subject=yellow, time=2015-05-27 15:28:00.371, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-05-27 15:28:00.374, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=2], subject=brown, time=2015-05-27 15:28:00.378, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=3], subject=yellow, time=2015-05-27 15:28:00.38, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=4], subject=blue, time=2015-05-27 15:28:00.383, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=5], subject=brown, time=2015-05-27 15:28:00.395, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-05-27 15:28:00.401, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-05-27 15:28:00.312, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=0], subject=blue, time=2015-05-27 15:28:00.404, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=4], subject=blue, time=2015-05-27 15:28:00.28, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=1], subject=brown, time=2015-05-27 15:28:00.407, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=0], subject=white, time=2015-05-27 15:28:00.314, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=1], subject=yellow, time=2015-05-27 15:28:00.316, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=2], subject=blue, time=2015-05-27 15:28:00.32, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=3], subject=blue, time=2015-05-27 15:28:00.323, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-05-27 15:28:00.326, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-05-27 15:28:00.342, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=6], subject=white, time=2015-05-27 15:28:00.345, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=0], subject=brown, time=2015-05-27 15:28:00.351, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=5], subject=yellow, time=2015-05-27 15:28:00.365, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-05-27 15:28:00.354, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-05-27 15:28:00.368, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-05-27 15:28:00.357, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=0], subject=yellow, time=2015-05-27 15:28:00.371, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=3], subject=blue, time=2015-05-27 15:28:00.36, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-05-27 15:28:00.374, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=2], subject=brown, time=2015-05-27 15:28:00.378, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-05-27 15:28:00.362, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=5], subject=yellow, time=2015-05-27 15:28:00.365, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=3], subject=yellow, time=2015-05-27 15:28:00.38, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-05-27 15:28:00.368, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=0], subject=yellow, time=2015-05-27 15:28:00.371, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=4], subject=blue, time=2015-05-27 15:28:00.383, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-05-27 15:28:00.374, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=5], subject=brown, time=2015-05-27 15:28:00.395, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=2], subject=brown, time=2015-05-27 15:28:00.378, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-05-27 15:28:00.401, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=3], subject=yellow, time=2015-05-27 15:28:00.38, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-05-27 15:28:00.284, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=0], subject=blue, time=2015-05-27 15:28:00.404, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=4], subject=blue, time=2015-05-27 15:28:00.383, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=1], subject=brown, time=2015-05-27 15:28:00.407, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=5], subject=brown, time=2015-05-27 15:28:00.395, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-05-27 15:28:00.401, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=0], subject=blue, time=2015-05-27 15:28:00.404, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=1], subject=brown, time=2015-05-27 15:28:00.407, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=2], subject=white, time=2015-05-27 15:28:00.428, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=2], subject=white, time=2015-05-27 15:28:00.428, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=2], subject=white, time=2015-05-27 15:28:00.428, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=3], subject=brown, time=2015-05-27 15:28:00.435, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=6], subject=yellow, time=2015-05-27 15:28:00.289, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=3], subject=brown, time=2015-05-27 15:28:00.435, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=3], subject=brown, time=2015-05-27 15:28:00.435, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=4], subject=white, time=2015-05-27 15:28:00.443, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=4], subject=white, time=2015-05-27 15:28:00.443, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=4], subject=white, time=2015-05-27 15:28:00.443, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=5], subject=brown, time=2015-05-27 15:28:00.449, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=5], subject=brown, time=2015-05-27 15:28:00.449, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=5], subject=brown, time=2015-05-27 15:28:00.449, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=0], subject=white, time=2015-05-27 15:28:00.292, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-05-27 15:28:00.459, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-05-27 15:28:00.459, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-05-27 15:28:00.459, clock=0]
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	UpdateTile(brown, 0, 0)
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), UpdateTile(brown, 0, 0)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	UpdateTile(brown, 0, 0)
}


org notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-05-27 15:28:00.296, clock=0]
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	UpdateTile(brown, 0, 0)
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), UpdateTile(brown, 0, 0)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	UpdateTile(brown, 0, 0)
}


org notification: Tile [id=null, cell=Cell [x=2, y=2], subject=brown, time=2015-05-27 15:28:00.3, clock=0]
org notification: Goal [id=null, cell=Cell [x=3, y=3], agent=null, time=2015-05-27 15:28:00.562, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=3], subject=blue, time=2015-05-27 15:28:00.304, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=4], subject=white, time=2015-05-27 15:28:00.307, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-05-27 15:28:00.31, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-05-27 15:28:00.312, clock=0]
Event processed UpdateTile(brown, 0, 0)
Event processed UpdateTile(brown, 0, 1)
Event processed UpdateTile(white, 0, 2)
Event processed UpdateTile(yellow, 0, 3)
org notification: Group [name=g, ra=a10, clock=0, time=2015-05-27 15:28:00.689]
Event processed UpdateTile(brown, 0, 4)
Event processed UpdateTile(blue, 0, 5)
Event processed UpdateTile(brown, 0, 6)
Event processed UpdateTile(brown, 1, 0)
Event processed UpdateTile(yellow, 1, 1)
Event processed UpdateTile(white, 1, 2)
Event processed UpdateTile(white, 1, 3)
Event processed UpdateTile(blue, 1, 4)
Event processed UpdateTile(brown, 1, 5)
Event processed UpdateTile(yellow, 1, 6)
Event processed UpdateTile(white, 2, 0)
Event processed UpdateTile(white, 2, 1)
Event processed UpdateTile(brown, 2, 2)
Event processed UpdateTile(blue, 2, 3)
Event processed UpdateTile(white, 2, 4)
Event processed UpdateTile(brown, 2, 5)
Event processed UpdateTile(brown, 2, 6)
Event processed UpdateTile(white, 3, 0)
Event processed UpdateTile(yellow, 3, 1)
Event processed UpdateTile(blue, 3, 2)
Event processed UpdateTile(blue, 3, 3)
org notification: Tile [id=null, cell=Cell [x=3, y=0], subject=white, time=2015-05-27 15:28:00.314, clock=0]
object notification: Obligation [subject=a10, obligation=[surround(3, 3)], sanction=[reduce(g, 700)], deadline=31, time=2015-05-27 15:28:00.891, clock=1]
object notification: Prohibition [subject=a30, prohibition=[rejectRequests], sanction=[reduce(a30, 500)], clock=1, time=2015-05-27 15:28:00.94]
object notification: Prohibition [subject=a30, prohibition=[moveTooFast], sanction=[reduce(a30, 300)], clock=1, time=2015-05-27 15:28:00.953]
object notification: Prohibition [subject=a40, prohibition=[rejectRequests], sanction=[reduce(a40, 500)], clock=1, time=2015-05-27 15:28:00.944]
object notification: Prohibition [subject=a40, prohibition=[moveTooFast], sanction=[reduce(a40, 300)], clock=1, time=2015-05-27 15:28:00.959]
object notification: Prohibition [subject=a10, prohibition=[rejectRequests], sanction=[reduce(a10, 500)], clock=1, time=2015-05-27 15:28:00.933]
object notification: Prohibition [subject=a10, prohibition=[moveTooFast], sanction=[reduce(a10, 300)], clock=1, time=2015-05-27 15:28:00.947]
Event processed UpdateTile(yellow, 3, 4)
Event processed UpdateTile(yellow, 3, 5)
Event processed UpdateTile(white, 3, 6)
org notification: Tile [id=null, cell=Cell [x=3, y=1], subject=yellow, time=2015-05-27 15:28:00.316, clock=0]
Event processed UpdateTile(brown, 4, 0)
Event processed UpdateTile(blue, 4, 1)
Event processed UpdateTile(yellow, 4, 2)
Event processed UpdateTile(blue, 4, 3)
org notification: Tile [id=null, cell=Cell [x=3, y=2], subject=blue, time=2015-05-27 15:28:00.32, clock=0]
Event processed UpdateTile(brown, 4, 4)
#########################Game Initialized
AGENT Thread-12: current phase name: Norm Phase
we have 1 goals
we have GoalWeight: 100  DistWeight: -10  ChipWeight: 5  CommWeight: 0 scoring
#########################Game Initialized
AGENT Thread-16: current phase name: Norm Phase
we have 1 goals
we have GoalWeight: 100  DistWeight: -10  ChipWeight: 5  CommWeight: 0 scoring
org notification: Tile [id=null, cell=Cell [x=3, y=3], subject=blue, time=2015-05-27 15:28:00.323, clock=0]
#########################Game Initialized
AGENT Thread-14: current phase name: Norm Phase
we have 1 goals
we have GoalWeight: 100  DistWeight: -10  ChipWeight: 5  CommWeight: 0 scoring
Event processed UpdateTile(yellow, 4, 5)
Event processed UpdateTile(brown, 4, 6)
org notification: Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-05-27 15:28:00.326, clock=0]
Event processed UpdateTile(yellow, 5, 0)
Event processed UpdateTile(white, 5, 1)
org notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-05-27 15:28:00.342, clock=0]
Event processed UpdateTile(brown, 5, 2)
Event processed UpdateTile(yellow, 5, 3)
Event processed UpdateTile(blue, 5, 4)
org notification: Tile [id=null, cell=Cell [x=3, y=6], subject=white, time=2015-05-27 15:28:00.345, clock=0]
Event processed UpdateTile(brown, 5, 5)
Event processed UpdateTile(white, 5, 6)
Event processed UpdateTile(blue, 6, 0)
org notification: Tile [id=null, cell=Cell [x=4, y=0], subject=brown, time=2015-05-27 15:28:00.351, clock=0]
Event processed UpdateTile(brown, 6, 1)
Event processed UpdateTile(white, 6, 2)
Event processed UpdateTile(brown, 6, 3)
org notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-05-27 15:28:00.354, clock=0]
Event processed UpdateTile(white, 6, 4)
Event processed UpdateTile(brown, 6, 5)
Event processed UpdateTile(white, 6, 6)
org notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-05-27 15:28:00.357, clock=0]
Event processed adoptObligation(surround(3, 3), 31, reduce(g, 700))
Event processed adoptProhibition(rejectRequests, reduce(a10, 500))
Event processed adoptProhibition(moveTooFast, reduce(a10, 300))
org notification: Tile [id=null, cell=Cell [x=4, y=3], subject=blue, time=2015-05-27 15:28:00.36, clock=0]
org notification: Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-05-27 15:28:00.362, clock=0]
org notification: Tile [id=null, cell=Cell [x=4, y=5], subject=yellow, time=2015-05-27 15:28:00.365, clock=0]
org notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-05-27 15:28:00.368, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=0], subject=yellow, time=2015-05-27 15:28:00.371, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-05-27 15:28:00.374, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=2], subject=brown, time=2015-05-27 15:28:00.378, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=3], subject=yellow, time=2015-05-27 15:28:00.38, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=4], subject=blue, time=2015-05-27 15:28:00.383, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=5], subject=brown, time=2015-05-27 15:28:00.395, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-05-27 15:28:00.401, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=0], subject=blue, time=2015-05-27 15:28:00.404, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=1], subject=brown, time=2015-05-27 15:28:00.407, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=2], subject=white, time=2015-05-27 15:28:00.428, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=3], subject=brown, time=2015-05-27 15:28:00.435, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=4], subject=white, time=2015-05-27 15:28:00.443, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=5], subject=brown, time=2015-05-27 15:28:00.449, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-05-27 15:28:00.459, clock=0]
[Planbase]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	UpdateTile(brown, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateTile(blue, 0, 5)
},
{	UpdateTile(brown, 0, 6)
},
{	UpdateTile(brown, 1, 0)
},
{	UpdateTile(yellow, 1, 1)
},
{	UpdateTile(white, 1, 2)
},
{	UpdateTile(white, 1, 3)
},
{	UpdateTile(blue, 1, 4)
},
{	UpdateTile(brown, 1, 5)
},
{	UpdateTile(yellow, 1, 6)
},
{	UpdateTile(white, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateTile(brown, 2, 2)
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
},
{	adoptObligation(surround(3, 3), 31, reduce(g, 700))
},
{	adoptProhibition(rejectRequests, reduce(a10, 500))
},
{	adoptProhibition(moveTooFast, reduce(a10, 300))
}


[new scheduled]:[GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), UpdateTile(brown, 0, 0), UpdateTile(brown, 0, 1), UpdateTile(white, 0, 2), UpdateTile(yellow, 0, 3), UpdateTile(brown, 0, 4), UpdateTile(blue, 0, 5), UpdateTile(brown, 0, 6), UpdateTile(brown, 1, 0), UpdateTile(yellow, 1, 1), UpdateTile(white, 1, 2), UpdateTile(white, 1, 3), UpdateTile(blue, 1, 4), UpdateTile(brown, 1, 5), UpdateTile(yellow, 1, 6), UpdateTile(white, 2, 0), UpdateTile(white, 2, 1), UpdateTile(brown, 2, 2), UpdateTile(blue, 2, 3), UpdateTile(white, 2, 4), UpdateTile(brown, 2, 5), UpdateTile(brown, 2, 6), UpdateTile(white, 3, 0), UpdateTile(yellow, 3, 1), UpdateTile(blue, 3, 2), UpdateTile(blue, 3, 3), UpdateTile(yellow, 3, 4), UpdateTile(yellow, 3, 5), UpdateTile(white, 3, 6), UpdateTile(brown, 4, 0), UpdateTile(blue, 4, 1), UpdateTile(yellow, 4, 2), UpdateTile(blue, 4, 3), UpdateTile(brown, 4, 4), UpdateTile(yellow, 4, 5), UpdateTile(brown, 4, 6), UpdateTile(yellow, 5, 0), UpdateTile(white, 5, 1), UpdateTile(brown, 5, 2), UpdateTile(yellow, 5, 3), UpdateTile(blue, 5, 4), UpdateTile(brown, 5, 5), UpdateTile(white, 5, 6), UpdateTile(blue, 6, 0), UpdateTile(brown, 6, 1), UpdateTile(white, 6, 2), UpdateTile(brown, 6, 3), UpdateTile(white, 6, 4), UpdateTile(brown, 6, 5), UpdateTile(white, 6, 6), adoptObligation(surround(3, 3), 31, reduce(g, 700)), adoptProhibition(rejectRequests, reduce(a10, 500)), adoptProhibition(moveTooFast, reduce(a10, 300))]
[After]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	UpdateTile(brown, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateTile(blue, 0, 5)
},
{	UpdateTile(brown, 0, 6)
},
{	UpdateTile(brown, 1, 0)
},
{	UpdateTile(yellow, 1, 1)
},
{	UpdateTile(white, 1, 2)
},
{	UpdateTile(white, 1, 3)
},
{	UpdateTile(blue, 1, 4)
},
{	UpdateTile(brown, 1, 5)
},
{	UpdateTile(yellow, 1, 6)
},
{	UpdateTile(white, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateTile(brown, 2, 2)
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
},
{	adoptObligation(surround(3, 3), 31, reduce(g, 700))
},
{	adoptProhibition(rejectRequests, reduce(a10, 500))
},
{	adoptProhibition(moveTooFast, reduce(a10, 300))
}


Event processed UpdateTile(brown, 0, 1)
Event processed UpdateTile(white, 0, 2)
Event processed UpdateTile(yellow, 0, 3)
Event processed UpdateTile(brown, 0, 4)
Event processed UpdateTile(blue, 0, 5)
Event processed UpdateTile(brown, 0, 6)
Event processed UpdateTile(brown, 1, 0)
Event processed UpdateTile(yellow, 1, 1)
Event processed UpdateTile(white, 1, 2)
Event processed UpdateTile(white, 1, 3)
Event processed UpdateTile(blue, 1, 4)
Event processed UpdateTile(brown, 1, 5)
Event processed UpdateTile(yellow, 1, 6)
Event processed UpdateTile(white, 2, 0)
Event processed UpdateTile(white, 2, 1)
Event processed UpdateTile(brown, 2, 2)
Event processed UpdateTile(blue, 2, 3)
Event processed UpdateTile(white, 2, 4)
Event processed UpdateTile(brown, 2, 5)
Event processed UpdateTile(brown, 2, 6)
Event processed UpdateTile(white, 3, 0)
Event processed UpdateTile(yellow, 3, 1)
Event processed UpdateTile(blue, 3, 2)
Event processed UpdateTile(blue, 3, 3)
Event processed UpdateTile(yellow, 3, 4)
Event processed UpdateTile(yellow, 3, 5)
Event processed UpdateTile(white, 3, 6)
Event processed UpdateTile(brown, 4, 0)
Event processed UpdateTile(blue, 4, 1)
Event processed UpdateTile(yellow, 4, 2)
Event processed UpdateTile(blue, 4, 3)
Event processed UpdateTile(brown, 4, 4)
Event processed UpdateTile(yellow, 4, 5)
Event processed UpdateTile(brown, 4, 6)
Event processed UpdateTile(yellow, 5, 0)
Event processed UpdateTile(white, 5, 1)
Event processed UpdateTile(brown, 5, 2)
Event processed UpdateTile(yellow, 5, 3)
Event processed UpdateTile(blue, 5, 4)
Event processed UpdateTile(brown, 5, 5)
Event processed UpdateTile(white, 5, 6)
Event processed UpdateTile(blue, 6, 0)
Event processed UpdateTile(brown, 6, 1)
Event processed UpdateTile(white, 6, 2)
Event processed UpdateTile(brown, 6, 3)
Event processed UpdateTile(white, 6, 4)
Event processed UpdateTile(brown, 6, 5)
Event processed UpdateTile(white, 6, 6)
Event processed adoptProhibition(rejectRequests, reduce(a40, 500))
Event processed adoptProhibition(moveTooFast, reduce(a40, 300))
Event processed UpdateTile(brown, 0, 1)
Event processed UpdateTile(white, 0, 2)
Event processed UpdateTile(yellow, 0, 3)
Event processed UpdateTile(brown, 0, 4)
Event processed UpdateTile(blue, 0, 5)
Event processed UpdateTile(brown, 0, 6)
Event processed UpdateTile(brown, 1, 0)
Event processed UpdateTile(yellow, 1, 1)
Event processed UpdateTile(white, 1, 2)
Event processed UpdateTile(white, 1, 3)
Event processed UpdateTile(blue, 1, 4)
Event processed UpdateTile(brown, 1, 5)
Event processed UpdateTile(yellow, 1, 6)
Event processed UpdateTile(white, 2, 0)
Event processed UpdateTile(white, 2, 1)
Event processed UpdateTile(brown, 2, 2)
Event processed UpdateTile(blue, 2, 3)
Event processed UpdateTile(white, 2, 4)
Event processed UpdateTile(brown, 2, 5)
Event processed UpdateTile(brown, 2, 6)
Event processed UpdateTile(white, 3, 0)
Event processed UpdateTile(yellow, 3, 1)
Event processed UpdateTile(blue, 3, 2)
Event processed UpdateTile(blue, 3, 3)
Event processed UpdateTile(yellow, 3, 4)
Event processed UpdateTile(yellow, 3, 5)
Event processed UpdateTile(white, 3, 6)
Event processed UpdateTile(brown, 4, 0)
Event processed UpdateTile(blue, 4, 1)
Event processed UpdateTile(yellow, 4, 2)
Event processed UpdateTile(blue, 4, 3)
Event processed UpdateTile(brown, 4, 4)
Event processed UpdateTile(yellow, 4, 5)
Event processed UpdateTile(brown, 4, 6)
Event processed UpdateTile(yellow, 5, 0)
Event processed UpdateTile(white, 5, 1)
Event processed UpdateTile(brown, 5, 2)
Event processed UpdateTile(yellow, 5, 3)
Event processed UpdateTile(blue, 5, 4)
Event processed UpdateTile(brown, 5, 5)
Event processed UpdateTile(white, 5, 6)
Event processed UpdateTile(blue, 6, 0)
Event processed UpdateTile(brown, 6, 1)
Event processed UpdateTile(white, 6, 2)
Event processed UpdateTile(brown, 6, 3)
Event processed UpdateTile(white, 6, 4)
Event processed UpdateTile(brown, 6, 5)
Event processed UpdateTile(white, 6, 6)
Event processed adoptProhibition(rejectRequests, reduce(a30, 500))
Event processed adoptProhibition(moveTooFast, reduce(a30, 300))
[Planbase]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateTile(blue, 0, 5)
},
{	UpdateTile(brown, 0, 6)
},
{	UpdateTile(brown, 1, 0)
},
{	UpdateTile(yellow, 1, 1)
},
{	UpdateTile(white, 1, 2)
},
{	UpdateTile(white, 1, 3)
},
{	UpdateTile(blue, 1, 4)
},
{	UpdateTile(brown, 1, 5)
},
{	UpdateTile(yellow, 1, 6)
},
{	UpdateTile(white, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateTile(brown, 2, 2)
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
},
{	adoptProhibition(rejectRequests, reduce(a40, 500))
},
{	adoptProhibition(moveTooFast, reduce(a40, 300))
}


[new scheduled]:[GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos, ReceivedEvent(game_initialized), UpdateTile(brown, 0, 1), UpdateTile(white, 0, 2), UpdateTile(yellow, 0, 3), UpdateTile(brown, 0, 4), UpdateTile(blue, 0, 5), UpdateTile(brown, 0, 6), UpdateTile(brown, 1, 0), UpdateTile(yellow, 1, 1), UpdateTile(white, 1, 2), UpdateTile(white, 1, 3), UpdateTile(blue, 1, 4), UpdateTile(brown, 1, 5), UpdateTile(yellow, 1, 6), UpdateTile(white, 2, 0), UpdateTile(white, 2, 1), UpdateTile(brown, 2, 2), UpdateTile(blue, 2, 3), UpdateTile(white, 2, 4), UpdateTile(brown, 2, 5), UpdateTile(brown, 2, 6), UpdateTile(white, 3, 0), UpdateTile(yellow, 3, 1), UpdateTile(blue, 3, 2), UpdateTile(blue, 3, 3), UpdateTile(yellow, 3, 4), UpdateTile(yellow, 3, 5), UpdateTile(white, 3, 6), UpdateTile(brown, 4, 0), UpdateTile(blue, 4, 1), UpdateTile(yellow, 4, 2), UpdateTile(blue, 4, 3), UpdateTile(brown, 4, 4), UpdateTile(yellow, 4, 5), UpdateTile(brown, 4, 6), UpdateTile(yellow, 5, 0), UpdateTile(white, 5, 1), UpdateTile(brown, 5, 2), UpdateTile(yellow, 5, 3), UpdateTile(blue, 5, 4), UpdateTile(brown, 5, 5), UpdateTile(white, 5, 6), UpdateTile(blue, 6, 0), UpdateTile(brown, 6, 1), UpdateTile(white, 6, 2), UpdateTile(brown, 6, 3), UpdateTile(white, 6, 4), UpdateTile(brown, 6, 5), UpdateTile(white, 6, 6), adoptProhibition(rejectRequests, reduce(a40, 500)), adoptProhibition(moveTooFast, reduce(a40, 300))]
[After]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateTile(blue, 0, 5)
},
{	UpdateTile(brown, 0, 6)
},
{	UpdateTile(brown, 1, 0)
},
{	UpdateTile(yellow, 1, 1)
},
{	UpdateTile(white, 1, 2)
},
{	UpdateTile(white, 1, 3)
},
{	UpdateTile(blue, 1, 4)
},
{	UpdateTile(brown, 1, 5)
},
{	UpdateTile(yellow, 1, 6)
},
{	UpdateTile(white, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateTile(brown, 2, 2)
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
},
{	adoptProhibition(rejectRequests, reduce(a40, 500))
},
{	adoptProhibition(moveTooFast, reduce(a40, 300))
}


[Planbase]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateTile(blue, 0, 5)
},
{	UpdateTile(brown, 0, 6)
},
{	UpdateTile(brown, 1, 0)
},
{	UpdateTile(yellow, 1, 1)
},
{	UpdateTile(white, 1, 2)
},
{	UpdateTile(white, 1, 3)
},
{	UpdateTile(blue, 1, 4)
},
{	UpdateTile(brown, 1, 5)
},
{	UpdateTile(yellow, 1, 6)
},
{	UpdateTile(white, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateTile(brown, 2, 2)
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
},
{	adoptProhibition(rejectRequests, reduce(a30, 500))
},
{	adoptProhibition(moveTooFast, reduce(a30, 300))
}


[new scheduled]:[GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos, ReceivedEvent(game_initialized), UpdateTile(brown, 0, 1), UpdateTile(white, 0, 2), UpdateTile(yellow, 0, 3), UpdateTile(brown, 0, 4), UpdateTile(blue, 0, 5), UpdateTile(brown, 0, 6), UpdateTile(brown, 1, 0), UpdateTile(yellow, 1, 1), UpdateTile(white, 1, 2), UpdateTile(white, 1, 3), UpdateTile(blue, 1, 4), UpdateTile(brown, 1, 5), UpdateTile(yellow, 1, 6), UpdateTile(white, 2, 0), UpdateTile(white, 2, 1), UpdateTile(brown, 2, 2), UpdateTile(blue, 2, 3), UpdateTile(white, 2, 4), UpdateTile(brown, 2, 5), UpdateTile(brown, 2, 6), UpdateTile(white, 3, 0), UpdateTile(yellow, 3, 1), UpdateTile(blue, 3, 2), UpdateTile(blue, 3, 3), UpdateTile(yellow, 3, 4), UpdateTile(yellow, 3, 5), UpdateTile(white, 3, 6), UpdateTile(brown, 4, 0), UpdateTile(blue, 4, 1), UpdateTile(yellow, 4, 2), UpdateTile(blue, 4, 3), UpdateTile(brown, 4, 4), UpdateTile(yellow, 4, 5), UpdateTile(brown, 4, 6), UpdateTile(yellow, 5, 0), UpdateTile(white, 5, 1), UpdateTile(brown, 5, 2), UpdateTile(yellow, 5, 3), UpdateTile(blue, 5, 4), UpdateTile(brown, 5, 5), UpdateTile(white, 5, 6), UpdateTile(blue, 6, 0), UpdateTile(brown, 6, 1), UpdateTile(white, 6, 2), UpdateTile(brown, 6, 3), UpdateTile(white, 6, 4), UpdateTile(brown, 6, 5), UpdateTile(white, 6, 6), adoptProhibition(rejectRequests, reduce(a30, 500)), adoptProhibition(moveTooFast, reduce(a30, 300))]
[After]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateTile(blue, 0, 5)
},
{	UpdateTile(brown, 0, 6)
},
{	UpdateTile(brown, 1, 0)
},
{	UpdateTile(yellow, 1, 1)
},
{	UpdateTile(white, 1, 2)
},
{	UpdateTile(white, 1, 3)
},
{	UpdateTile(blue, 1, 4)
},
{	UpdateTile(brown, 1, 5)
},
{	UpdateTile(yellow, 1, 6)
},
{	UpdateTile(white, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateTile(brown, 2, 2)
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
},
{	adoptProhibition(rejectRequests, reduce(a30, 500))
},
{	adoptProhibition(moveTooFast, reduce(a30, 300))
}


[Planbase]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
},
{	adoptz(surround(3, 3, 700) : 27 May 2015 14:44:45 GMT, priority 10)
},
{	AdoptP(rejectRequests(500));
	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	AdoptP(movedTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[getId; B(agentId(ID)); getRole(ID); getPos, ReceivedEvent(game_initialized), adoptz(surround(3, 3, 700) : 27 May 2015 14:44:45 GMT, priority 10), AdoptP(rejectRequests(500)); aprohibition(rejectRequests(500) -> reduce(500), priority 0), AdoptP(movedTooFast(300)); aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
},
{	adoptz(surround(3, 3, 700) : 27 May 2015 14:44:45 GMT, priority 10)
},
{	AdoptP(rejectRequests(500));
	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	AdoptP(movedTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[Planbase]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	AdoptP(rejectRequests(500));
	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	AdoptP(movedTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[Initialize, getId; B(agentId(ID)); getRole(ID); getPos, AdoptP(rejectRequests(500)); aprohibition(rejectRequests(500) -> reduce(500), priority 0), AdoptP(movedTooFast(300)); aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	Initialize
},
{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	AdoptP(rejectRequests(500));
	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	AdoptP(movedTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[Planbase]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	AdoptP(rejectRequests(500));
	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	AdoptP(movedTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[Initialize, getId; B(agentId(ID)); getRole(ID); getPos, AdoptP(rejectRequests(500)); aprohibition(rejectRequests(500) -> reduce(500), priority 0), AdoptP(movedTooFast(300)); aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	Initialize
},
{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	AdoptP(rejectRequests(500));
	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	AdoptP(movedTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[Planbase]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[Initialize, @ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos, aprohibition(rejectRequests(500) -> reduce(500), priority 0), aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	Initialize
},
{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[Planbase]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[@ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos, aprohibition(rejectRequests(500) -> reduce(500), priority 0), aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[Planbase]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[@ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos, aprohibition(rejectRequests(500) -> reduce(500), priority 0), aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
},
{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[Planbase]:{	GetAgentId(0);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[GetAgentId(0); B(agentId(ID)); getRole(ID); getPos]
[After]:{	GetAgentId(0);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	GetAgentId(2);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[GetAgentId(2); B(agentId(ID)); getRole(ID); getPos]
[After]:{	GetAgentId(2);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	GetAgentId(3);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[GetAgentId(3); B(agentId(ID)); getRole(ID); getPos]
[After]:{	GetAgentId(3);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[B(agentId(ID)); getRole(ID); getPos]
[After]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[B(agentId(ID)); getRole(ID); getPos]
[After]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[B(agentId(ID)); getRole(ID); getPos]
[After]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	getRole(0);
	getPos
}


[new scheduled]:[getRole(0); getPos]
[After]:{	getRole(0);
	getPos
}


[Planbase]:{	getRole(2);
	getPos
}


[new scheduled]:[getRole(2); getPos]
[After]:{	getRole(2);
	getPos
}


[Planbase]:{	getRole(3);
	getPos
}


[new scheduled]:[getRole(3); getPos]
[After]:{	getRole(3);
	getPos
}


object notification: Time [clock=2, time=2015-05-27 15:28:07.716]
object notification: Time [clock=2, time=2015-05-27 15:28:07.716]
object notification: Time [clock=2, time=2015-05-27 15:28:07.716]
org notification: Time [clock=2, time=2015-05-27 15:28:07.716]
Event processed UpdateClock(2)
Event processed UpdateClock(2)
Event processed UpdateClock(2)
[Planbase]:{	@ctenv(getRole(0),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(0, X);
	getPos
},
{	UpdateClock(2)
}


[new scheduled]:[@ctenv(getRole(0),L1,0); B(L1=[actionresult(X)]); GetRole(0, X); getPos, UpdateClock(2)]
[After]:{	@ctenv(getRole(0),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(0, X);
	getPos
},
{	UpdateClock(2)
}


[Planbase]:{	@ctenv(getRole(2),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(2, X);
	getPos
},
{	UpdateClock(2)
}


[new scheduled]:[@ctenv(getRole(2),L1,0); B(L1=[actionresult(X)]); GetRole(2, X); getPos, UpdateClock(2)]
[After]:{	@ctenv(getRole(2),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(2, X);
	getPos
},
{	UpdateClock(2)
}


[Planbase]:{	@ctenv(getRole(3),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(3, X);
	getPos
},
{	UpdateClock(2)
}


[new scheduled]:[@ctenv(getRole(3),L1,0); B(L1=[actionresult(X)]); GetRole(3, X); getPos, UpdateClock(2)]
[After]:{	@ctenv(getRole(3),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(3, X);
	getPos
},
{	UpdateClock(2)
}


[Planbase]:{	GetRole(0, ra);
	getPos
}


[new scheduled]:[GetRole(0, ra); getPos]
[After]:{	GetRole(0, ra);
	getPos
}


[Planbase]:{	GetRole(2, none);
	getPos
}


[new scheduled]:[GetRole(2, none); getPos]
[After]:{	GetRole(2, none);
	getPos
}


[Planbase]:{	GetRole(3, none);
	getPos
}


[new scheduled]:[GetRole(3, none); getPos]
[After]:{	GetRole(3, none);
	getPos
}


[Planbase]:{	getPos
}


[new scheduled]:[getPos]
[After]:{	getPos
}


[Planbase]:{	getPos
}


[new scheduled]:[getPos]
[After]:{	getPos
}


[Planbase]:{	getPos
}


[new scheduled]:[Surround(3, 3); sendSouth(a10, 3, 3, 100); sendWest(a20, 3, 3, 100); sendEast(a30, 3, 3, 100); sendNorth(a40, 3, 3, 100); color(white, a10, yes, 100); color(white, a20, yes, 100); color(white, a30, yes, 100); color(white, a40, yes, 100); color(blue, a10, no, 1000); color(blue, a20, no, 1000); color(blue, a30, no, 1000); color(blue, a40, no, 1000); dropgoal(surround(3, 3, 700) : Infinite, priority 10), getPos]
[After]:{	Surround(3, 3);
	sendSouth(a10, 3, 3, 100);
	sendWest(a20, 3, 3, 100);
	sendEast(a30, 3, 3, 100);
	sendNorth(a40, 3, 3, 100);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	getPos
}


[Planbase]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[new scheduled]:[@ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)]
[After]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[Planbase]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[new scheduled]:[@ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)]
[After]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[Planbase]:{	sendSouth(a10, 3, 3, 100);
	sendWest(a20, 3, 3, 100);
	sendEast(a30, 3, 3, 100);
	sendNorth(a40, 3, 3, 100);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[new scheduled]:[sendSouth(a10, 3, 3, 100); sendWest(a20, 3, 3, 100); sendEast(a30, 3, 3, 100); sendNorth(a40, 3, 3, 100); color(white, a10, yes, 100); color(white, a20, yes, 100); color(white, a30, yes, 100); color(white, a40, yes, 100); color(blue, a10, no, 1000); color(blue, a20, no, 1000); color(blue, a30, no, 1000); color(blue, a40, no, 1000); dropgoal(surround(3, 3, 700) : Infinite, priority 10), @ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)]
[After]:{	sendSouth(a10, 3, 3, 100);
	sendWest(a20, 3, 3, 100);
	sendEast(a30, 3, 3, 100);
	sendNorth(a40, 3, 3, 100);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[CTAH] Agentposition: [6,6]
[CTAH] Agentposition: [0,6]
[CTAH] Agentposition: [0,0]
[Planbase]:{	B(clock(C));
	GetAgentPos(6, 6, C)
}


[new scheduled]:[B(clock(C)); GetAgentPos(6, 6, C)]
[After]:{	B(clock(C));
	GetAgentPos(6, 6, C)
}


[Planbase]:{	B(clock(C));
	GetAgentPos(0, 6, C)
}


[new scheduled]:[B(clock(C)); GetAgentPos(0, 6, C)]
[After]:{	B(clock(C));
	GetAgentPos(0, 6, C)
}


[Planbase]:{	@ctenv(setGoal(a10, 3, 2, 3, 3, 100),L,0);
	sendWest(a20, 3, 3, 100);
	sendEast(a30, 3, 3, 100);
	sendNorth(a40, 3, 3, 100);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	B(clock(C));
	GetAgentPos(0, 0, C)
}


[new scheduled]:[@ctenv(setGoal(a10, 3, 2, 3, 3, 100),L,0); sendWest(a20, 3, 3, 100); sendEast(a30, 3, 3, 100); sendNorth(a40, 3, 3, 100); color(white, a10, yes, 100); color(white, a20, yes, 100); color(white, a30, yes, 100); color(white, a40, yes, 100); color(blue, a10, no, 1000); color(blue, a20, no, 1000); color(blue, a30, no, 1000); color(blue, a40, no, 1000); dropgoal(surround(3, 3, 700) : Infinite, priority 10), B(clock(C)); GetAgentPos(0, 0, C)]
[After]:{	@ctenv(setGoal(a10, 3, 2, 3, 3, 100),L,0);
	sendWest(a20, 3, 3, 100);
	sendEast(a30, 3, 3, 100);
	sendNorth(a40, 3, 3, 100);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	B(clock(C));
	GetAgentPos(0, 0, C)
}


agent writes: SetGoal [id=null, agent=a10, cell=Cell [x=3, y=2], goal=Cell [x=3, y=3], sanction=100, clock=2, time=2015-05-27 15:28:08.608]
org notification: SetGoal [id=null, agent=a10, cell=Cell [x=3, y=2], goal=Cell [x=3, y=3], sanction=100, clock=2, time=2015-05-27 15:28:08.608]
object notification: Obligation [subject=a10, obligation=[at(3, 2, a10)], sanction=[reduce(a10, 700)], deadline=28, time=2015-05-27 15:28:08.618, clock=2]
[Planbase]:{	GetAgentPos(6, 6, 2)
}


[new scheduled]:[GetAgentPos(6, 6, 2)]
[After]:{	GetAgentPos(6, 6, 2)
}


[Planbase]:{	GetAgentPos(0, 6, 2)
}


[new scheduled]:[GetAgentPos(0, 6, 2)]
[After]:{	GetAgentPos(0, 6, 2)
}


Event processed adoptObligation(at(3, 2, a10), 28, reduce(a10, 700))
[Planbase]:{	@ctenv(setGoal(a20, 2, 3, 3, 3, 100),L,0);
	sendEast(a30, 3, 3, 100);
	sendNorth(a40, 3, 3, 100);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	GetAgentPos(0, 0, 2)
},
{	adoptObligation(at(3, 2, a10), 28, reduce(a10, 700))
}


[new scheduled]:[@ctenv(setGoal(a20, 2, 3, 3, 3, 100),L,0); sendEast(a30, 3, 3, 100); sendNorth(a40, 3, 3, 100); color(white, a10, yes, 100); color(white, a20, yes, 100); color(white, a30, yes, 100); color(white, a40, yes, 100); color(blue, a10, no, 1000); color(blue, a20, no, 1000); color(blue, a30, no, 1000); color(blue, a40, no, 1000); dropgoal(surround(3, 3, 700) : Infinite, priority 10), GetAgentPos(0, 0, 2), adoptObligation(at(3, 2, a10), 28, reduce(a10, 700))]
[After]:{	@ctenv(setGoal(a20, 2, 3, 3, 3, 100),L,0);
	sendEast(a30, 3, 3, 100);
	sendNorth(a40, 3, 3, 100);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	GetAgentPos(0, 0, 2)
},
{	adoptObligation(at(3, 2, a10), 28, reduce(a10, 700))
}


agent writes: SetGoal [id=null, agent=a20, cell=Cell [x=2, y=3], goal=Cell [x=3, y=3], sanction=100, clock=2, time=2015-05-27 15:28:08.778]
org notification: SetGoal [id=null, agent=a20, cell=Cell [x=2, y=3], goal=Cell [x=3, y=3], sanction=100, clock=2, time=2015-05-27 15:28:08.778]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	@ctenv(setGoal(a30, 4, 3, 3, 3, 100),L,0);
	sendNorth(a40, 3, 3, 100);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	adoptz(at(3, 2, 700) : 27 May 2015 14:44:48 GMT, priority 10)
}


[new scheduled]:[@ctenv(setGoal(a30, 4, 3, 3, 3, 100),L,0); sendNorth(a40, 3, 3, 100); color(white, a10, yes, 100); color(white, a20, yes, 100); color(white, a30, yes, 100); color(white, a40, yes, 100); color(blue, a10, no, 1000); color(blue, a20, no, 1000); color(blue, a30, no, 1000); color(blue, a40, no, 1000); dropgoal(surround(3, 3, 700) : Infinite, priority 10), adoptz(at(3, 2, 700) : 27 May 2015 14:44:48 GMT, priority 10)]
[After]:{	@ctenv(setGoal(a30, 4, 3, 3, 3, 100),L,0);
	sendNorth(a40, 3, 3, 100);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	adoptz(at(3, 2, 700) : 27 May 2015 14:44:48 GMT, priority 10)
}


agent writes: SetGoal [id=null, agent=a30, cell=Cell [x=4, y=3], goal=Cell [x=3, y=3], sanction=100, clock=2, time=2015-05-27 15:28:08.946]
org notification: SetGoal [id=null, agent=a30, cell=Cell [x=4, y=3], goal=Cell [x=3, y=3], sanction=100, clock=2, time=2015-05-27 15:28:08.946]
object notification: Obligation [subject=a30, obligation=[at(4, 3, a30)], sanction=[reduce(a30, 700)], deadline=28, time=2015-05-27 15:28:08.953, clock=2]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	@ctenv(setGoal(a40, 3, 4, 3, 3, 100),L,0);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
}


[new scheduled]:[@ctenv(setGoal(a40, 3, 4, 3, 3, 100),L,0); color(white, a10, yes, 100); color(white, a20, yes, 100); color(white, a30, yes, 100); color(white, a40, yes, 100); color(blue, a10, no, 1000); color(blue, a20, no, 1000); color(blue, a30, no, 1000); color(blue, a40, no, 1000); dropgoal(surround(3, 3, 700) : Infinite, priority 10)]
[After]:{	@ctenv(setGoal(a40, 3, 4, 3, 3, 100),L,0);
	color(white, a10, yes, 100);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
}


agent writes: SetGoal [id=null, agent=a40, cell=Cell [x=3, y=4], goal=Cell [x=3, y=3], sanction=100, clock=2, time=2015-05-27 15:28:09.115]
org notification: SetGoal [id=null, agent=a40, cell=Cell [x=3, y=4], goal=Cell [x=3, y=3], sanction=100, clock=2, time=2015-05-27 15:28:09.115]
Event processed adoptObligation(at(4, 3, a30), 28, reduce(a30, 700))
object notification: Obligation [subject=a40, obligation=[at(3, 4, a40)], sanction=[reduce(a40, 700)], deadline=28, time=2015-05-27 15:28:09.119, clock=2]
[Planbase]:{	adoptObligation(at(4, 3, a30), 28, reduce(a30, 700))
}


[new scheduled]:[adoptObligation(at(4, 3, a30), 28, reduce(a30, 700))]
[After]:{	adoptObligation(at(4, 3, a30), 28, reduce(a30, 700))
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	@ctenv(setColor(a10, white, yes, 100),L,0);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
}


[new scheduled]:[@ctenv(setColor(a10, white, yes, 100),L,0); color(white, a20, yes, 100); color(white, a30, yes, 100); color(white, a40, yes, 100); color(blue, a10, no, 1000); color(blue, a20, no, 1000); color(blue, a30, no, 1000); color(blue, a40, no, 1000); dropgoal(surround(3, 3, 700) : Infinite, priority 10)]
[After]:{	@ctenv(setColor(a10, white, yes, 100),L,0);
	color(white, a20, yes, 100);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
}


Event processed adoptObligation(at(3, 4, a40), 28, reduce(a40, 700))
agent writes: Color [id=null, color=white, agent=a10, type=yes, sanction=100, time=2015-05-27 15:28:09.278, clock=2]
org notification: Color [id=null, color=white, agent=a10, type=yes, sanction=100, time=2015-05-27 15:28:09.278, clock=2]
object notification: Obligation [subject=a10, obligation=[color(white, a10)], sanction=[reduce(a10, 100)], deadline=22, time=2015-05-27 15:28:09.287, clock=2]
[Planbase]:{	adoptz(at(4, 3, 700) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(at(4, 3, 700) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(at(4, 3, 700) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptObligation(at(3, 4, a40), 28, reduce(a40, 700))
}


[new scheduled]:[adoptObligation(at(3, 4, a40), 28, reduce(a40, 700))]
[After]:{	adoptObligation(at(3, 4, a40), 28, reduce(a40, 700))
}


Event processed adoptObligation(color(white, a10), 22, reduce(a10, 100))
[Planbase]:{	@ctenv(setColor(a20, white, yes, 100),L,0);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	adoptObligation(color(white, a10), 22, reduce(a10, 100))
}


[new scheduled]:[@ctenv(setColor(a20, white, yes, 100),L,0); color(white, a30, yes, 100); color(white, a40, yes, 100); color(blue, a10, no, 1000); color(blue, a20, no, 1000); color(blue, a30, no, 1000); color(blue, a40, no, 1000); dropgoal(surround(3, 3, 700) : Infinite, priority 10), adoptObligation(color(white, a10), 22, reduce(a10, 100))]
[After]:{	@ctenv(setColor(a20, white, yes, 100),L,0);
	color(white, a30, yes, 100);
	color(white, a40, yes, 100);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	adoptObligation(color(white, a10), 22, reduce(a10, 100))
}


agent writes: Color [id=null, color=white, agent=a20, type=yes, sanction=100, time=2015-05-27 15:28:09.437, clock=2]
org notification: Color [id=null, color=white, agent=a20, type=yes, sanction=100, time=2015-05-27 15:28:09.437, clock=2]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	adoptz(at(3, 4, 700) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(at(3, 4, 700) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(at(3, 4, 700) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	@ctenv(setColor(a30, white, yes, 100),L,0);
	color(white, a40, yes, 100);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[@ctenv(setColor(a30, white, yes, 100),L,0); color(white, a40, yes, 100); color(blue, a10, no, 1000); color(blue, a20, no, 1000); color(blue, a30, no, 1000); color(blue, a40, no, 1000); dropgoal(surround(3, 3, 700) : Infinite, priority 10), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	@ctenv(setColor(a30, white, yes, 100),L,0);
	color(white, a40, yes, 100);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


agent writes: Color [id=null, color=white, agent=a30, type=yes, sanction=100, time=2015-05-27 15:28:09.602, clock=2]
org notification: Color [id=null, color=white, agent=a30, type=yes, sanction=100, time=2015-05-27 15:28:09.602, clock=2]
object notification: Obligation [subject=a30, obligation=[color(white, a30)], sanction=[reduce(a30, 100)], deadline=22, time=2015-05-27 15:28:09.606, clock=2]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	@ctenv(setColor(a40, white, yes, 100),L,0);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
}


[new scheduled]:[@ctenv(setColor(a40, white, yes, 100),L,0); color(blue, a10, no, 1000); color(blue, a20, no, 1000); color(blue, a30, no, 1000); color(blue, a40, no, 1000); dropgoal(surround(3, 3, 700) : Infinite, priority 10)]
[After]:{	@ctenv(setColor(a40, white, yes, 100),L,0);
	color(blue, a10, no, 1000);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
}


Event processed adoptObligation(color(white, a30), 22, reduce(a30, 100))
agent writes: Color [id=null, color=white, agent=a40, type=yes, sanction=100, time=2015-05-27 15:28:09.802, clock=2]
org notification: Color [id=null, color=white, agent=a40, type=yes, sanction=100, time=2015-05-27 15:28:09.802, clock=2]
object notification: Obligation [subject=a40, obligation=[color(white, a40)], sanction=[reduce(a40, 100)], deadline=22, time=2015-05-27 15:28:09.806, clock=2]
[Planbase]:{	adoptObligation(color(white, a30), 22, reduce(a30, 100))
}


[new scheduled]:[adoptObligation(color(white, a30), 22, reduce(a30, 100))]
[After]:{	adoptObligation(color(white, a30), 22, reduce(a30, 100))
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	@ctenv(setColor(a10, blue, no, 1000),L,0);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
}


[new scheduled]:[@ctenv(setColor(a10, blue, no, 1000),L,0); color(blue, a20, no, 1000); color(blue, a30, no, 1000); color(blue, a40, no, 1000); dropgoal(surround(3, 3, 700) : Infinite, priority 10)]
[After]:{	@ctenv(setColor(a10, blue, no, 1000),L,0);
	color(blue, a20, no, 1000);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
}


Event processed adoptObligation(color(white, a40), 22, reduce(a40, 100))
[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


agent writes: Color [id=null, color=blue, agent=a10, type=no, sanction=1000, time=2015-05-27 15:28:09.985, clock=2]
org notification: Color [id=null, color=blue, agent=a10, type=no, sanction=1000, time=2015-05-27 15:28:09.985, clock=2]
object notification: Prohibition [subject=a10, prohibition=[color(blue, a10)], sanction=[reduce(a10, 1000)], clock=2, time=2015-05-27 15:28:09.989]
[Planbase]:{	adoptObligation(color(white, a40), 22, reduce(a40, 100))
}


[new scheduled]:[adoptObligation(color(white, a40), 22, reduce(a40, 100))]
[After]:{	adoptObligation(color(white, a40), 22, reduce(a40, 100))
}


Event processed adoptProhibition(color(blue, a10), reduce(a10, 1000))
[Planbase]:{	@ctenv(setColor(a20, blue, no, 1000),L,0);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	adoptProhibition(color(blue, a10), reduce(a10, 1000))
}


[new scheduled]:[@ctenv(setColor(a20, blue, no, 1000),L,0); color(blue, a30, no, 1000); color(blue, a40, no, 1000); dropgoal(surround(3, 3, 700) : Infinite, priority 10), adoptProhibition(color(blue, a10), reduce(a10, 1000))]
[After]:{	@ctenv(setColor(a20, blue, no, 1000),L,0);
	color(blue, a30, no, 1000);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	adoptProhibition(color(blue, a10), reduce(a10, 1000))
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:50 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:50 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:50 GMT, priority 10)
}


agent writes: Color [id=null, color=blue, agent=a20, type=no, sanction=1000, time=2015-05-27 15:28:10.191, clock=2]
org notification: Color [id=null, color=blue, agent=a20, type=no, sanction=1000, time=2015-05-27 15:28:10.191, clock=2]
[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	@ctenv(setColor(a30, blue, no, 1000),L,0);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	AdoptP(useColor(blue, 1000));
	aprohibition(useColor(blue, 1000) -> reduce(1000), priority 0)
}


[new scheduled]:[@ctenv(setColor(a30, blue, no, 1000),L,0); color(blue, a40, no, 1000); dropgoal(surround(3, 3, 700) : Infinite, priority 10), AdoptP(useColor(blue, 1000)); aprohibition(useColor(blue, 1000) -> reduce(1000), priority 0)]
[After]:{	@ctenv(setColor(a30, blue, no, 1000),L,0);
	color(blue, a40, no, 1000);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	AdoptP(useColor(blue, 1000));
	aprohibition(useColor(blue, 1000) -> reduce(1000), priority 0)
}


[Planbase]:


[new scheduled]:[]
[After]:


agent writes: Color [id=null, color=blue, agent=a30, type=no, sanction=1000, time=2015-05-27 15:28:10.384, clock=2]
org notification: Color [id=null, color=blue, agent=a30, type=no, sanction=1000, time=2015-05-27 15:28:10.384, clock=2]
object notification: Prohibition [subject=a30, prohibition=[color(blue, a30)], sanction=[reduce(a30, 1000)], clock=2, time=2015-05-27 15:28:10.388]
Event processed adoptProhibition(color(blue, a30), reduce(a30, 1000))
[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	adoptProhibition(color(blue, a30), reduce(a30, 1000))
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10), adoptProhibition(color(blue, a30), reduce(a30, 1000))]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	adoptProhibition(color(blue, a30), reduce(a30, 1000))
}


[Planbase]:{	@ctenv(setColor(a40, blue, no, 1000),L,0);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	aprohibition(useColor(blue, 1000) -> reduce(1000), priority 0)
}


[new scheduled]:[@ctenv(setColor(a40, blue, no, 1000),L,0); dropgoal(surround(3, 3, 700) : Infinite, priority 10), aprohibition(useColor(blue, 1000) -> reduce(1000), priority 0)]
[After]:{	@ctenv(setColor(a40, blue, no, 1000),L,0);
	dropgoal(surround(3, 3, 700) : Infinite, priority 10)
},
{	aprohibition(useColor(blue, 1000) -> reduce(1000), priority 0)
}


agent writes: Color [id=null, color=blue, agent=a40, type=no, sanction=1000, time=2015-05-27 15:28:10.568, clock=2]
org notification: Color [id=null, color=blue, agent=a40, type=no, sanction=1000, time=2015-05-27 15:28:10.568, clock=2]
object notification: Prohibition [subject=a40, prohibition=[color(blue, a40)], sanction=[reduce(a40, 1000)], clock=2, time=2015-05-27 15:28:10.573]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	AdoptP(useColor(blue, 1000));
	aprohibition(useColor(blue, 1000) -> reduce(1000), priority 0)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10), AdoptP(useColor(blue, 1000)); aprohibition(useColor(blue, 1000) -> reduce(1000), priority 0)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	AdoptP(useColor(blue, 1000));
	aprohibition(useColor(blue, 1000) -> reduce(1000), priority 0)
}


[Planbase]:


[new scheduled]:[]
[After]:


Event processed adoptProhibition(color(blue, a40), reduce(a40, 1000))
[Planbase]:{	adoptProhibition(color(blue, a40), reduce(a40, 1000))
}


[new scheduled]:[adoptProhibition(color(blue, a40), reduce(a40, 1000))]
[After]:{	adoptProhibition(color(blue, a40), reduce(a40, 1000))
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	aprohibition(useColor(blue, 1000) -> reduce(1000), priority 0)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10), aprohibition(useColor(blue, 1000) -> reduce(1000), priority 0)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	aprohibition(useColor(blue, 1000) -> reduce(1000), priority 0)
}


[Planbase]:{	AdoptP(useColor(blue, 1000));
	aprohibition(useColor(blue, 1000) -> reduce(1000), priority 0)
}


[new scheduled]:[AdoptP(useColor(blue, 1000)); aprohibition(useColor(blue, 1000) -> reduce(1000), priority 0)]
[After]:{	AdoptP(useColor(blue, 1000));
	aprohibition(useColor(blue, 1000) -> reduce(1000), priority 0)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	aprohibition(useColor(blue, 1000) -> reduce(1000), priority 0)
}


[new scheduled]:[aprohibition(useColor(blue, 1000) -> reduce(1000), priority 0)]
[After]:{	aprohibition(useColor(blue, 1000) -> reduce(1000), priority 0)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


object notification: Time [clock=3, time=2015-05-27 15:28:17.719]
object notification: Time [clock=3, time=2015-05-27 15:28:17.719]
object notification: Time [clock=3, time=2015-05-27 15:28:17.719]
org notification: Time [clock=3, time=2015-05-27 15:28:17.719]
Event processed UpdateClock(3)
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	UpdateClock(3)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10), UpdateClock(3)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	UpdateClock(3)
}


Event processed UpdateClock(3)
Event processed UpdateClock(3)
[Planbase]:{	UpdateClock(3)
}


[new scheduled]:[UpdateClock(3)]
[After]:{	UpdateClock(3)
}


[Planbase]:{	UpdateClock(3)
}


[new scheduled]:[UpdateClock(3)]
[After]:{	UpdateClock(3)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


object notification: Time [clock=4, time=2015-05-27 15:28:27.723]
object notification: Time [clock=4, time=2015-05-27 15:28:27.723]
org notification: Time [clock=4, time=2015-05-27 15:28:27.723]
object notification: Time [clock=4, time=2015-05-27 15:28:27.723]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


Event processed UpdateClock(4)
[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	UpdateClock(4)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10), UpdateClock(4)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	UpdateClock(4)
}


Event processed UpdateClock(4)
Event processed UpdateClock(4)
[Planbase]:{	UpdateClock(4)
}


[new scheduled]:[UpdateClock(4)]
[After]:{	UpdateClock(4)
}


[Planbase]:{	UpdateClock(4)
}


[new scheduled]:[UpdateClock(4)]
[After]:{	UpdateClock(4)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


setPhases in ClientGameStatus, the current phase is Communication Phase
setPhases in ClientGameStatus, the current phase is Communication Phase
setPhases in ClientGameStatus, the current phase is Communication Phase
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10), @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[CTAH] Array of Terms: [Lapapl.data.Term;@1662e91d
[CTAH] The created APLList : [phasechange]
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10), if B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[Planbase]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@1d2bd198
[CTAH] The created APLList : [phasechange]
[CTAH] Array of Terms: [Lapapl.data.Term;@14927a57
[CTAH] The created APLList : [phasechange]
[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10), if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	ReceivedEvent(phasechange)
}


[new scheduled]:[adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10), ReceivedEvent(phasechange)]
[After]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	ReceivedEvent(phasechange)
}


[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[update, adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	update
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	ReceivedEvent(phasechange)
}


[new scheduled]:[ReceivedEvent(phasechange)]
[After]:{	ReceivedEvent(phasechange)
}


[Planbase]:{	ReceivedEvent(phasechange)
}


[new scheduled]:[ReceivedEvent(phasechange)]
[After]:{	ReceivedEvent(phasechange)
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated, adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:


[new scheduled]:[update]
[After]:{	update
}


[Planbase]:


[new scheduled]:[update]
[After]:{	update
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated, adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	GetPhase(communicationphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[GetPhase(communicationphase); B(clock(Clock)); if B(event(phasechange)) then Updated, adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	GetPhase(communicationphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), B(clock(Clock)); if B(event(phasechange)) then Updated, adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	GetPhase(communicationphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[GetPhase(communicationphase); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	GetPhase(communicationphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	GetPhase(communicationphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[GetPhase(communicationphase); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	GetPhase(communicationphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[if B(event(phasechange)) then Updated, if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	Updated
},
{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[Updated, @ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	Updated
},
{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


a30[CTAH] going goal: 4,3 color: neco
[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(event(phasechange)) then Updated, if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(event(phasechange)) then Updated, if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	Updated
},
{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[Updated, @ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	Updated
},
{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a40[CTAH] going goal: 3,4 color: neco
[Planbase]:{	Updated
},
{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[Updated, @ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	Updated
},
{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a10[CTAH] going goal: 3,2 color: neco
object notification: Time [clock=5, time=2015-05-27 15:28:37.726]
org notification: Time [clock=5, time=2015-05-27 15:28:37.726]
object notification: Time [clock=5, time=2015-05-27 15:28:37.726]
object notification: Time [clock=5, time=2015-05-27 15:28:37.726]
a40[CTAH] paths: 1000
Need to wait 4 more seconds
a30[CTAH] paths: 1000
Need to wait 3 more seconds
a10[CTAH] paths: 1000
a10[CTAH] path: 0
a10[CTAH] path: Path: [0][0] [0][1] [1][1] [2][1] [2][2] [3][2]

a10[CTAH] moveStepToGoalTest nopoints: []
a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] found a chip....: (R:0,C:1)
a10[CTAH] moveStepToGoalTest sent proposal for: [0,1,1,6366]
org notification: Proposal [id=6366, agent=a10, agent2=a20, clock=5, time=2015-05-27 15:28:43.969]
Event processed UpdateClock(5)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 0, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6366=no)
							then	{	NextStep(0, 1, 6366)
								}
							else	{	NextStep(0, 1)
								}
						}
				}
			else	{	if	B(not 6366=no)
					then	{	NextStep(0, 1, 6366)
						}
					else	{	NextStep(0, 1)
						}
				}
		};
	if	B(not 6366=no)
	then	{	Sent(6366, 1, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(5)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 0, 1)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 6366=no) then NextStep(0, 1, 6366) else NextStep(0, 1) else if B(not 6366=no) then NextStep(0, 1, 6366) else NextStep(0, 1); if B(not 6366=no) then Sent(6366, 1, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(5)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 0, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6366=no)
							then	{	NextStep(0, 1, 6366)
								}
							else	{	NextStep(0, 1)
								}
						}
				}
			else	{	if	B(not 6366=no)
					then	{	NextStep(0, 1, 6366)
						}
					else	{	NextStep(0, 1)
						}
				}
		};
	if	B(not 6366=no)
	then	{	Sent(6366, 1, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(5)
}


[Planbase]:{	if	B(tile(Color1, 0, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6366=no)
							then	{	NextStep(0, 1, 6366)
								}
							else	{	NextStep(0, 1)
								}
						}
				}
			else	{	if	B(not 6366=no)
					then	{	NextStep(0, 1, 6366)
						}
					else	{	NextStep(0, 1)
						}
				}
		};
	if	B(not 6366=no)
	then	{	Sent(6366, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 0, 1)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 6366=no) then NextStep(0, 1, 6366) else NextStep(0, 1) else if B(not 6366=no) then NextStep(0, 1, 6366) else NextStep(0, 1); if B(not 6366=no) then Sent(6366, 1, open, 4); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(tile(Color1, 0, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6366=no)
							then	{	NextStep(0, 1, 6366)
								}
							else	{	NextStep(0, 1)
								}
						}
				}
			else	{	if	B(not 6366=no)
					then	{	NextStep(0, 1, 6366)
						}
					else	{	NextStep(0, 1)
						}
				}
		};
	if	B(not 6366=no)
	then	{	Sent(6366, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(brown, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 6366=no)
					then	{	NextStep(0, 1, 6366)
						}
					else	{	NextStep(0, 1)
						}
				}
		}
	else	{	if	B(not 6366=no)
			then	{	NextStep(0, 1, 6366)
				}
			else	{	NextStep(0, 1)
				}
		};
	if	B(not 6366=no)
	then	{	Sent(6366, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(brown, V2))) then if B(700>V2) then if B(not 6366=no) then NextStep(0, 1, 6366) else NextStep(0, 1) else if B(not 6366=no) then NextStep(0, 1, 6366) else NextStep(0, 1); if B(not 6366=no) then Sent(6366, 1, open, 4); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(prohibition(useColor(brown, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 6366=no)
					then	{	NextStep(0, 1, 6366)
						}
					else	{	NextStep(0, 1)
						}
				}
		}
	else	{	if	B(not 6366=no)
			then	{	NextStep(0, 1, 6366)
				}
			else	{	NextStep(0, 1)
				}
		};
	if	B(not 6366=no)
	then	{	Sent(6366, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(not 6366=no)
	then	{	NextStep(0, 1, 6366)
		}
	else	{	NextStep(0, 1)
		};
	if	B(not 6366=no)
	then	{	Sent(6366, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(not 6366=no) then NextStep(0, 1, 6366) else NextStep(0, 1); if B(not 6366=no) then Sent(6366, 1, open, 4); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(not 6366=no)
	then	{	NextStep(0, 1, 6366)
		}
	else	{	NextStep(0, 1)
		};
	if	B(not 6366=no)
	then	{	Sent(6366, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	NextStep(0, 1, 6366);
	if	B(not 6366=no)
	then	{	Sent(6366, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[NextStep(0, 1, 6366); if B(not 6366=no) then Sent(6366, 1, open, 4); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	NextStep(0, 1, 6366);
	if	B(not 6366=no)
	then	{	Sent(6366, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(not 6366=no)
	then	{	Sent(6366, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(not 6366=no) then Sent(6366, 1, open, 4); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(not 6366=no)
	then	{	Sent(6366, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	Sent(6366, 1, open, 4);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[Sent(6366, 1, open, 4); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	Sent(6366, 1, open, 4);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(5>4+5)
	then	{	NoNextStep(0, 1, 6366);
			ReceivedMessage(noresponse, 6366)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(5>4+5) then {NoNextStep(0, 1, 6366); ReceivedMessage(noresponse, 6366)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(5>4+5)
	then	{	NoNextStep(0, 1, 6366);
			ReceivedMessage(noresponse, 6366)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(5>4+5)
	then	{	NoNextStep(0, 1, 6366);
			ReceivedMessage(noresponse, 6366)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(5>4+5) then {NoNextStep(0, 1, 6366); ReceivedMessage(noresponse, 6366)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(5>4+5)
	then	{	NoNextStep(0, 1, 6366);
			ReceivedMessage(noresponse, 6366)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(5>4+5)
	then	{	NoNextStep(0, 1, 6366);
			ReceivedMessage(noresponse, 6366)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(5>4+5) then {NoNextStep(0, 1, 6366); ReceivedMessage(noresponse, 6366)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(5>4+5)
	then	{	NoNextStep(0, 1, 6366);
			ReceivedMessage(noresponse, 6366)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(5>4+5)
	then	{	NoNextStep(0, 1, 6366);
			ReceivedMessage(noresponse, 6366)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(5>4+5) then {NoNextStep(0, 1, 6366); ReceivedMessage(noresponse, 6366)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(5>4+5)
	then	{	NoNextStep(0, 1, 6366);
			ReceivedMessage(noresponse, 6366)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(5>4+5)
	then	{	NoNextStep(0, 1, 6366);
			ReceivedMessage(noresponse, 6366)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(5>4+5) then {NoNextStep(0, 1, 6366); ReceivedMessage(noresponse, 6366)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(5>4+5)
	then	{	NoNextStep(0, 1, 6366);
			ReceivedMessage(noresponse, 6366)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(5>4+5)
	then	{	NoNextStep(0, 1, 6366);
			ReceivedMessage(noresponse, 6366)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(5>4+5) then {NoNextStep(0, 1, 6366); ReceivedMessage(noresponse, 6366)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(5>4+5)
	then	{	NoNextStep(0, 1, 6366);
			ReceivedMessage(noresponse, 6366)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 0
[MSG] i'm: 0
AGENT : got response to offer
org notification: Response [id=6366, response=accepted, clock=5, time=2015-05-27 15:28:46.1]
[Planbase]:{	if	B(5>4+5)
	then	{	NoNextStep(0, 1, 6366);
			ReceivedMessage(noresponse, 6366)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(5>4+5) then {NoNextStep(0, 1, 6366); ReceivedMessage(noresponse, 6366)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(5>4+5)
	then	{	NoNextStep(0, 1, 6366);
			ReceivedMessage(noresponse, 6366)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


Event processed @ctenv(functionToList(message(response, 6366, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	@ctenv(functionToList(message(response, 6366, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), @ctenv(functionToList(message(response, 6366, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	@ctenv(functionToList(message(response, 6366, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@38761cf1
[CTAH] The created APLList : [response,6366,accept]
[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([response,6366,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,6366,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,6366,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([response,6366,accept])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([response,6366,accept])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([response,6366,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([response,6366,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,6366,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,6366,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B(5>4+5)
	then	{	NoNextStep(0, 1, 6366);
			ReceivedMessage(noresponse, 6366)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 6366)
		}
}


[new scheduled]:[if B(5>4+5) then {NoNextStep(0, 1, 6366); ReceivedMessage(noresponse, 6366)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B(response=response) then ReceivedMessage(accept, 6366)]
[After]:{	if	B(5>4+5)
	then	{	NoNextStep(0, 1, 6366);
			ReceivedMessage(noresponse, 6366)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 6366)
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(accept, 6366)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), ReceivedMessage(accept, 6366)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(accept, 6366)
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoal(neco, 0, 1),L2,0);
	if	B(L2=[actionresult([0,1])])
	then	{	B(clock(Clock));
			UpdatePosition(0, 1, Clock)
		};
	NoNextStep(0, 1, 6366);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoal(neco, 0, 1),L2,0); if B(L2=[actionresult([0,1])]) then {B(clock(Clock)); UpdatePosition(0, 1, Clock)}; NoNextStep(0, 1, 6366); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoal(neco, 0, 1),L2,0);
	if	B(L2=[actionresult([0,1])])
	then	{	B(clock(Clock));
			UpdatePosition(0, 1, Clock)
		};
	NoNextStep(0, 1, 6366);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a10[CTAH] moveStepToGoal returns: false
org notification: Position [subject=a10, id=null, cell=Cell [x=0, y=1], time=2015-05-27 15:28:46.579, clock=5]
object notification: Position [subject=a10, id=null, cell=Cell [x=0, y=1], time=2015-05-27 15:28:46.579, clock=5]
Event processed UpdatePosition(0, 1, 5)
[Planbase]:{	NoNextStep(0, 1, 6366);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdatePosition(0, 1, 5)
}


[new scheduled]:[NoNextStep(0, 1, 6366); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdatePosition(0, 1, 5)]
[After]:{	NoNextStep(0, 1, 6366);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdatePosition(0, 1, 5)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a30[CTAH] path: 0
a30[CTAH] path: Path: [6][6] [6][5] [5][5] [4][5] [4][4] [4][3]

a30[CTAH] moveStepToGoalTest nopoints: []
a30[CTAH] moveStepToGoalTest proposals: null
a30[CTAH] moveStepToGoalTest proposals: null
a30[CTAH] found a chip....: (R:6,C:5)
a30[CTAH] moveStepToGoalTest sent proposal for: [6,5,1,2871]
org notification: Proposal [id=2871, agent=a30, agent2=a20, clock=5, time=2015-05-27 15:28:46.739]
Event processed UpdateClock(5)
[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 6, 5))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 2871=no)
							then	{	NextStep(6, 5, 2871)
								}
							else	{	NextStep(6, 5)
								}
						}
				}
			else	{	if	B(not 2871=no)
					then	{	NextStep(6, 5, 2871)
						}
					else	{	NextStep(6, 5)
						}
				}
		};
	if	B(not 2871=no)
	then	{	Sent(2871, 1, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	UpdateClock(5)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 6, 5)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 2871=no) then NextStep(6, 5, 2871) else NextStep(6, 5) else if B(not 2871=no) then NextStep(6, 5, 2871) else NextStep(6, 5); if B(not 2871=no) then Sent(2871, 1, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10), UpdateClock(5)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 6, 5))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 2871=no)
							then	{	NextStep(6, 5, 2871)
								}
							else	{	NextStep(6, 5)
								}
						}
				}
			else	{	if	B(not 2871=no)
					then	{	NextStep(6, 5, 2871)
						}
					else	{	NextStep(6, 5)
						}
				}
		};
	if	B(not 2871=no)
	then	{	Sent(2871, 1, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	UpdateClock(5)
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(Color1, 6, 5))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 2871=no)
							then	{	NextStep(6, 5, 2871)
								}
							else	{	NextStep(6, 5)
								}
						}
				}
			else	{	if	B(not 2871=no)
					then	{	NextStep(6, 5, 2871)
						}
					else	{	NextStep(6, 5)
						}
				}
		};
	if	B(not 2871=no)
	then	{	Sent(2871, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[if B(tile(Color1, 6, 5)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 2871=no) then NextStep(6, 5, 2871) else NextStep(6, 5) else if B(not 2871=no) then NextStep(6, 5, 2871) else NextStep(6, 5); if B(not 2871=no) then Sent(2871, 1, open, 4); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	if	B(tile(Color1, 6, 5))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 2871=no)
							then	{	NextStep(6, 5, 2871)
								}
							else	{	NextStep(6, 5)
								}
						}
				}
			else	{	if	B(not 2871=no)
					then	{	NextStep(6, 5, 2871)
						}
					else	{	NextStep(6, 5)
						}
				}
		};
	if	B(not 2871=no)
	then	{	Sent(2871, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(brown, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 2871=no)
					then	{	NextStep(6, 5, 2871)
						}
					else	{	NextStep(6, 5)
						}
				}
		}
	else	{	if	B(not 2871=no)
			then	{	NextStep(6, 5, 2871)
				}
			else	{	NextStep(6, 5)
				}
		};
	if	B(not 2871=no)
	then	{	Sent(2871, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[if B(prohibition(useColor(brown, V2))) then if B(700>V2) then if B(not 2871=no) then NextStep(6, 5, 2871) else NextStep(6, 5) else if B(not 2871=no) then NextStep(6, 5, 2871) else NextStep(6, 5); if B(not 2871=no) then Sent(2871, 1, open, 4); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	if	B(prohibition(useColor(brown, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 2871=no)
					then	{	NextStep(6, 5, 2871)
						}
					else	{	NextStep(6, 5)
						}
				}
		}
	else	{	if	B(not 2871=no)
			then	{	NextStep(6, 5, 2871)
				}
			else	{	NextStep(6, 5)
				}
		};
	if	B(not 2871=no)
	then	{	Sent(2871, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


a10[CTAH] going goal: 3,2 color: neco
[Planbase]:{	if	B(not 2871=no)
	then	{	NextStep(6, 5, 2871)
		}
	else	{	NextStep(6, 5)
		};
	if	B(not 2871=no)
	then	{	Sent(2871, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[if B(not 2871=no) then NextStep(6, 5, 2871) else NextStep(6, 5); if B(not 2871=no) then Sent(2871, 1, open, 4); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	if	B(not 2871=no)
	then	{	NextStep(6, 5, 2871)
		}
	else	{	NextStep(6, 5)
		};
	if	B(not 2871=no)
	then	{	Sent(2871, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


a40[CTAH] path: 0
a40[CTAH] path: Path: [6][0] [6][1] [6][2] [6][3] [5][3] [4][3] [4][4] [3][4]

a40[CTAH] moveStepToGoalTest nopoints: []
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] found a chip....: (R:6,C:1)
a40[CTAH] moveStepToGoalTest sent proposal for: [6,1,1,2686]
org notification: Proposal [id=2686, agent=a40, agent2=a20, clock=5, time=2015-05-27 15:28:47.11]
Event processed UpdateClock(5)
[Planbase]:{	NextStep(6, 5, 2871);
	if	B(not 2871=no)
	then	{	Sent(2871, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[NextStep(6, 5, 2871); if B(not 2871=no) then Sent(2871, 1, open, 4); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	NextStep(6, 5, 2871);
	if	B(not 2871=no)
	then	{	Sent(2871, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 6, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 2686=no)
							then	{	NextStep(6, 1, 2686)
								}
							else	{	NextStep(6, 1)
								}
						}
				}
			else	{	if	B(not 2686=no)
					then	{	NextStep(6, 1, 2686)
						}
					else	{	NextStep(6, 1)
						}
				}
		};
	if	B(not 2686=no)
	then	{	Sent(2686, 1, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(5)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 6, 1)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 2686=no) then NextStep(6, 1, 2686) else NextStep(6, 1) else if B(not 2686=no) then NextStep(6, 1, 2686) else NextStep(6, 1); if B(not 2686=no) then Sent(2686, 1, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(5)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 6, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 2686=no)
							then	{	NextStep(6, 1, 2686)
								}
							else	{	NextStep(6, 1)
								}
						}
				}
			else	{	if	B(not 2686=no)
					then	{	NextStep(6, 1, 2686)
						}
					else	{	NextStep(6, 1)
						}
				}
		};
	if	B(not 2686=no)
	then	{	Sent(2686, 1, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(5)
}


[Planbase]:{	if	B(not 2871=no)
	then	{	Sent(2871, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[if B(not 2871=no) then Sent(2871, 1, open, 4); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	if	B(not 2871=no)
	then	{	Sent(2871, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	if	B(tile(Color1, 6, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 2686=no)
							then	{	NextStep(6, 1, 2686)
								}
							else	{	NextStep(6, 1)
								}
						}
				}
			else	{	if	B(not 2686=no)
					then	{	NextStep(6, 1, 2686)
						}
					else	{	NextStep(6, 1)
						}
				}
		};
	if	B(not 2686=no)
	then	{	Sent(2686, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 6, 1)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 2686=no) then NextStep(6, 1, 2686) else NextStep(6, 1) else if B(not 2686=no) then NextStep(6, 1, 2686) else NextStep(6, 1); if B(not 2686=no) then Sent(2686, 1, open, 4); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(tile(Color1, 6, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 2686=no)
							then	{	NextStep(6, 1, 2686)
								}
							else	{	NextStep(6, 1)
								}
						}
				}
			else	{	if	B(not 2686=no)
					then	{	NextStep(6, 1, 2686)
						}
					else	{	NextStep(6, 1)
						}
				}
		};
	if	B(not 2686=no)
	then	{	Sent(2686, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	Sent(2871, 1, open, 4);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[Sent(2871, 1, open, 4); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	Sent(2871, 1, open, 4);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	if	B(prohibition(useColor(brown, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 2686=no)
					then	{	NextStep(6, 1, 2686)
						}
					else	{	NextStep(6, 1)
						}
				}
		}
	else	{	if	B(not 2686=no)
			then	{	NextStep(6, 1, 2686)
				}
			else	{	NextStep(6, 1)
				}
		};
	if	B(not 2686=no)
	then	{	Sent(2686, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(brown, V2))) then if B(700>V2) then if B(not 2686=no) then NextStep(6, 1, 2686) else NextStep(6, 1) else if B(not 2686=no) then NextStep(6, 1, 2686) else NextStep(6, 1); if B(not 2686=no) then Sent(2686, 1, open, 4); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(prohibition(useColor(brown, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 2686=no)
					then	{	NextStep(6, 1, 2686)
						}
					else	{	NextStep(6, 1)
						}
				}
		}
	else	{	if	B(not 2686=no)
			then	{	NextStep(6, 1, 2686)
				}
			else	{	NextStep(6, 1)
				}
		};
	if	B(not 2686=no)
	then	{	Sent(2686, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	if	B(not 2686=no)
	then	{	NextStep(6, 1, 2686)
		}
	else	{	NextStep(6, 1)
		};
	if	B(not 2686=no)
	then	{	Sent(2686, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(not 2686=no) then NextStep(6, 1, 2686) else NextStep(6, 1); if B(not 2686=no) then Sent(2686, 1, open, 4); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(not 2686=no)
	then	{	NextStep(6, 1, 2686)
		}
	else	{	NextStep(6, 1)
		};
	if	B(not 2686=no)
	then	{	Sent(2686, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	NextStep(6, 1, 2686);
	if	B(not 2686=no)
	then	{	Sent(2686, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[NextStep(6, 1, 2686); if B(not 2686=no) then Sent(2686, 1, open, 4); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	NextStep(6, 1, 2686);
	if	B(not 2686=no)
	then	{	Sent(2686, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(5>4+5)
	then	{	NoNextStep(6, 5, 2871);
			ReceivedMessage(noresponse, 2871)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[if B(5>4+5) then {NoNextStep(6, 5, 2871); ReceivedMessage(noresponse, 2871)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	if	B(5>4+5)
	then	{	NoNextStep(6, 5, 2871);
			ReceivedMessage(noresponse, 2871)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	if	B(not 2686=no)
	then	{	Sent(2686, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(not 2686=no) then Sent(2686, 1, open, 4); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(not 2686=no)
	then	{	Sent(2686, 1, open, 4)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


object notification: Time [clock=6, time=2015-05-27 15:28:47.729]
object notification: Time [clock=6, time=2015-05-27 15:28:47.729]
object notification: Time [clock=6, time=2015-05-27 15:28:47.729]
org notification: Time [clock=6, time=2015-05-27 15:28:47.729]
Event processed UpdateClock(6)
[Planbase]:{	Sent(2686, 1, open, 4);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[Sent(2686, 1, open, 4); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	Sent(2686, 1, open, 4);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	UpdateClock(6)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10), UpdateClock(6)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	UpdateClock(6)
}


Event processed UpdateClock(6)
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(6)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(6)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(6)
}


[Planbase]:{	if	B(5>4+5)
	then	{	NoNextStep(6, 5, 2871);
			ReceivedMessage(noresponse, 2871)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[if B(5>4+5) then {NoNextStep(6, 5, 2871); ReceivedMessage(noresponse, 2871)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	if	B(5>4+5)
	then	{	NoNextStep(6, 5, 2871);
			ReceivedMessage(noresponse, 2871)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	if	B(6>4+5)
	then	{	NoNextStep(6, 1, 2686);
			ReceivedMessage(noresponse, 2686)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(6>4+5) then {NoNextStep(6, 1, 2686); ReceivedMessage(noresponse, 2686)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(6>4+5)
	then	{	NoNextStep(6, 1, 2686);
			ReceivedMessage(noresponse, 2686)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	if	B(6>4+5)
	then	{	NoNextStep(6, 5, 2871);
			ReceivedMessage(noresponse, 2871)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[if B(6>4+5) then {NoNextStep(6, 5, 2871); ReceivedMessage(noresponse, 2871)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	if	B(6>4+5)
	then	{	NoNextStep(6, 5, 2871);
			ReceivedMessage(noresponse, 2871)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 2
[MSG] i'm: 2
AGENT : got response to offer
org notification: Response [id=2871, response=accepted, clock=6, time=2015-05-27 15:28:48.257]
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


Event processed @ctenv(functionToList(message(response, 2871, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	@ctenv(functionToList(message(response, 2871, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10), @ctenv(functionToList(message(response, 2871, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	@ctenv(functionToList(message(response, 2871, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[Planbase]:{	if	B(6>4+5)
	then	{	NoNextStep(6, 1, 2686);
			ReceivedMessage(noresponse, 2686)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(6>4+5) then {NoNextStep(6, 1, 2686); ReceivedMessage(noresponse, 2686)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(6>4+5)
	then	{	NoNextStep(6, 1, 2686);
			ReceivedMessage(noresponse, 2686)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@6be90e1a
[CTAH] The created APLList : [response,2871,accept]
[Planbase]:{	if	B(6>4+5)
	then	{	NoNextStep(6, 5, 2871);
			ReceivedMessage(noresponse, 2871)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	if	B([actionresult([response,2871,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,2871,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,2871,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B(6>4+5) then {NoNextStep(6, 5, 2871); ReceivedMessage(noresponse, 2871)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10), if B([actionresult([response,2871,accept])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([response,2871,accept])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([response,2871,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(6>4+5)
	then	{	NoNextStep(6, 5, 2871);
			ReceivedMessage(noresponse, 2871)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	if	B([actionresult([response,2871,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,2871,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,2871,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 3
[MSG] i'm: 3
AGENT : got response to offer
org notification: Response [id=2686, response=accepted, clock=6, time=2015-05-27 15:28:48.586]
Event processed @ctenv(functionToList(message(response, 2686, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 2871)
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10), if B(response=response) then ReceivedMessage(accept, 2871)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 2871)
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	@ctenv(functionToList(message(response, 2686, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), @ctenv(functionToList(message(response, 2686, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	@ctenv(functionToList(message(response, 2686, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	ReceivedMessage(accept, 2871)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10), ReceivedMessage(accept, 2871)]
[CTAH] Array of Terms: [Lapapl.data.Term;@8a437c7
[CTAH] The created APLList : [response,2686,accept]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	ReceivedMessage(accept, 2871)
}


[Planbase]:{	if	B(6>4+5)
	then	{	NoNextStep(6, 1, 2686);
			ReceivedMessage(noresponse, 2686)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([response,2686,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,2686,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,2686,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B(6>4+5) then {NoNextStep(6, 1, 2686); ReceivedMessage(noresponse, 2686)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([response,2686,accept])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([response,2686,accept])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([response,2686,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(6>4+5)
	then	{	NoNextStep(6, 1, 2686);
			ReceivedMessage(noresponse, 2686)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([response,2686,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,2686,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,2686,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B(6>4+5)
	then	{	NoNextStep(6, 5, 2871);
			ReceivedMessage(noresponse, 2871)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[if B(6>4+5) then {NoNextStep(6, 5, 2871); ReceivedMessage(noresponse, 2871)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	if	B(6>4+5)
	then	{	NoNextStep(6, 5, 2871);
			ReceivedMessage(noresponse, 2871)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 2686)
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B(response=response) then ReceivedMessage(accept, 2686)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 2686)
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(accept, 2686)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), ReceivedMessage(accept, 2686)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(accept, 2686)
}


[Planbase]:{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	if	B(6>4+5)
	then	{	NoNextStep(6, 1, 2686);
			ReceivedMessage(noresponse, 2686)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(6>4+5) then {NoNextStep(6, 1, 2686); ReceivedMessage(noresponse, 2686)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(6>4+5)
	then	{	NoNextStep(6, 1, 2686);
			ReceivedMessage(noresponse, 2686)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoal(neco, 6, 5),L2,0);
	if	B(L2=[actionresult([6,5])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 5, Clock)
		};
	NoNextStep(6, 5, 2871);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[@ctenv(moveStepToGoal(neco, 6, 5),L2,0); if B(L2=[actionresult([6,5])]) then {B(clock(Clock)); UpdatePosition(6, 5, Clock)}; NoNextStep(6, 5, 2871); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	@ctenv(moveStepToGoal(neco, 6, 5),L2,0);
	if	B(L2=[actionresult([6,5])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 5, Clock)
		};
	NoNextStep(6, 5, 2871);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


Need to wait 3 more seconds
org notification: Position [subject=a30, id=null, cell=Cell [x=6, y=5], time=2015-05-27 15:28:49.127, clock=6]
object notification: Position [subject=a30, id=null, cell=Cell [x=6, y=5], time=2015-05-27 15:28:49.127, clock=6]
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoal(neco, 6, 1),L2,0);
	if	B(L2=[actionresult([6,1])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 1, Clock)
		};
	NoNextStep(6, 1, 2686);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoal(neco, 6, 1),L2,0); if B(L2=[actionresult([6,1])]) then {B(clock(Clock)); UpdatePosition(6, 1, Clock)}; NoNextStep(6, 1, 2686); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoal(neco, 6, 1),L2,0);
	if	B(L2=[actionresult([6,1])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 1, Clock)
		};
	NoNextStep(6, 1, 2686);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


Need to wait 4 more seconds
org notification: Position [subject=a40, id=null, cell=Cell [x=6, y=1], time=2015-05-27 15:28:49.358, clock=6]
object notification: Position [subject=a40, id=null, cell=Cell [x=6, y=1], time=2015-05-27 15:28:49.358, clock=6]
a30[CTAH] moveStepToGoal returns: [6,5]
Event processed UpdatePosition(6, 5, 6)
[Planbase]:{	B(clock(Clock));
	UpdatePosition(6, 5, Clock);
	NoNextStep(6, 5, 2871);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	UpdatePosition(6, 5, 6)
}


[new scheduled]:[B(clock(Clock)); UpdatePosition(6, 5, Clock); NoNextStep(6, 5, 2871); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10), UpdatePosition(6, 5, 6)]
[After]:{	B(clock(Clock));
	UpdatePosition(6, 5, Clock);
	NoNextStep(6, 5, 2871);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
},
{	UpdatePosition(6, 5, 6)
}


[Planbase]:{	UpdatePosition(6, 5, 6);
	NoNextStep(6, 5, 2871);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[new scheduled]:[UpdatePosition(6, 5, 6); NoNextStep(6, 5, 2871); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)]
[After]:{	UpdatePosition(6, 5, 6);
	NoNextStep(6, 5, 2871);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	adoptz(useColor(white, 100) : 27 May 2015 14:44:49 GMT, priority 10)
}


[Planbase]:{	NoNextStep(6, 5, 2871);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), NoNextStep(6, 5, 2871); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	NoNextStep(6, 5, 2871);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a30[CTAH] going goal: 4,3 color: neco
a10[CTAH] paths: 1000
a10[CTAH] path: 0
a10[CTAH] path: Path: [0][1] [1][1] [2][1] [2][2] [3][2]

a10[CTAH] moveStepToGoalTest nopoints: []
a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] found a chip....: (R:1,C:1)
a10[CTAH] moveStepToGoalTest sent proposal for: [1,1,3,9299]
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscourseMessage
[MSG] Message is of type: basicproposal
[MSG] Message is for: 3
[MSG] i'm: 3
org notification: Proposal [id=9299, agent=a10, agent2=a40, clock=6, time=2015-05-27 15:28:53.13]
Received a proposal creating event
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 0
[MSG] i'm: 0
AGENT : got response to offer
Event processed UpdateClock(6)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 1, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 9299=no)
							then	{	NextStep(1, 1, 9299)
								}
							else	{	NextStep(1, 1)
								}
						}
				}
			else	{	if	B(not 9299=no)
					then	{	NextStep(1, 1, 9299)
						}
					else	{	NextStep(1, 1)
						}
				}
		};
	if	B(not 9299=no)
	then	{	Sent(9299, 3, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(6)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 1, 1)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 9299=no) then NextStep(1, 1, 9299) else NextStep(1, 1) else if B(not 9299=no) then NextStep(1, 1, 9299) else NextStep(1, 1); if B(not 9299=no) then Sent(9299, 3, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(6)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 1, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 9299=no)
							then	{	NextStep(1, 1, 9299)
								}
							else	{	NextStep(1, 1)
								}
						}
				}
			else	{	if	B(not 9299=no)
					then	{	NextStep(1, 1, 9299)
						}
					else	{	NextStep(1, 1)
						}
				}
		};
	if	B(not 9299=no)
	then	{	Sent(9299, 3, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(6)
}


[Planbase]:{	if	B(tile(Color1, 1, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 9299=no)
							then	{	NextStep(1, 1, 9299)
								}
							else	{	NextStep(1, 1)
								}
						}
				}
			else	{	if	B(not 9299=no)
					then	{	NextStep(1, 1, 9299)
						}
					else	{	NextStep(1, 1)
						}
				}
		};
	if	B(not 9299=no)
	then	{	Sent(9299, 3, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 1, 1)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 9299=no) then NextStep(1, 1, 9299) else NextStep(1, 1) else if B(not 9299=no) then NextStep(1, 1, 9299) else NextStep(1, 1); if B(not 9299=no) then Sent(9299, 3, open, 5); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(tile(Color1, 1, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 9299=no)
							then	{	NextStep(1, 1, 9299)
								}
							else	{	NextStep(1, 1)
								}
						}
				}
			else	{	if	B(not 9299=no)
					then	{	NextStep(1, 1, 9299)
						}
					else	{	NextStep(1, 1)
						}
				}
		};
	if	B(not 9299=no)
	then	{	Sent(9299, 3, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a40[CTAH] moveStepToGoal returns: [6,1]
[Planbase]:{	if	B(prohibition(useColor(yellow, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 9299=no)
					then	{	NextStep(1, 1, 9299)
						}
					else	{	NextStep(1, 1)
						}
				}
		}
	else	{	if	B(not 9299=no)
			then	{	NextStep(1, 1, 9299)
				}
			else	{	NextStep(1, 1)
				}
		};
	if	B(not 9299=no)
	then	{	Sent(9299, 3, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(yellow, V2))) then if B(700>V2) then if B(not 9299=no) then NextStep(1, 1, 9299) else NextStep(1, 1) else if B(not 9299=no) then NextStep(1, 1, 9299) else NextStep(1, 1); if B(not 9299=no) then Sent(9299, 3, open, 5); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(prohibition(useColor(yellow, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 9299=no)
					then	{	NextStep(1, 1, 9299)
						}
					else	{	NextStep(1, 1)
						}
				}
		}
	else	{	if	B(not 9299=no)
			then	{	NextStep(1, 1, 9299)
				}
			else	{	NextStep(1, 1)
				}
		};
	if	B(not 9299=no)
	then	{	Sent(9299, 3, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


Event processed UpdatePosition(6, 1, 6)
Event processed @ctenv(functionToList(proposal(proposal, 0, 9299, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	B(clock(Clock));
	UpdatePosition(6, 1, Clock);
	NoNextStep(6, 1, 2686);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdatePosition(6, 1, 6)
},
{	@ctenv(functionToList(proposal(proposal, 0, 9299, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[B(clock(Clock)); UpdatePosition(6, 1, Clock); NoNextStep(6, 1, 2686); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdatePosition(6, 1, 6), @ctenv(functionToList(proposal(proposal, 0, 9299, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	B(clock(Clock));
	UpdatePosition(6, 1, Clock);
	NoNextStep(6, 1, 2686);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdatePosition(6, 1, 6)
},
{	@ctenv(functionToList(proposal(proposal, 0, 9299, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@dfd7494
[CTAH] The created APLList : [proposal,0,9299,open]
[Planbase]:{	if	B(not 9299=no)
	then	{	NextStep(1, 1, 9299)
		}
	else	{	NextStep(1, 1)
		};
	if	B(not 9299=no)
	then	{	Sent(9299, 3, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(not 9299=no) then NextStep(1, 1, 9299) else NextStep(1, 1); if B(not 9299=no) then Sent(9299, 3, open, 5); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(not 9299=no)
	then	{	NextStep(1, 1, 9299)
		}
	else	{	NextStep(1, 1)
		};
	if	B(not 9299=no)
	then	{	Sent(9299, 3, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	UpdatePosition(6, 1, 6);
	NoNextStep(6, 1, 2686);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,0,9299,open])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([proposal,0,9299,open])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([proposal,0,9299,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[UpdatePosition(6, 1, 6); NoNextStep(6, 1, 2686); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([proposal,0,9299,open])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([proposal,0,9299,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,0,9299,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	UpdatePosition(6, 1, 6);
	NoNextStep(6, 1, 2686);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,0,9299,open])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([proposal,0,9299,open])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([proposal,0,9299,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	NextStep(1, 1, 9299);
	if	B(not 9299=no)
	then	{	Sent(9299, 3, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[NextStep(1, 1, 9299); if B(not 9299=no) then Sent(9299, 3, open, 5); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	NextStep(1, 1, 9299);
	if	B(not 9299=no)
	then	{	Sent(9299, 3, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	NoNextStep(6, 1, 2686);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,0,9299,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,0,9299,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[NoNextStep(6, 1, 2686); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([proposal,0,9299,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,0,9299,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	NoNextStep(6, 1, 2686);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,0,9299,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,0,9299,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	if	B(not 9299=no)
	then	{	Sent(9299, 3, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(not 9299=no) then Sent(9299, 3, open, 5); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(not 9299=no)
	then	{	Sent(9299, 3, open, 5)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,0,9299,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([proposal,0,9299,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,0,9299,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[Planbase]:{	Sent(9299, 3, open, 5);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[Sent(9299, 3, open, 5); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	Sent(9299, 3, open, 5);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(0, 9299, open)
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B(proposal=proposal) then ReceivedProposal(0, 9299, open)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(0, 9299, open)
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedProposal(0, 9299, open)
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), ReceivedProposal(0, 9299, open)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedProposal(0, 9299, open)
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[getScoreAfterExchange(3, 9299); if G(at(A, B, C)) then skip else makeResponse(9299, accept), @ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	getScoreAfterExchange(3, 9299);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(9299, accept)
		}
},
{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a40[CTAH] going goal: 3,4 color: neco
[Planbase]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(6>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(6>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(6>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(6>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(6>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(6>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(6>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(6>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(6>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(6>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


object notification: Time [clock=7, time=2015-05-27 15:28:57.733]
object notification: Time [clock=7, time=2015-05-27 15:28:57.733]
object notification: Time [clock=7, time=2015-05-27 15:28:57.733]
org notification: Time [clock=7, time=2015-05-27 15:28:57.733]
Event processed UpdateClock(7)
[Planbase]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(7)
}


[new scheduled]:[if B(6>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(7)]
[After]:{	if	B(6>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(7)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a30[CTAH] paths: 1000
Need to wait 4 more seconds
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a40[CTAH] paths: 1000
Need to wait 3 more seconds
[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a30[CTAH] path: 0
a30[CTAH] path: Path: [6][5] [6][4] [6][3] [5][3] [4][3]

a30[CTAH] moveStepToGoalTest nopoints: []
a30[CTAH] moveStepToGoalTest proposals: null
a30[CTAH] moveStepToGoalTest proposals: null
a30[CTAH] moveStepToGoalTest proposals: null
a30[CTAH] found a chip....: (R:6,C:4)
a30[CTAH] moveStepToGoalTest sent proposal for: [6,4,0,5979]
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscourseMessage
[MSG] Message is of type: basicproposal
[MSG] Message is for: 0
[MSG] i'm: 0
org notification: Proposal [id=5979, agent=a30, agent2=a10, clock=7, time=2015-05-27 15:29:05.389]
Received a proposal creating event
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 2
[MSG] i'm: 2
AGENT : got response to offer
Event processed @ctenv(functionToList(proposal(proposal, 2, 5979, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
a40[CTAH] path: 0
a40[CTAH] path: Path: [6][1] [6][2] [6][3] [5][3] [5][4] [4][4] [3][4]

a40[CTAH] moveStepToGoalTest nopoints: []
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] found a chip....: (R:6,C:2)
a40[CTAH] moveStepToGoalTest sent proposal for: [6,2,0,6925]
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscourseMessage
[MSG] Message is of type: basicproposal
[MSG] Message is for: 0
[MSG] i'm: 0
Event processed UpdateClock(7)
org notification: Proposal [id=6925, agent=a40, agent2=a10, clock=7, time=2015-05-27 15:29:05.435]
Received a proposal creating event
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 3
[MSG] i'm: 3
AGENT : got response to offer
[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	@ctenv(functionToList(proposal(proposal, 2, 5979, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), @ctenv(functionToList(proposal(proposal, 2, 5979, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	@ctenv(functionToList(proposal(proposal, 2, 5979, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 6, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 5979=no)
							then	{	NextStep(6, 4, 5979)
								}
							else	{	NextStep(6, 4)
								}
						}
				}
			else	{	if	B(not 5979=no)
					then	{	NextStep(6, 4, 5979)
						}
					else	{	NextStep(6, 4)
						}
				}
		};
	if	B(not 5979=no)
	then	{	Sent(5979, 0, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(7)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 6, 4)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 5979=no) then NextStep(6, 4, 5979) else NextStep(6, 4) else if B(not 5979=no) then NextStep(6, 4, 5979) else NextStep(6, 4); if B(not 5979=no) then Sent(5979, 0, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(7)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 6, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 5979=no)
							then	{	NextStep(6, 4, 5979)
								}
							else	{	NextStep(6, 4)
								}
						}
				}
			else	{	if	B(not 5979=no)
					then	{	NextStep(6, 4, 5979)
						}
					else	{	NextStep(6, 4)
						}
				}
		};
	if	B(not 5979=no)
	then	{	Sent(5979, 0, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(7)
}


Event processed UpdateClock(7)
[CTAH] Array of Terms: [Lapapl.data.Term;@78d1f73b
[CTAH] The created APLList : [proposal,2,5979,open]
[Planbase]:{	GetScoreAfterExchange(9299, yes);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(9299, accept)
		}
},
{	B(clock(Clock));
	if	B(tile(Color1, 6, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6925=no)
							then	{	NextStep(6, 2, 6925)
								}
							else	{	NextStep(6, 2)
								}
						}
				}
			else	{	if	B(not 6925=no)
					then	{	NextStep(6, 2, 6925)
						}
					else	{	NextStep(6, 2)
						}
				}
		};
	if	B(not 6925=no)
	then	{	Sent(6925, 0, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(7)
}


[new scheduled]:[GetScoreAfterExchange(9299, yes); if G(at(A, B, C)) then skip else makeResponse(9299, accept), B(clock(Clock)); if B(tile(Color1, 6, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 6925=no) then NextStep(6, 2, 6925) else NextStep(6, 2) else if B(not 6925=no) then NextStep(6, 2, 6925) else NextStep(6, 2); if B(not 6925=no) then Sent(6925, 0, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(7)]
[After]:{	GetScoreAfterExchange(9299, yes);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(9299, accept)
		}
},
{	B(clock(Clock));
	if	B(tile(Color1, 6, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6925=no)
							then	{	NextStep(6, 2, 6925)
								}
							else	{	NextStep(6, 2)
								}
						}
				}
			else	{	if	B(not 6925=no)
					then	{	NextStep(6, 2, 6925)
						}
					else	{	NextStep(6, 2)
						}
				}
		};
	if	B(not 6925=no)
	then	{	Sent(6925, 0, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(7)
}


Event processed @ctenv(functionToList(proposal(proposal, 3, 6925, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,2,5979,open])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([proposal,2,5979,open])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([proposal,2,5979,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	@ctenv(functionToList(proposal(proposal, 3, 6925, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([proposal,2,5979,open])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([proposal,2,5979,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,2,5979,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), @ctenv(functionToList(proposal(proposal, 3, 6925, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,2,5979,open])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([proposal,2,5979,open])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([proposal,2,5979,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	@ctenv(functionToList(proposal(proposal, 3, 6925, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[Planbase]:{	if	B(tile(Color1, 6, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 5979=no)
							then	{	NextStep(6, 4, 5979)
								}
							else	{	NextStep(6, 4)
								}
						}
				}
			else	{	if	B(not 5979=no)
					then	{	NextStep(6, 4, 5979)
						}
					else	{	NextStep(6, 4)
						}
				}
		};
	if	B(not 5979=no)
	then	{	Sent(5979, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 6, 4)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 5979=no) then NextStep(6, 4, 5979) else NextStep(6, 4) else if B(not 5979=no) then NextStep(6, 4, 5979) else NextStep(6, 4); if B(not 5979=no) then Sent(5979, 0, open, 6); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(tile(Color1, 6, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 5979=no)
							then	{	NextStep(6, 4, 5979)
								}
							else	{	NextStep(6, 4)
								}
						}
				}
			else	{	if	B(not 5979=no)
					then	{	NextStep(6, 4, 5979)
						}
					else	{	NextStep(6, 4)
						}
				}
		};
	if	B(not 5979=no)
	then	{	Sent(5979, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@3db3575b
[CTAH] The created APLList : [proposal,3,6925,open]
[Planbase]:{	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(9299, accept)
		}
},
{	if	B(tile(Color1, 6, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6925=no)
							then	{	NextStep(6, 2, 6925)
								}
							else	{	NextStep(6, 2)
								}
						}
				}
			else	{	if	B(not 6925=no)
					then	{	NextStep(6, 2, 6925)
						}
					else	{	NextStep(6, 2)
						}
				}
		};
	if	B(not 6925=no)
	then	{	Sent(6925, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if G(at(A, B, C)) then skip else makeResponse(9299, accept), if B(tile(Color1, 6, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 6925=no) then NextStep(6, 2, 6925) else NextStep(6, 2) else if B(not 6925=no) then NextStep(6, 2, 6925) else NextStep(6, 2); if B(not 6925=no) then Sent(6925, 0, open, 6); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(9299, accept)
		}
},
{	if	B(tile(Color1, 6, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6925=no)
							then	{	NextStep(6, 2, 6925)
								}
							else	{	NextStep(6, 2)
								}
						}
				}
			else	{	if	B(not 6925=no)
					then	{	NextStep(6, 2, 6925)
						}
					else	{	NextStep(6, 2)
						}
				}
		};
	if	B(not 6925=no)
	then	{	Sent(6925, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,2,5979,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,2,5979,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	if	B([actionresult([proposal,3,6925,open])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([proposal,3,6925,open])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([proposal,3,6925,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([proposal,2,5979,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,2,5979,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), if B([actionresult([proposal,3,6925,open])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([proposal,3,6925,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,3,6925,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,2,5979,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,2,5979,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	if	B([actionresult([proposal,3,6925,open])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([proposal,3,6925,open])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([proposal,3,6925,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(white, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 5979=no)
					then	{	NextStep(6, 4, 5979)
						}
					else	{	NextStep(6, 4)
						}
				}
		}
	else	{	if	B(not 5979=no)
			then	{	NextStep(6, 4, 5979)
				}
			else	{	NextStep(6, 4)
				}
		};
	if	B(not 5979=no)
	then	{	Sent(5979, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(white, V2))) then if B(700>V2) then if B(not 5979=no) then NextStep(6, 4, 5979) else NextStep(6, 4) else if B(not 5979=no) then NextStep(6, 4, 5979) else NextStep(6, 4); if B(not 5979=no) then Sent(5979, 0, open, 6); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(prohibition(useColor(white, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 5979=no)
					then	{	NextStep(6, 4, 5979)
						}
					else	{	NextStep(6, 4)
						}
				}
		}
	else	{	if	B(not 5979=no)
			then	{	NextStep(6, 4, 5979)
				}
			else	{	NextStep(6, 4)
				}
		};
	if	B(not 5979=no)
	then	{	Sent(5979, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	skip
},
{	if	B(prohibition(useColor(white, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 6925=no)
					then	{	NextStep(6, 2, 6925)
						}
					else	{	NextStep(6, 2)
						}
				}
		}
	else	{	if	B(not 6925=no)
			then	{	NextStep(6, 2, 6925)
				}
			else	{	NextStep(6, 2)
				}
		};
	if	B(not 6925=no)
	then	{	Sent(6925, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[skip, if B(prohibition(useColor(white, V2))) then if B(700>V2) then if B(not 6925=no) then NextStep(6, 2, 6925) else NextStep(6, 2) else if B(not 6925=no) then NextStep(6, 2, 6925) else NextStep(6, 2); if B(not 6925=no) then Sent(6925, 0, open, 6); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	skip
},
{	if	B(prohibition(useColor(white, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 6925=no)
					then	{	NextStep(6, 2, 6925)
						}
					else	{	NextStep(6, 2)
						}
				}
		}
	else	{	if	B(not 6925=no)
			then	{	NextStep(6, 2, 6925)
				}
			else	{	NextStep(6, 2)
				}
		};
	if	B(not 6925=no)
	then	{	Sent(6925, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,2,5979,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
},
{	if	B([actionresult([proposal,3,6925,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,3,6925,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([proposal,2,5979,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), if B([actionresult([proposal,3,6925,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,3,6925,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([proposal,2,5979,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
},
{	if	B([actionresult([proposal,3,6925,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,3,6925,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	if	B(not 5979=no)
	then	{	NextStep(6, 4, 5979)
		}
	else	{	NextStep(6, 4)
		};
	if	B(not 5979=no)
	then	{	Sent(5979, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(not 5979=no) then NextStep(6, 4, 5979) else NextStep(6, 4); if B(not 5979=no) then Sent(5979, 0, open, 6); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(not 5979=no)
	then	{	NextStep(6, 4, 5979)
		}
	else	{	NextStep(6, 4)
		};
	if	B(not 5979=no)
	then	{	Sent(5979, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(not 6925=no)
	then	{	NextStep(6, 2, 6925)
		}
	else	{	NextStep(6, 2)
		};
	if	B(not 6925=no)
	then	{	Sent(6925, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(not 6925=no) then NextStep(6, 2, 6925) else NextStep(6, 2); if B(not 6925=no) then Sent(6925, 0, open, 6); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(not 6925=no)
	then	{	NextStep(6, 2, 6925)
		}
	else	{	NextStep(6, 2)
		};
	if	B(not 6925=no)
	then	{	Sent(6925, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(2, 5979, open)
		}
},
{	if	B([actionresult([proposal,3,6925,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B(proposal=proposal) then ReceivedProposal(2, 5979, open), if B([actionresult([proposal,3,6925,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(2, 5979, open)
		}
},
{	if	B([actionresult([proposal,3,6925,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[Planbase]:{	NextStep(6, 4, 5979);
	if	B(not 5979=no)
	then	{	Sent(5979, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[NextStep(6, 4, 5979); if B(not 5979=no) then Sent(5979, 0, open, 6); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	NextStep(6, 4, 5979);
	if	B(not 5979=no)
	then	{	Sent(5979, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	NextStep(6, 2, 6925);
	if	B(not 6925=no)
	then	{	Sent(6925, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[NextStep(6, 2, 6925); if B(not 6925=no) then Sent(6925, 0, open, 6); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	NextStep(6, 2, 6925);
	if	B(not 6925=no)
	then	{	Sent(6925, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedProposal(2, 5979, open)
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(3, 6925, open)
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), ReceivedProposal(2, 5979, open), if B(proposal=proposal) then ReceivedProposal(3, 6925, open)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedProposal(2, 5979, open)
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(3, 6925, open)
		}
}


[Planbase]:{	if	B(not 5979=no)
	then	{	Sent(5979, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(not 5979=no) then Sent(5979, 0, open, 6); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(not 5979=no)
	then	{	Sent(5979, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(not 6925=no)
	then	{	Sent(6925, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(not 6925=no) then Sent(6925, 0, open, 6); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(not 6925=no)
	then	{	Sent(6925, 0, open, 6)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedProposal(3, 6925, open)
}


[new scheduled]:[getScoreAfterExchange(0, 5979); if G(at(A, B, C)) then skip else makeResponse(5979, accept), findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), ReceivedProposal(3, 6925, open)]
[After]:{	getScoreAfterExchange(0, 5979);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(5979, accept)
		}
},
{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedProposal(3, 6925, open)
}


[Planbase]:{	Sent(5979, 0, open, 6);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[Sent(5979, 0, open, 6); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	Sent(5979, 0, open, 6);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	Sent(6925, 0, open, 6);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[Sent(6925, 0, open, 6); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	Sent(6925, 0, open, 6);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	GetScoreAfterExchange(5979, yes);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(5979, accept)
		}
},
{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[GetScoreAfterExchange(5979, yes); if G(at(A, B, C)) then skip else makeResponse(5979, accept), if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	GetScoreAfterExchange(5979, yes);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(5979, accept)
		}
},
{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(5979, accept)
		}
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if G(at(A, B, C)) then skip else makeResponse(5979, accept), if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(5979, accept)
		}
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(scoreAfterExchange(9299, Score))
	then	{	respond(9299, 700)
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(scoreAfterExchange(9299, Score)) then respond(9299, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(scoreAfterExchange(9299, Score))
	then	{	respond(9299, 700)
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	skip
},
{	if	B(scoreAfterExchange(5979, Score))
	then	{	respond(5979, 700)
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[skip, if B(scoreAfterExchange(5979, Score)) then respond(5979, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	skip
},
{	if	B(scoreAfterExchange(5979, Score))
	then	{	respond(5979, 700)
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>6+5)
	then	{	NoNextStep(6, 4, 5979);
			ReceivedMessage(noresponse, 5979)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>6+5) then {NoNextStep(6, 4, 5979); ReceivedMessage(noresponse, 5979)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>6+5)
	then	{	NoNextStep(6, 4, 5979);
			ReceivedMessage(noresponse, 5979)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	respond(9299, 700)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[respond(9299, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	respond(9299, 700)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	respond(5979, 700)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[getScoreAfterExchange(0, 6925); if G(at(A, B, C)) then skip else makeResponse(6925, accept), respond(5979, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	getScoreAfterExchange(0, 6925);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(6925, accept)
		}
},
{	respond(5979, 700)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	B(ANSWER=accept);
	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(ANSWER=reject)
						}
				}
		};
	makeResponse(9299, ANSWER)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[B(ANSWER=accept); if B(yes=no) then if B(prohibition(rejectRequests(V2))) then if B(V2>700) then B(ANSWER=reject); makeResponse(9299, ANSWER), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	B(ANSWER=accept);
	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(ANSWER=reject)
						}
				}
		};
	makeResponse(9299, ANSWER)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	GetScoreAfterExchange(6925, yes);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(6925, accept)
		}
},
{	B(ANSWER=accept);
	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(ANSWER=reject)
						}
				}
		};
	makeResponse(5979, ANSWER)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[GetScoreAfterExchange(6925, yes); if G(at(A, B, C)) then skip else makeResponse(6925, accept), B(ANSWER=accept); if B(yes=no) then if B(prohibition(rejectRequests(V2))) then if B(V2>700) then B(ANSWER=reject); makeResponse(5979, ANSWER), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	GetScoreAfterExchange(6925, yes);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(6925, accept)
		}
},
{	B(ANSWER=accept);
	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(ANSWER=reject)
						}
				}
		};
	makeResponse(5979, ANSWER)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(accept=reject)
						}
				}
		};
	makeResponse(9299, accept)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(yes=no) then if B(prohibition(rejectRequests(V2))) then if B(V2>700) then B(accept=reject); makeResponse(9299, accept), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(accept=reject)
						}
				}
		};
	makeResponse(9299, accept)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(6925, accept)
		}
},
{	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(accept=reject)
						}
				}
		};
	makeResponse(5979, accept)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if G(at(A, B, C)) then skip else makeResponse(6925, accept), if B(yes=no) then if B(prohibition(rejectRequests(V2))) then if B(V2>700) then B(accept=reject); makeResponse(5979, accept), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(6925, accept)
		}
},
{	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(accept=reject)
						}
				}
		};
	makeResponse(5979, accept)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(7>6+5)
	then	{	NoNextStep(6, 4, 5979);
			ReceivedMessage(noresponse, 5979)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>6+5) then {NoNextStep(6, 4, 5979); ReceivedMessage(noresponse, 5979)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>6+5)
	then	{	NoNextStep(6, 4, 5979);
			ReceivedMessage(noresponse, 5979)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	makeResponse(9299, accept)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[makeResponse(9299, accept), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	makeResponse(9299, accept)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	skip
},
{	makeResponse(5979, accept)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[skip, makeResponse(5979, accept), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	skip
},
{	makeResponse(5979, accept)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	sendResponse(accept, 9299)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[sendResponse(accept, 9299), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	sendResponse(accept, 9299)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	sendResponse(accept, 5979)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[sendResponse(accept, 5979), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	sendResponse(accept, 5979)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(sendResponse(9299, accept),L1,0);
	Sent(accept, 9299)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(sendResponse(9299, accept),L1,0); Sent(accept, 9299), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(sendResponse(9299, accept),L1,0);
	Sent(accept, 9299)
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 0
[MSG] i'm: 0
AGENT : got response to offer
org notification: Response [id=9299, response=accepted, clock=7, time=2015-05-27 15:29:07.451]
Event processed @ctenv(functionToList(message(response, 9299, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	@ctenv(sendResponse(5979, accept),L1,0);
	Sent(accept, 5979)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	@ctenv(functionToList(message(response, 9299, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(sendResponse(5979, accept),L1,0); Sent(accept, 5979), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), @ctenv(functionToList(message(response, 9299, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(sendResponse(5979, accept),L1,0);
	Sent(accept, 5979)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	@ctenv(functionToList(message(response, 9299, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[Planbase]:{	if	B(7>6+5)
	then	{	NoNextStep(6, 4, 5979);
			ReceivedMessage(noresponse, 5979)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>6+5) then {NoNextStep(6, 4, 5979); ReceivedMessage(noresponse, 5979)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>6+5)
	then	{	NoNextStep(6, 4, 5979);
			ReceivedMessage(noresponse, 5979)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@66441c88
[CTAH] The created APLList : [response,9299,accept]
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 2
[MSG] i'm: 2
AGENT : got response to offer
org notification: Response [id=5979, response=accepted, clock=7, time=2015-05-27 15:29:07.548]
[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


Event processed @ctenv(functionToList(message(response, 5979, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([response,9299,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,9299,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,9299,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([response,9299,accept])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([response,9299,accept])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([response,9299,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([response,9299,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,9299,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,9299,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	@ctenv(functionToList(message(response, 5979, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), @ctenv(functionToList(message(response, 5979, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	@ctenv(functionToList(message(response, 5979, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@1971770d
[CTAH] The created APLList : [response,5979,accept]
[Planbase]:{	if	B(7>6+5)
	then	{	NoNextStep(6, 2, 6925);
			ReceivedMessage(noresponse, 6925)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(7>6+5) then {NoNextStep(6, 2, 6925); ReceivedMessage(noresponse, 6925)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(7>6+5)
	then	{	NoNextStep(6, 2, 6925);
			ReceivedMessage(noresponse, 6925)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


object notification: Time [clock=8, time=2015-05-27 15:29:07.736]
object notification: Time [clock=8, time=2015-05-27 15:29:07.736]
org notification: Time [clock=8, time=2015-05-27 15:29:07.736]
object notification: Time [clock=8, time=2015-05-27 15:29:07.736]
Event processed UpdateClock(8)
Event processed UpdateClock(8)
[Planbase]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 9299)
		}
},
{	UpdateClock(8)
}


[new scheduled]:[if B(7>5+5) then {NoNextStep(1, 1, 9299); ReceivedMessage(noresponse, 9299)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B(response=response) then ReceivedMessage(accept, 9299), UpdateClock(8)]
[After]:{	if	B(7>5+5)
	then	{	NoNextStep(1, 1, 9299);
			ReceivedMessage(noresponse, 9299)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 9299)
		}
},
{	UpdateClock(8)
}


[Planbase]:{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([response,5979,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,5979,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,5979,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	UpdateClock(8)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([response,5979,accept])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([response,5979,accept])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([response,5979,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), UpdateClock(8)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([response,5979,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,5979,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,5979,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	UpdateClock(8)
}


Event processed UpdateClock(8)
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(8)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(8)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(8)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(accept, 9299)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), ReceivedMessage(accept, 9299)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(accept, 9299)
}


[Planbase]:{	if	B(7>6+5)
	then	{	NoNextStep(6, 4, 5979);
			ReceivedMessage(noresponse, 5979)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 5979)
		}
}


[new scheduled]:[if B(7>6+5) then {NoNextStep(6, 4, 5979); ReceivedMessage(noresponse, 5979)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B(response=response) then ReceivedMessage(accept, 5979)]
[After]:{	if	B(7>6+5)
	then	{	NoNextStep(6, 4, 5979);
			ReceivedMessage(noresponse, 5979)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 5979)
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(scoreAfterExchange(6925, Score))
	then	{	respond(6925, 700)
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(scoreAfterExchange(6925, Score)) then respond(6925, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(scoreAfterExchange(6925, Score))
	then	{	respond(6925, 700)
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(accept, 5979)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), ReceivedMessage(accept, 5979)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(accept, 5979)
}


[Planbase]:{	if	B(8>6+5)
	then	{	NoNextStep(6, 2, 6925);
			ReceivedMessage(noresponse, 6925)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>6+5) then {NoNextStep(6, 2, 6925); ReceivedMessage(noresponse, 6925)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>6+5)
	then	{	NoNextStep(6, 2, 6925);
			ReceivedMessage(noresponse, 6925)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	respond(6925, 700)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[respond(6925, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	respond(6925, 700)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	B(ANSWER=accept);
	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(ANSWER=reject)
						}
				}
		};
	makeResponse(6925, ANSWER)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[B(ANSWER=accept); if B(yes=no) then if B(prohibition(rejectRequests(V2))) then if B(V2>700) then B(ANSWER=reject); makeResponse(6925, ANSWER), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	B(ANSWER=accept);
	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(ANSWER=reject)
						}
				}
		};
	makeResponse(6925, ANSWER)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoal(neco, 6, 4),L2,0);
	if	B(L2=[actionresult([6,4])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 4, Clock)
		};
	NoNextStep(6, 4, 5979);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoal(neco, 6, 4),L2,0); if B(L2=[actionresult([6,4])]) then {B(clock(Clock)); UpdatePosition(6, 4, Clock)}; NoNextStep(6, 4, 5979); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoal(neco, 6, 4),L2,0);
	if	B(L2=[actionresult([6,4])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 4, Clock)
		};
	NoNextStep(6, 4, 5979);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


Need to wait 4 more seconds
object notification: Position [subject=a30, id=null, cell=Cell [x=6, y=4], time=2015-05-27 15:29:08.389, clock=8]
org notification: Position [subject=a30, id=null, cell=Cell [x=6, y=4], time=2015-05-27 15:29:08.389, clock=8]
[Planbase]:{	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(accept=reject)
						}
				}
		};
	makeResponse(6925, accept)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(yes=no) then if B(prohibition(rejectRequests(V2))) then if B(V2>700) then B(accept=reject); makeResponse(6925, accept), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(accept=reject)
						}
				}
		};
	makeResponse(6925, accept)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>6+5)
	then	{	NoNextStep(6, 2, 6925);
			ReceivedMessage(noresponse, 6925)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>6+5) then {NoNextStep(6, 2, 6925); ReceivedMessage(noresponse, 6925)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>6+5)
	then	{	NoNextStep(6, 2, 6925);
			ReceivedMessage(noresponse, 6925)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	makeResponse(6925, accept)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[makeResponse(6925, accept), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	makeResponse(6925, accept)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	sendResponse(accept, 6925)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[sendResponse(accept, 6925), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	sendResponse(accept, 6925)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(sendResponse(6925, accept),L1,0);
	Sent(accept, 6925)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(sendResponse(6925, accept),L1,0); Sent(accept, 6925), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(sendResponse(6925, accept),L1,0);
	Sent(accept, 6925)
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(8>6+5)
	then	{	NoNextStep(6, 2, 6925);
			ReceivedMessage(noresponse, 6925)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(8>6+5) then {NoNextStep(6, 2, 6925); ReceivedMessage(noresponse, 6925)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(8>6+5)
	then	{	NoNextStep(6, 2, 6925);
			ReceivedMessage(noresponse, 6925)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 3
[MSG] i'm: 3
AGENT : got response to offer
org notification: Response [id=6925, response=accepted, clock=8, time=2015-05-27 15:29:08.845]
Event processed @ctenv(functionToList(message(response, 6925, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	@ctenv(functionToList(message(response, 6925, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), @ctenv(functionToList(message(response, 6925, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	@ctenv(functionToList(message(response, 6925, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@3fe462d1
[CTAH] The created APLList : [response,6925,accept]
[Planbase]:{	@ctenv(moveStepToGoal(neco, 1, 1),L2,0);
	if	B(L2=[actionresult([1,1])])
	then	{	B(clock(Clock));
			UpdatePosition(1, 1, Clock)
		};
	NoNextStep(1, 1, 9299);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoal(neco, 1, 1),L2,0); if B(L2=[actionresult([1,1])]) then {B(clock(Clock)); UpdatePosition(1, 1, Clock)}; NoNextStep(1, 1, 9299); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoal(neco, 1, 1),L2,0);
	if	B(L2=[actionresult([1,1])])
	then	{	B(clock(Clock));
			UpdatePosition(1, 1, Clock)
		};
	NoNextStep(1, 1, 9299);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([response,6925,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,6925,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,6925,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B([actionresult([response,6925,accept])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([response,6925,accept])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([response,6925,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B([actionresult([response,6925,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,6925,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,6925,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


a10[CTAH] moveStepToGoal returns: false
object notification: Position [subject=a10, id=null, cell=Cell [x=1, y=1], time=2015-05-27 15:29:09.057, clock=8]
org notification: Position [subject=a10, id=null, cell=Cell [x=1, y=1], time=2015-05-27 15:29:09.057, clock=8]
Event processed UpdatePosition(1, 1, 8)
[Planbase]:{	NoNextStep(1, 1, 9299);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdatePosition(1, 1, 8)
}


[new scheduled]:[NoNextStep(1, 1, 9299); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdatePosition(1, 1, 8)]
[After]:{	NoNextStep(1, 1, 9299);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdatePosition(1, 1, 8)
}


[Planbase]:{	if	B(8>6+5)
	then	{	NoNextStep(6, 2, 6925);
			ReceivedMessage(noresponse, 6925)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 6925)
		}
}


[new scheduled]:[if B(8>6+5) then {NoNextStep(6, 2, 6925); ReceivedMessage(noresponse, 6925)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), if B(response=response) then ReceivedMessage(accept, 6925)]
[After]:{	if	B(8>6+5)
	then	{	NoNextStep(6, 2, 6925);
			ReceivedMessage(noresponse, 6925)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 6925)
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(accept, 6925)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), ReceivedMessage(accept, 6925)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	ReceivedMessage(accept, 6925)
}


[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoal(neco, 6, 2),L2,0);
	if	B(L2=[actionresult([6,2])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 2, Clock)
		};
	NoNextStep(6, 2, 6925);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoal(neco, 6, 2),L2,0); if B(L2=[actionresult([6,2])]) then {B(clock(Clock)); UpdatePosition(6, 2, Clock)}; NoNextStep(6, 2, 6925); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoal(neco, 6, 2),L2,0);
	if	B(L2=[actionresult([6,2])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 2, Clock)
		};
	NoNextStep(6, 2, 6925);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


Need to wait 3 more seconds
org notification: Position [subject=a40, id=null, cell=Cell [x=6, y=2], time=2015-05-27 15:29:09.477, clock=8]
object notification: Position [subject=a40, id=null, cell=Cell [x=6, y=2], time=2015-05-27 15:29:09.477, clock=8]
[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a10[CTAH] going goal: 3,2 color: neco
a30[CTAH] moveStepToGoal returns: [6,4]
Event processed UpdatePosition(6, 4, 8)
[Planbase]:{	B(clock(Clock));
	UpdatePosition(6, 4, Clock);
	NoNextStep(6, 4, 5979);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdatePosition(6, 4, 8)
}


[new scheduled]:[B(clock(Clock)); UpdatePosition(6, 4, Clock); NoNextStep(6, 4, 5979); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdatePosition(6, 4, 8)]
[After]:{	B(clock(Clock));
	UpdatePosition(6, 4, Clock);
	NoNextStep(6, 4, 5979);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdatePosition(6, 4, 8)
}


a40[CTAH] moveStepToGoal returns: [6,2]
[Planbase]:{	UpdatePosition(6, 4, 8);
	NoNextStep(6, 4, 5979);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[UpdatePosition(6, 4, 8); NoNextStep(6, 4, 5979); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 6, 5)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	UpdatePosition(6, 4, 8);
	NoNextStep(6, 4, 5979);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 6, 5))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


Event processed UpdatePosition(6, 2, 8)
[Planbase]:{	B(clock(Clock));
	UpdatePosition(6, 2, Clock);
	NoNextStep(6, 2, 6925);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdatePosition(6, 2, 8)
}


[new scheduled]:[B(clock(Clock)); UpdatePosition(6, 2, Clock); NoNextStep(6, 2, 6925); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdatePosition(6, 2, 8)]
[After]:{	B(clock(Clock));
	UpdatePosition(6, 2, Clock);
	NoNextStep(6, 2, 6925);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdatePosition(6, 2, 8)
}


[Planbase]:{	NoNextStep(6, 4, 5979);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[NoNextStep(6, 4, 5979); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	NoNextStep(6, 4, 5979);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	UpdatePosition(6, 2, 8);
	NoNextStep(6, 2, 6925);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[UpdatePosition(6, 2, 8); NoNextStep(6, 2, 6925); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 6)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	UpdatePosition(6, 2, 8);
	NoNextStep(6, 2, 6925);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 6))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	NoNextStep(6, 2, 6925);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[NoNextStep(6, 2, 6925); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	NoNextStep(6, 2, 6925);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a30[CTAH] going goal: 4,3 color: neco
[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a40[CTAH] going goal: 3,4 color: neco
object notification: Time [clock=9, time=2015-05-27 15:29:17.742]
object notification: Time [clock=9, time=2015-05-27 15:29:17.742]
object notification: Time [clock=9, time=2015-05-27 15:29:17.742]
org notification: Time [clock=9, time=2015-05-27 15:29:17.742]
a40[CTAH] paths: 1000
Need to wait 4 more seconds
a10[CTAH] paths: 1000
a10[CTAH] path: 0
a10[CTAH] path: Path: [1][1] [2][1] [2][2] [3][2]

a10[CTAH] moveStepToGoalTest returns I have chip: [2,1,no,no]
Event processed UpdateClock(9)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 2, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(2, 1, no)
								}
							else	{	NextStep(2, 1)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(2, 1, no)
						}
					else	{	NextStep(2, 1)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(9)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 2, 1)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(2, 1, no) else NextStep(2, 1) else if B(not no=no) then NextStep(2, 1, no) else NextStep(2, 1); if B(not no=no) then Sent(no, no, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdateClock(9)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 2, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(2, 1, no)
								}
							else	{	NextStep(2, 1)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(2, 1, no)
						}
					else	{	NextStep(2, 1)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdateClock(9)
}


[Planbase]:{	if	B(tile(Color1, 2, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(2, 1, no)
								}
							else	{	NextStep(2, 1)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(2, 1, no)
						}
					else	{	NextStep(2, 1)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 2, 1)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(2, 1, no) else NextStep(2, 1) else if B(not no=no) then NextStep(2, 1, no) else NextStep(2, 1); if B(not no=no) then Sent(no, no, open, 8); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(tile(Color1, 2, 1))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(2, 1, no)
								}
							else	{	NextStep(2, 1)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(2, 1, no)
						}
					else	{	NextStep(2, 1)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(white, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(2, 1, no)
						}
					else	{	NextStep(2, 1)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(2, 1, no)
				}
			else	{	NextStep(2, 1)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(white, V2))) then if B(700>V2) then if B(not no=no) then NextStep(2, 1, no) else NextStep(2, 1) else if B(not no=no) then NextStep(2, 1, no) else NextStep(2, 1); if B(not no=no) then Sent(no, no, open, 8); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(prohibition(useColor(white, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(2, 1, no)
						}
					else	{	NextStep(2, 1)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(2, 1, no)
				}
			else	{	NextStep(2, 1)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	NextStep(2, 1, no)
		}
	else	{	NextStep(2, 1)
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(not no=no) then NextStep(2, 1, no) else NextStep(2, 1); if B(not no=no) then Sent(no, no, open, 8); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(not no=no)
	then	{	NextStep(2, 1, no)
		}
	else	{	NextStep(2, 1)
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	NextStep(2, 1);
	if	B(not no=no)
	then	{	Sent(no, no, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[NextStep(2, 1); if B(not no=no) then Sent(no, no, open, 8); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	NextStep(2, 1);
	if	B(not no=no)
	then	{	Sent(no, no, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(not no=no) then Sent(no, no, open, 8); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


a40[CTAH] path: 0
a40[CTAH] path: Path: [6][2] [5][2] [4][2] [4][3] [4][4] [3][4]

a40[CTAH] moveStepToGoalTest nopoints: []
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] found a chip....: (R:5,C:2)
a40[CTAH] moveStepToGoalTest sent proposal for: [5,2,1,8689]
org notification: Proposal [id=8689, agent=a40, agent2=a20, clock=9, time=2015-05-27 15:29:23.133]
[Planbase]:{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


Event processed UpdateClock(9)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 5, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 8689=no)
							then	{	NextStep(5, 2, 8689)
								}
							else	{	NextStep(5, 2)
								}
						}
				}
			else	{	if	B(not 8689=no)
					then	{	NextStep(5, 2, 8689)
						}
					else	{	NextStep(5, 2)
						}
				}
		};
	if	B(not 8689=no)
	then	{	Sent(8689, 1, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(9)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 5, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 8689=no) then NextStep(5, 2, 8689) else NextStep(5, 2) else if B(not 8689=no) then NextStep(5, 2, 8689) else NextStep(5, 2); if B(not 8689=no) then Sent(8689, 1, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(9)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 5, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 8689=no)
							then	{	NextStep(5, 2, 8689)
								}
							else	{	NextStep(5, 2)
								}
						}
				}
			else	{	if	B(not 8689=no)
					then	{	NextStep(5, 2, 8689)
						}
					else	{	NextStep(5, 2)
						}
				}
		};
	if	B(not 8689=no)
	then	{	Sent(8689, 1, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(9)
}


[Planbase]:{	@ctenv(moveStepToGoal(neco, 2, 1),L2,0);
	if	B(L2=[actionresult([2,1])])
	then	{	B(clock(Clock));
			UpdatePosition(2, 1, Clock)
		};
	NoNextStep(2, 1);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoal(neco, 2, 1),L2,0); if B(L2=[actionresult([2,1])]) then {B(clock(Clock)); UpdatePosition(2, 1, Clock)}; NoNextStep(2, 1); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	@ctenv(moveStepToGoal(neco, 2, 1),L2,0);
	if	B(L2=[actionresult([2,1])])
	then	{	B(clock(Clock));
			UpdatePosition(2, 1, Clock)
		};
	NoNextStep(2, 1);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(tile(Color1, 5, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 8689=no)
							then	{	NextStep(5, 2, 8689)
								}
							else	{	NextStep(5, 2)
								}
						}
				}
			else	{	if	B(not 8689=no)
					then	{	NextStep(5, 2, 8689)
						}
					else	{	NextStep(5, 2)
						}
				}
		};
	if	B(not 8689=no)
	then	{	Sent(8689, 1, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 5, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 8689=no) then NextStep(5, 2, 8689) else NextStep(5, 2) else if B(not 8689=no) then NextStep(5, 2, 8689) else NextStep(5, 2); if B(not 8689=no) then Sent(8689, 1, open, 8); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(tile(Color1, 5, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 8689=no)
							then	{	NextStep(5, 2, 8689)
								}
							else	{	NextStep(5, 2)
								}
						}
				}
			else	{	if	B(not 8689=no)
					then	{	NextStep(5, 2, 8689)
						}
					else	{	NextStep(5, 2)
						}
				}
		};
	if	B(not 8689=no)
	then	{	Sent(8689, 1, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a10[CTAH] moveStepToGoal returns: false
org notification: Position [subject=a10, id=null, cell=Cell [x=2, y=1], time=2015-05-27 15:29:23.421, clock=9]
object notification: Position [subject=a10, id=null, cell=Cell [x=2, y=1], time=2015-05-27 15:29:23.421, clock=9]
Event processed UpdatePosition(2, 1, 9)
[Planbase]:{	NoNextStep(2, 1);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdatePosition(2, 1, 9)
}


[new scheduled]:[NoNextStep(2, 1); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100), UpdatePosition(2, 1, 9)]
[After]:{	NoNextStep(2, 1);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
},
{	UpdatePosition(2, 1, 9)
}


[Planbase]:{	if	B(prohibition(useColor(brown, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 8689=no)
					then	{	NextStep(5, 2, 8689)
						}
					else	{	NextStep(5, 2)
						}
				}
		}
	else	{	if	B(not 8689=no)
			then	{	NextStep(5, 2, 8689)
				}
			else	{	NextStep(5, 2)
				}
		};
	if	B(not 8689=no)
	then	{	Sent(8689, 1, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(brown, V2))) then if B(700>V2) then if B(not 8689=no) then NextStep(5, 2, 8689) else NextStep(5, 2) else if B(not 8689=no) then NextStep(5, 2, 8689) else NextStep(5, 2); if B(not 8689=no) then Sent(8689, 1, open, 8); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(brown, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 8689=no)
					then	{	NextStep(5, 2, 8689)
						}
					else	{	NextStep(5, 2)
						}
				}
		}
	else	{	if	B(not 8689=no)
			then	{	NextStep(5, 2, 8689)
				}
			else	{	NextStep(5, 2)
				}
		};
	if	B(not 8689=no)
	then	{	Sent(8689, 1, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(tile(white, 0, 0)) then dropgoal(useColor(white, 100) : Infinite, priority 10) else if B(prohibition(useColor(white, V2))) then if B(V2>100) then dropgoal(useColor(white, 100) : Infinite, priority 10) else findNextStep(white, 100); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 100)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(tile(white, 0, 0))
	then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(white, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(white, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(white, 100)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 100)
				}
		}
}


[Planbase]:{	if	B(not 8689=no)
	then	{	NextStep(5, 2, 8689)
		}
	else	{	NextStep(5, 2)
		};
	if	B(not 8689=no)
	then	{	Sent(8689, 1, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not 8689=no) then NextStep(5, 2, 8689) else NextStep(5, 2); if B(not 8689=no) then Sent(8689, 1, open, 8); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not 8689=no)
	then	{	NextStep(5, 2, 8689)
		}
	else	{	NextStep(5, 2)
		};
	if	B(not 8689=no)
	then	{	Sent(8689, 1, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	NextStep(5, 2, 8689);
	if	B(not 8689=no)
	then	{	Sent(8689, 1, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[NextStep(5, 2, 8689); if B(not 8689=no) then Sent(8689, 1, open, 8); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	NextStep(5, 2, 8689);
	if	B(not 8689=no)
	then	{	Sent(8689, 1, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not 8689=no)
	then	{	Sent(8689, 1, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not 8689=no) then Sent(8689, 1, open, 8); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not 8689=no)
	then	{	Sent(8689, 1, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	Sent(8689, 1, open, 8);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[Sent(8689, 1, open, 8); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	Sent(8689, 1, open, 8);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a10[CTAH] going goal: 3,2 color: neco
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(9>8+5)
	then	{	NoNextStep(5, 2, 8689);
			ReceivedMessage(noresponse, 8689)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(9>8+5) then {NoNextStep(5, 2, 8689); ReceivedMessage(noresponse, 8689)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(9>8+5)
	then	{	NoNextStep(5, 2, 8689);
			ReceivedMessage(noresponse, 8689)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(9>8+5)
	then	{	NoNextStep(5, 2, 8689);
			ReceivedMessage(noresponse, 8689)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(9>8+5) then {NoNextStep(5, 2, 8689); ReceivedMessage(noresponse, 8689)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(9>8+5)
	then	{	NoNextStep(5, 2, 8689);
			ReceivedMessage(noresponse, 8689)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(9>8+5)
	then	{	NoNextStep(5, 2, 8689);
			ReceivedMessage(noresponse, 8689)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(9>8+5) then {NoNextStep(5, 2, 8689); ReceivedMessage(noresponse, 8689)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(9>8+5)
	then	{	NoNextStep(5, 2, 8689);
			ReceivedMessage(noresponse, 8689)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(9>8+5)
	then	{	NoNextStep(5, 2, 8689);
			ReceivedMessage(noresponse, 8689)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(9>8+5) then {NoNextStep(5, 2, 8689); ReceivedMessage(noresponse, 8689)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(9>8+5)
	then	{	NoNextStep(5, 2, 8689);
			ReceivedMessage(noresponse, 8689)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(9>8+5)
	then	{	NoNextStep(5, 2, 8689);
			ReceivedMessage(noresponse, 8689)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(9>8+5) then {NoNextStep(5, 2, 8689); ReceivedMessage(noresponse, 8689)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(9>8+5)
	then	{	NoNextStep(5, 2, 8689);
			ReceivedMessage(noresponse, 8689)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(9>8+5)
	then	{	NoNextStep(5, 2, 8689);
			ReceivedMessage(noresponse, 8689)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(9>8+5) then {NoNextStep(5, 2, 8689); ReceivedMessage(noresponse, 8689)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(9>8+5)
	then	{	NoNextStep(5, 2, 8689);
			ReceivedMessage(noresponse, 8689)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 3
[MSG] i'm: 3
AGENT : got response to offer
org notification: Response [id=8689, response=accepted, clock=9, time=2015-05-27 15:29:26.917]
a30[CTAH] paths: 1000
Need to wait 3 more seconds
object notification: Time [clock=10, time=2015-05-27 15:29:27.746]
object notification: Time [clock=10, time=2015-05-27 15:29:27.746]
org notification: Time [clock=10, time=2015-05-27 15:29:27.746]
object notification: Time [clock=10, time=2015-05-27 15:29:27.746]
setPhases in ClientGameStatus, the current phase is Movement Phase
setPhases in ClientGameStatus, the current phase is Movement Phase
setPhases in ClientGameStatus, the current phase is Movement Phase
a30[CTAH] path: 0
a30[CTAH] path: Path: [6][4] [5][4] [4][4] [4][3]

a30[CTAH] moveStepToGoalTest returns I have chip: [5,4,no,no]
a10[CTAH] paths: 1000
Need to wait 4 more seconds
a10[CTAH] path: 0
a10[CTAH] path: Path: [2][1] [2][2] [3][2]

a10[CTAH] moveStepToGoalTest nopoints: []
a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] found a chip....: (R:2,C:2)
a10[CTAH] moveStepToGoalTest sent proposal for: [2,2,3,6176]
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscourseMessage
[MSG] Message is of type: basicproposal
[MSG] Message is for: 3
[MSG] i'm: 3
org notification: Proposal [id=6176, agent=a10, agent2=a40, clock=10, time=2015-05-27 15:29:35.191]
Received a proposal creating event
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 0
[MSG] i'm: 0
AGENT : got response to offer
Event processed UpdateClock(9)
Event processed UpdateClock(10)
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed UpdateClock(10)
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(9)
},
{	UpdateClock(10)
},
{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 5, 4)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(9), UpdateClock(10), @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(9)
},
{	UpdateClock(10)
},
{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 2, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6176=no)
							then	{	NextStep(2, 2, 6176)
								}
							else	{	NextStep(2, 2)
								}
						}
				}
			else	{	if	B(not 6176=no)
					then	{	NextStep(2, 2, 6176)
						}
					else	{	NextStep(2, 2)
						}
				}
		};
	if	B(not 6176=no)
	then	{	Sent(6176, 3, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(10)
},
{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 2, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 6176=no) then NextStep(2, 2, 6176) else NextStep(2, 2) else if B(not 6176=no) then NextStep(2, 2, 6176) else NextStep(2, 2); if B(not 6176=no) then Sent(6176, 3, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(10), @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 2, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6176=no)
							then	{	NextStep(2, 2, 6176)
								}
							else	{	NextStep(2, 2)
								}
						}
				}
			else	{	if	B(not 6176=no)
					then	{	NextStep(2, 2, 6176)
						}
					else	{	NextStep(2, 2)
						}
				}
		};
	if	B(not 6176=no)
	then	{	Sent(6176, 3, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(10)
},
{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


Event processed @ctenv(functionToList(message(response, 8689, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed UpdateClock(10)
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed @ctenv(functionToList(proposal(proposal, 0, 6176, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[CTAH] Array of Terms: [Lapapl.data.Term;@5e27d32f
[CTAH] The created APLList : [phasechange]
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(functionToList(message(response, 8689, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
},
{	UpdateClock(10)
},
{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
},
{	@ctenv(functionToList(proposal(proposal, 0, 6176, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), @ctenv(functionToList(message(response, 8689, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), UpdateClock(10), @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), @ctenv(functionToList(proposal(proposal, 0, 6176, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(functionToList(message(response, 8689, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
},
{	UpdateClock(10)
},
{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
},
{	@ctenv(functionToList(proposal(proposal, 0, 6176, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@40ae9477
[CTAH] The created APLList : [phasechange]
[CTAH] Array of Terms: [Lapapl.data.Term;@1e1b986b
[CTAH] The created APLList : [response,8689,accept]
[CTAH] Array of Terms: [Lapapl.data.Term;@25b3a83e
[CTAH] The created APLList : [phasechange]
[CTAH] Array of Terms: [Lapapl.data.Term;@35ea91c8
[CTAH] The created APLList : [proposal,0,6176,open]
[Planbase]:{	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B(tile(Color1, 5, 4)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 8); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B(tile(Color1, 2, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6176=no)
							then	{	NextStep(2, 2, 6176)
								}
							else	{	NextStep(2, 2)
								}
						}
				}
			else	{	if	B(not 6176=no)
					then	{	NextStep(2, 2, 6176)
						}
					else	{	NextStep(2, 2)
						}
				}
		};
	if	B(not 6176=no)
	then	{	Sent(6176, 3, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B(tile(Color1, 2, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 6176=no) then NextStep(2, 2, 6176) else NextStep(2, 2) else if B(not 6176=no) then NextStep(2, 2, 6176) else NextStep(2, 2); if B(not 6176=no) then Sent(6176, 3, open, 9); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(tile(Color1, 2, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 6176=no)
							then	{	NextStep(2, 2, 6176)
								}
							else	{	NextStep(2, 2)
								}
						}
				}
			else	{	if	B(not 6176=no)
					then	{	NextStep(2, 2, 6176)
						}
					else	{	NextStep(2, 2)
						}
				}
		};
	if	B(not 6176=no)
	then	{	Sent(6176, 3, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B([actionresult([response,8689,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,8689,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,8689,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	if	B([actionresult([proposal,0,6176,open])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([proposal,0,6176,open])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([proposal,0,6176,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B([actionresult([response,8689,accept])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([response,8689,accept])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([response,8689,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), if B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), if B([actionresult([proposal,0,6176,open])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([proposal,0,6176,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,0,6176,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([response,8689,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,8689,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,8689,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	if	B([actionresult([proposal,0,6176,open])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([proposal,0,6176,open])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([proposal,0,6176,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(blue, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 8); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(brown, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 6176=no)
					then	{	NextStep(2, 2, 6176)
						}
					else	{	NextStep(2, 2)
						}
				}
		}
	else	{	if	B(not 6176=no)
			then	{	NextStep(2, 2, 6176)
				}
			else	{	NextStep(2, 2)
				}
		};
	if	B(not 6176=no)
	then	{	Sent(6176, 3, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(brown, V2))) then if B(700>V2) then if B(not 6176=no) then NextStep(2, 2, 6176) else NextStep(2, 2) else if B(not 6176=no) then NextStep(2, 2, 6176) else NextStep(2, 2); if B(not 6176=no) then Sent(6176, 3, open, 9); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(prohibition(useColor(brown, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 6176=no)
					then	{	NextStep(2, 2, 6176)
						}
					else	{	NextStep(2, 2)
						}
				}
		}
	else	{	if	B(not 6176=no)
			then	{	NextStep(2, 2, 6176)
				}
			else	{	NextStep(2, 2)
				}
		};
	if	B(not 6176=no)
	then	{	Sent(6176, 3, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	if	B(10>8+5)
	then	{	NoNextStep(5, 2, 8689);
			ReceivedMessage(noresponse, 8689)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 8689)
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	if	B([actionresult([proposal,0,6176,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,0,6176,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B(10>8+5) then {NoNextStep(5, 2, 8689); ReceivedMessage(noresponse, 8689)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(response=response) then ReceivedMessage(accept, 8689), if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), if B([actionresult([proposal,0,6176,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,0,6176,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(10>8+5)
	then	{	NoNextStep(5, 2, 8689);
			ReceivedMessage(noresponse, 8689)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 8689)
		}
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	if	B([actionresult([proposal,0,6176,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,0,6176,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedEvent(phasechange)
}


[new scheduled]:[if B(700>1000) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 8); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), ReceivedEvent(phasechange)]
[After]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedEvent(phasechange)
}


[Planbase]:{	if	B(not 6176=no)
	then	{	NextStep(2, 2, 6176)
		}
	else	{	NextStep(2, 2)
		};
	if	B(not 6176=no)
	then	{	Sent(6176, 3, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedEvent(phasechange)
}


[new scheduled]:[if B(not 6176=no) then NextStep(2, 2, 6176) else NextStep(2, 2); if B(not 6176=no) then Sent(6176, 3, open, 9); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), ReceivedEvent(phasechange)]
[After]:{	if	B(not 6176=no)
	then	{	NextStep(2, 2, 6176)
		}
	else	{	NextStep(2, 2)
		};
	if	B(not 6176=no)
	then	{	Sent(6176, 3, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedEvent(phasechange)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedMessage(accept, 8689)
},
{	ReceivedEvent(phasechange)
},
{	if	B([actionresult([proposal,0,6176,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), ReceivedMessage(accept, 8689), ReceivedEvent(phasechange), if B([actionresult([proposal,0,6176,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedMessage(accept, 8689)
},
{	ReceivedEvent(phasechange)
},
{	if	B([actionresult([proposal,0,6176,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[update, if B(not no=no) then Sent(no, no, open, 8); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	update
},
{	if	B(not no=no)
	then	{	Sent(no, no, open, 8)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	NextStep(2, 2, 6176);
	if	B(not 6176=no)
	then	{	Sent(6176, 3, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[update, NextStep(2, 2, 6176); if B(not 6176=no) then Sent(6176, 3, open, 9); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	update
},
{	NextStep(2, 2, 6176);
	if	B(not 6176=no)
	then	{	Sent(6176, 3, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(proposal=proposal)
	then	{	ReceivedProposal(0, 6176, open)
		}
}


[new scheduled]:[update, findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(proposal=proposal) then ReceivedProposal(0, 6176, open)]
[After]:{	update
},
{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(0, 6176, open)
		}
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated, if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(not 6176=no)
	then	{	Sent(6176, 3, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated, if B(not 6176=no) then Sent(6176, 3, open, 9); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(not 6176=no)
	then	{	Sent(6176, 3, open, 9)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	@ctenv(moveStepToGoal(neco, 5, 2),L2,0);
	if	B(L2=[actionresult([5,2])])
	then	{	B(clock(Clock));
			UpdatePosition(5, 2, Clock)
		};
	NoNextStep(5, 2, 8689);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedProposal(0, 6176, open)
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated, @ctenv(moveStepToGoal(neco, 5, 2),L2,0); if B(L2=[actionresult([5,2])]) then {B(clock(Clock)); UpdatePosition(5, 2, Clock)}; NoNextStep(5, 2, 8689); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), ReceivedProposal(0, 6176, open)]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	@ctenv(moveStepToGoal(neco, 5, 2),L2,0);
	if	B(L2=[actionresult([5,2])])
	then	{	B(clock(Clock));
			UpdatePosition(5, 2, Clock)
		};
	NoNextStep(5, 2, 8689);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedProposal(0, 6176, open)
}


Need to wait 4 more seconds
org notification: Position [subject=a40, id=null, cell=Cell [x=5, y=2], time=2015-05-27 15:29:35.808, clock=10]
object notification: Position [subject=a40, id=null, cell=Cell [x=5, y=2], time=2015-05-27 15:29:35.808, clock=10]
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), @ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	Sent(6176, 3, open, 9);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated, Sent(6176, 3, open, 9); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	Sent(6176, 3, open, 9);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[GetPhase(movementphase); B(clock(Clock)); if B(event(phasechange)) then Updated, if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[GetPhase(movementphase); B(clock(Clock)); if B(event(phasechange)) then Updated, if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[B(clock(Clock)); if B(event(phasechange)) then Updated, @ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a30[CTAH] going goal: 4,3 color: neco
[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(event(phasechange)) then Updated, if B(10>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	Updated
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[Updated, if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	Updated
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(10>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(10>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


object notification: Time [clock=11, time=2015-05-27 15:29:37.748]
object notification: Time [clock=11, time=2015-05-27 15:29:37.748]
object notification: Time [clock=11, time=2015-05-27 15:29:37.748]
org notification: Time [clock=11, time=2015-05-27 15:29:37.748]
Event processed UpdateClock(11)
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(11)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(11)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(11)
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a40[CTAH] moveStepToGoal returns: [5,2]
Event processed UpdatePosition(5, 2, 10)
Event processed UpdateClock(11)
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	B(clock(Clock));
	UpdatePosition(5, 2, Clock);
	NoNextStep(5, 2, 8689);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdatePosition(5, 2, 10)
},
{	UpdateClock(11)
}


[new scheduled]:[getScoreAfterExchange(3, 6176); if G(at(A, B, C)) then skip else makeResponse(6176, accept), @ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated, B(clock(Clock)); UpdatePosition(5, 2, Clock); NoNextStep(5, 2, 8689); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdatePosition(5, 2, 10), UpdateClock(11)]
[After]:{	getScoreAfterExchange(3, 6176);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(6176, accept)
		}
},
{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	B(clock(Clock));
	UpdatePosition(5, 2, Clock);
	NoNextStep(5, 2, 8689);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdatePosition(5, 2, 10)
},
{	UpdateClock(11)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	GetScoreAfterExchange(6176, yes);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(6176, accept)
		}
},
{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	UpdatePosition(5, 2, 10);
	NoNextStep(5, 2, 8689);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[GetScoreAfterExchange(6176, yes); if G(at(A, B, C)) then skip else makeResponse(6176, accept), GetPhase(movementphase); B(clock(Clock)); if B(event(phasechange)) then Updated, UpdatePosition(5, 2, 10); NoNextStep(5, 2, 8689); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	GetScoreAfterExchange(6176, yes);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(6176, accept)
		}
},
{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	UpdatePosition(5, 2, 10);
	NoNextStep(5, 2, 8689);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(6176, accept)
		}
},
{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	NoNextStep(5, 2, 8689);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(A, B, C)) then skip else makeResponse(6176, accept), B(clock(Clock)); if B(event(phasechange)) then Updated, NoNextStep(5, 2, 8689); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(6176, accept)
		}
},
{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	NoNextStep(5, 2, 8689);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	skip
},
{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[skip, if B(event(phasechange)) then Updated, if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	skip
},
{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	Updated
},
{	if	B(scoreAfterExchange(6176, Score))
	then	{	respond(6176, 700)
		}
}


[new scheduled]:[Updated, if B(scoreAfterExchange(6176, Score)) then respond(6176, 700)]
[After]:{	Updated
},
{	if	B(scoreAfterExchange(6176, Score))
	then	{	respond(6176, 700)
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	respond(6176, 700)
}


[new scheduled]:[respond(6176, 700)]
[After]:{	respond(6176, 700)
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	B(ANSWER=accept);
	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(ANSWER=reject)
						}
				}
		};
	makeResponse(6176, ANSWER)
}


[new scheduled]:[B(ANSWER=accept); if B(yes=no) then if B(prohibition(rejectRequests(V2))) then if B(V2>700) then B(ANSWER=reject); makeResponse(6176, ANSWER)]
[After]:{	B(ANSWER=accept);
	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(ANSWER=reject)
						}
				}
		};
	makeResponse(6176, ANSWER)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(accept=reject)
						}
				}
		};
	makeResponse(6176, accept)
}


[new scheduled]:[if B(yes=no) then if B(prohibition(rejectRequests(V2))) then if B(V2>700) then B(accept=reject); makeResponse(6176, accept)]
[After]:{	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(accept=reject)
						}
				}
		};
	makeResponse(6176, accept)
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	makeResponse(6176, accept)
}


[new scheduled]:[makeResponse(6176, accept)]
[After]:{	makeResponse(6176, accept)
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	sendResponse(accept, 6176)
}


[new scheduled]:[sendResponse(accept, 6176)]
[After]:{	sendResponse(accept, 6176)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(sendResponse(6176, accept),L1,0);
	Sent(accept, 6176)
}


[new scheduled]:[@ctenv(sendResponse(6176, accept),L1,0); Sent(accept, 6176)]
[After]:{	@ctenv(sendResponse(6176, accept),L1,0);
	Sent(accept, 6176)
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 0
[MSG] i'm: 0
AGENT : got response to offer
org notification: Response [id=6176, response=accepted, clock=11, time=2015-05-27 15:29:41.052]
Event processed @ctenv(functionToList(message(response, 6176, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(functionToList(message(response, 6176, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), @ctenv(functionToList(message(response, 6176, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(functionToList(message(response, 6176, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@7ebda552
[CTAH] The created APLList : [response,6176,accept]
[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([response,6176,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,6176,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,6176,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B([actionresult([response,6176,accept])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([response,6176,accept])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([response,6176,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([response,6176,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,6176,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,6176,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(response=response)
	then	{	ReceivedMessage(accept, 6176)
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(response=response) then ReceivedMessage(accept, 6176)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 6176)
		}
}


a40[CTAH] going goal: 3,4 color: neco
[Planbase]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedMessage(accept, 6176)
}


[new scheduled]:[if B(11>9+5) then {NoNextStep(2, 2, 6176); ReceivedMessage(noresponse, 6176)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), ReceivedMessage(accept, 6176)]
[After]:{	if	B(11>9+5)
	then	{	NoNextStep(2, 2, 6176);
			ReceivedMessage(noresponse, 6176)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedMessage(accept, 6176)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoal(neco, 2, 2),L2,0);
	if	B(L2=[actionresult([2,2])])
	then	{	B(clock(Clock));
			UpdatePosition(2, 2, Clock)
		};
	NoNextStep(2, 2, 6176);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoal(neco, 2, 2),L2,0); if B(L2=[actionresult([2,2])]) then {B(clock(Clock)); UpdatePosition(2, 2, Clock)}; NoNextStep(2, 2, 6176); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoal(neco, 2, 2),L2,0);
	if	B(L2=[actionresult([2,2])])
	then	{	B(clock(Clock));
			UpdatePosition(2, 2, Clock)
		};
	NoNextStep(2, 2, 6176);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a10[CTAH] moveStepToGoal returns: false
org notification: Position [subject=a10, id=null, cell=Cell [x=2, y=2], time=2015-05-27 15:29:41.82, clock=11]
object notification: Position [subject=a10, id=null, cell=Cell [x=2, y=2], time=2015-05-27 15:29:41.82, clock=11]
Event processed UpdatePosition(2, 2, 11)
[Planbase]:{	NoNextStep(2, 2, 6176);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdatePosition(2, 2, 11)
}


[new scheduled]:[NoNextStep(2, 2, 6176); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdatePosition(2, 2, 11)]
[After]:{	NoNextStep(2, 2, 6176);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdatePosition(2, 2, 11)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a10[CTAH] going goal: 3,2 color: neco
object notification: Time [clock=12, time=2015-05-27 15:29:47.75]
org notification: Time [clock=12, time=2015-05-27 15:29:47.75]
object notification: Time [clock=12, time=2015-05-27 15:29:47.75]
object notification: Time [clock=12, time=2015-05-27 15:29:47.75]
a30[CTAH] paths: 1000
Need to wait 4 more seconds
a40[CTAH] paths: 1000
Need to wait 4 more seconds
a10[CTAH] paths: 1000
a10[CTAH] path: 0
a10[CTAH] path: Path: [2][1] [2][2] [3][2]

a10[CTAH] moveStepToGoalTest nopoints: []
a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] found a chip....: (R:2,C:2)
a10[CTAH] moveStepToGoalTest sent proposal for: [2,2,1,2811]
org notification: Proposal [id=2811, agent=a10, agent2=a20, clock=12, time=2015-05-27 15:29:51.582]
Event processed UpdateClock(12)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 2, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 2811=no)
							then	{	NextStep(2, 2, 2811)
								}
							else	{	NextStep(2, 2)
								}
						}
				}
			else	{	if	B(not 2811=no)
					then	{	NextStep(2, 2, 2811)
						}
					else	{	NextStep(2, 2)
						}
				}
		};
	if	B(not 2811=no)
	then	{	Sent(2811, 1, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(12)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 2, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 2811=no) then NextStep(2, 2, 2811) else NextStep(2, 2) else if B(not 2811=no) then NextStep(2, 2, 2811) else NextStep(2, 2); if B(not 2811=no) then Sent(2811, 1, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(12)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 2, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 2811=no)
							then	{	NextStep(2, 2, 2811)
								}
							else	{	NextStep(2, 2)
								}
						}
				}
			else	{	if	B(not 2811=no)
					then	{	NextStep(2, 2, 2811)
						}
					else	{	NextStep(2, 2)
						}
				}
		};
	if	B(not 2811=no)
	then	{	Sent(2811, 1, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(12)
}


[Planbase]:{	if	B(tile(Color1, 2, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 2811=no)
							then	{	NextStep(2, 2, 2811)
								}
							else	{	NextStep(2, 2)
								}
						}
				}
			else	{	if	B(not 2811=no)
					then	{	NextStep(2, 2, 2811)
						}
					else	{	NextStep(2, 2)
						}
				}
		};
	if	B(not 2811=no)
	then	{	Sent(2811, 1, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 2, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 2811=no) then NextStep(2, 2, 2811) else NextStep(2, 2) else if B(not 2811=no) then NextStep(2, 2, 2811) else NextStep(2, 2); if B(not 2811=no) then Sent(2811, 1, open, 11); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(tile(Color1, 2, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 2811=no)
							then	{	NextStep(2, 2, 2811)
								}
							else	{	NextStep(2, 2)
								}
						}
				}
			else	{	if	B(not 2811=no)
					then	{	NextStep(2, 2, 2811)
						}
					else	{	NextStep(2, 2)
						}
				}
		};
	if	B(not 2811=no)
	then	{	Sent(2811, 1, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(brown, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 2811=no)
					then	{	NextStep(2, 2, 2811)
						}
					else	{	NextStep(2, 2)
						}
				}
		}
	else	{	if	B(not 2811=no)
			then	{	NextStep(2, 2, 2811)
				}
			else	{	NextStep(2, 2)
				}
		};
	if	B(not 2811=no)
	then	{	Sent(2811, 1, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(brown, V2))) then if B(700>V2) then if B(not 2811=no) then NextStep(2, 2, 2811) else NextStep(2, 2) else if B(not 2811=no) then NextStep(2, 2, 2811) else NextStep(2, 2); if B(not 2811=no) then Sent(2811, 1, open, 11); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(brown, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 2811=no)
					then	{	NextStep(2, 2, 2811)
						}
					else	{	NextStep(2, 2)
						}
				}
		}
	else	{	if	B(not 2811=no)
			then	{	NextStep(2, 2, 2811)
				}
			else	{	NextStep(2, 2)
				}
		};
	if	B(not 2811=no)
	then	{	Sent(2811, 1, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not 2811=no)
	then	{	NextStep(2, 2, 2811)
		}
	else	{	NextStep(2, 2)
		};
	if	B(not 2811=no)
	then	{	Sent(2811, 1, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not 2811=no) then NextStep(2, 2, 2811) else NextStep(2, 2); if B(not 2811=no) then Sent(2811, 1, open, 11); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not 2811=no)
	then	{	NextStep(2, 2, 2811)
		}
	else	{	NextStep(2, 2)
		};
	if	B(not 2811=no)
	then	{	Sent(2811, 1, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	NextStep(2, 2, 2811);
	if	B(not 2811=no)
	then	{	Sent(2811, 1, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[NextStep(2, 2, 2811); if B(not 2811=no) then Sent(2811, 1, open, 11); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	NextStep(2, 2, 2811);
	if	B(not 2811=no)
	then	{	Sent(2811, 1, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not 2811=no)
	then	{	Sent(2811, 1, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not 2811=no) then Sent(2811, 1, open, 11); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not 2811=no)
	then	{	Sent(2811, 1, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	Sent(2811, 1, open, 11);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[Sent(2811, 1, open, 11); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	Sent(2811, 1, open, 11);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(12>11+5)
	then	{	NoNextStep(2, 2, 2811);
			ReceivedMessage(noresponse, 2811)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(12>11+5) then {NoNextStep(2, 2, 2811); ReceivedMessage(noresponse, 2811)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(12>11+5)
	then	{	NoNextStep(2, 2, 2811);
			ReceivedMessage(noresponse, 2811)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(12>11+5)
	then	{	NoNextStep(2, 2, 2811);
			ReceivedMessage(noresponse, 2811)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(12>11+5) then {NoNextStep(2, 2, 2811); ReceivedMessage(noresponse, 2811)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(12>11+5)
	then	{	NoNextStep(2, 2, 2811);
			ReceivedMessage(noresponse, 2811)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(12>11+5)
	then	{	NoNextStep(2, 2, 2811);
			ReceivedMessage(noresponse, 2811)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(12>11+5) then {NoNextStep(2, 2, 2811); ReceivedMessage(noresponse, 2811)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(12>11+5)
	then	{	NoNextStep(2, 2, 2811);
			ReceivedMessage(noresponse, 2811)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(12>11+5)
	then	{	NoNextStep(2, 2, 2811);
			ReceivedMessage(noresponse, 2811)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(12>11+5) then {NoNextStep(2, 2, 2811); ReceivedMessage(noresponse, 2811)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(12>11+5)
	then	{	NoNextStep(2, 2, 2811);
			ReceivedMessage(noresponse, 2811)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(12>11+5)
	then	{	NoNextStep(2, 2, 2811);
			ReceivedMessage(noresponse, 2811)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(12>11+5) then {NoNextStep(2, 2, 2811); ReceivedMessage(noresponse, 2811)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(12>11+5)
	then	{	NoNextStep(2, 2, 2811);
			ReceivedMessage(noresponse, 2811)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a30[CTAH] path: 0
a30[CTAH] path: Path: [6][4] [5][4] [4][4] [4][3]

a30[CTAH] moveStepToGoalTest returns I have chip: [5,4,no,no]
Event processed UpdateClock(11)
Event processed UpdateClock(12)
[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	B(clock(Clock));
	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(11)
},
{	UpdateClock(12)
}


[new scheduled]:[if B(event(phasechange)) then Updated, B(clock(Clock)); if B(tile(Color1, 5, 4)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(11), UpdateClock(12)]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	B(clock(Clock));
	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(11)
},
{	UpdateClock(12)
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	Updated
},
{	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 10)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[Updated, if B(tile(Color1, 5, 4)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 10); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	Updated
},
{	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 10)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 10)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(blue, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 10); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 10)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(12>11+5)
	then	{	NoNextStep(2, 2, 2811);
			ReceivedMessage(noresponse, 2811)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(12>11+5) then {NoNextStep(2, 2, 2811); ReceivedMessage(noresponse, 2811)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(12>11+5)
	then	{	NoNextStep(2, 2, 2811);
			ReceivedMessage(noresponse, 2811)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 10)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(700>1000) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 10); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 10)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 10)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not no=no) then Sent(no, no, open, 10); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 10)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(12>11+5)
	then	{	NoNextStep(2, 2, 2811);
			ReceivedMessage(noresponse, 2811)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(12>11+5) then {NoNextStep(2, 2, 2811); ReceivedMessage(noresponse, 2811)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(12>11+5)
	then	{	NoNextStep(2, 2, 2811);
			ReceivedMessage(noresponse, 2811)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 0
[MSG] i'm: 0
AGENT : got response to offer
org notification: Response [id=2811, response=accepted, clock=12, time=2015-05-27 15:29:53.64]
[Planbase]:{	if	B(12>11+5)
	then	{	NoNextStep(2, 2, 2811);
			ReceivedMessage(noresponse, 2811)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(12>11+5) then {NoNextStep(2, 2, 2811); ReceivedMessage(noresponse, 2811)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(12>11+5)
	then	{	NoNextStep(2, 2, 2811);
			ReceivedMessage(noresponse, 2811)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a30[CTAH] going goal: 4,3 color: neco
Event processed @ctenv(functionToList(message(response, 2811, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(functionToList(message(response, 2811, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), @ctenv(functionToList(message(response, 2811, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(functionToList(message(response, 2811, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@2634351f
[CTAH] The created APLList : [response,2811,accept]
[Planbase]:{	if	B([actionresult([response,2811,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,2811,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,2811,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B([actionresult([response,2811,accept])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([response,2811,accept])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([response,2811,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([response,2811,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,2811,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,2811,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B(12>11+5)
	then	{	NoNextStep(2, 2, 2811);
			ReceivedMessage(noresponse, 2811)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 2811)
		}
}


[new scheduled]:[if B(12>11+5) then {NoNextStep(2, 2, 2811); ReceivedMessage(noresponse, 2811)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(response=response) then ReceivedMessage(accept, 2811)]
[After]:{	if	B(12>11+5)
	then	{	NoNextStep(2, 2, 2811);
			ReceivedMessage(noresponse, 2811)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 2811)
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedMessage(accept, 2811)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), ReceivedMessage(accept, 2811)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedMessage(accept, 2811)
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a40[CTAH] path: 0
a40[CTAH] path: Path: [5][2] [4][2] [4][3] [3][3] [3][4]

a40[CTAH] moveStepToGoalTest returns I have chip: [4,2,no,no]
[Planbase]:{	@ctenv(moveStepToGoal(neco, 2, 2),L2,0);
	if	B(L2=[actionresult([2,2])])
	then	{	B(clock(Clock));
			UpdatePosition(2, 2, Clock)
		};
	NoNextStep(2, 2, 2811);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoal(neco, 2, 2),L2,0); if B(L2=[actionresult([2,2])]) then {B(clock(Clock)); UpdatePosition(2, 2, Clock)}; NoNextStep(2, 2, 2811); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoal(neco, 2, 2),L2,0);
	if	B(L2=[actionresult([2,2])])
	then	{	B(clock(Clock));
			UpdatePosition(2, 2, Clock)
		};
	NoNextStep(2, 2, 2811);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


Event processed UpdateClock(12)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 4, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 2, no)
								}
							else	{	NextStep(4, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 2, no)
						}
					else	{	NextStep(4, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(12)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 4, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(4, 2, no) else NextStep(4, 2) else if B(not no=no) then NextStep(4, 2, no) else NextStep(4, 2); if B(not no=no) then Sent(no, no, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(12)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 4, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 2, no)
								}
							else	{	NextStep(4, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 2, no)
						}
					else	{	NextStep(4, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(12)
}


a10[CTAH] moveStepToGoal returns: false
org notification: Position [subject=a10, id=null, cell=Cell [x=2, y=2], time=2015-05-27 15:29:54.154, clock=12]
object notification: Position [subject=a10, id=null, cell=Cell [x=2, y=2], time=2015-05-27 15:29:54.154, clock=12]
Event processed UpdatePosition(2, 2, 12)
[Planbase]:{	NoNextStep(2, 2, 2811);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdatePosition(2, 2, 12)
}


[new scheduled]:[NoNextStep(2, 2, 2811); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdatePosition(2, 2, 12)]
[After]:{	NoNextStep(2, 2, 2811);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdatePosition(2, 2, 12)
}


[Planbase]:{	if	B(tile(Color1, 4, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 2, no)
								}
							else	{	NextStep(4, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 2, no)
						}
					else	{	NextStep(4, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 4, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(4, 2, no) else NextStep(4, 2) else if B(not no=no) then NextStep(4, 2, no) else NextStep(4, 2); if B(not no=no) then Sent(no, no, open, 11); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(tile(Color1, 4, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 2, no)
								}
							else	{	NextStep(4, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 2, no)
						}
					else	{	NextStep(4, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(yellow, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(4, 2, no)
						}
					else	{	NextStep(4, 2)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(4, 2, no)
				}
			else	{	NextStep(4, 2)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(yellow, V2))) then if B(700>V2) then if B(not no=no) then NextStep(4, 2, no) else NextStep(4, 2) else if B(not no=no) then NextStep(4, 2, no) else NextStep(4, 2); if B(not no=no) then Sent(no, no, open, 11); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(yellow, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(4, 2, no)
						}
					else	{	NextStep(4, 2)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(4, 2, no)
				}
			else	{	NextStep(4, 2)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	NextStep(4, 2, no)
		}
	else	{	NextStep(4, 2)
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not no=no) then NextStep(4, 2, no) else NextStep(4, 2); if B(not no=no) then Sent(no, no, open, 11); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not no=no)
	then	{	NextStep(4, 2, no)
		}
	else	{	NextStep(4, 2)
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	NextStep(4, 2);
	if	B(not no=no)
	then	{	Sent(no, no, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[NextStep(4, 2); if B(not no=no) then Sent(no, no, open, 11); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	NextStep(4, 2);
	if	B(not no=no)
	then	{	Sent(no, no, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not no=no) then Sent(no, no, open, 11); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 11)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a10[CTAH] going goal: 3,2 color: neco
[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoal(neco, 4, 2),L2,0);
	if	B(L2=[actionresult([4,2])])
	then	{	B(clock(Clock));
			UpdatePosition(4, 2, Clock)
		};
	NoNextStep(4, 2);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoal(neco, 4, 2),L2,0); if B(L2=[actionresult([4,2])]) then {B(clock(Clock)); UpdatePosition(4, 2, Clock)}; NoNextStep(4, 2); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoal(neco, 4, 2),L2,0);
	if	B(L2=[actionresult([4,2])])
	then	{	B(clock(Clock));
			UpdatePosition(4, 2, Clock)
		};
	NoNextStep(4, 2);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


Need to wait 4 more seconds
object notification: Position [subject=a40, id=null, cell=Cell [x=4, y=2], time=2015-05-27 15:29:54.982, clock=12]
org notification: Position [subject=a40, id=null, cell=Cell [x=4, y=2], time=2015-05-27 15:29:54.982, clock=12]
object notification: Time [clock=13, time=2015-05-27 15:29:57.753]
object notification: Time [clock=13, time=2015-05-27 15:29:57.753]
object notification: Time [clock=13, time=2015-05-27 15:29:57.753]
org notification: Time [clock=13, time=2015-05-27 15:29:57.753]
a40[CTAH] moveStepToGoal returns: [4,2]
Event processed UpdatePosition(4, 2, 12)
Event processed UpdateClock(13)
[Planbase]:{	B(clock(Clock));
	UpdatePosition(4, 2, Clock);
	NoNextStep(4, 2);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdatePosition(4, 2, 12)
},
{	UpdateClock(13)
}


[new scheduled]:[B(clock(Clock)); UpdatePosition(4, 2, Clock); NoNextStep(4, 2); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdatePosition(4, 2, 12), UpdateClock(13)]
[After]:{	B(clock(Clock));
	UpdatePosition(4, 2, Clock);
	NoNextStep(4, 2);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdatePosition(4, 2, 12)
},
{	UpdateClock(13)
}


[Planbase]:{	UpdatePosition(4, 2, 12);
	NoNextStep(4, 2);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[UpdatePosition(4, 2, 12); NoNextStep(4, 2); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	UpdatePosition(4, 2, 12);
	NoNextStep(4, 2);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	NoNextStep(4, 2);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[NoNextStep(4, 2); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	NoNextStep(4, 2);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a40[CTAH] going goal: 3,4 color: neco
a40[CTAH] paths: 1000
Need to wait 4 more seconds
a30[CTAH] paths: 1000
Need to wait 4 more seconds
object notification: Time [clock=14, time=2015-05-27 15:30:07.756]
object notification: Time [clock=14, time=2015-05-27 15:30:07.756]
object notification: Time [clock=14, time=2015-05-27 15:30:07.756]
org notification: Time [clock=14, time=2015-05-27 15:30:07.756]
a10[CTAH] paths: 1000
a10[CTAH] path: 0
a10[CTAH] path: Path: [2][2] [3][2]

a10[CTAH] moveStepToGoalTest nopoints: []
a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] found a chip....: (R:3,C:2)
a10[CTAH] moveStepToGoalTest sent proposal for: [3,2,2,218]
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscourseMessage
[MSG] Message is of type: basicproposal
[MSG] Message is for: 2
[MSG] i'm: 2
org notification: Proposal [id=218, agent=a10, agent2=a30, clock=14, time=2015-05-27 15:30:08.411]
Received a proposal creating event
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 0
[MSG] i'm: 0
AGENT : got response to offer
Event processed UpdateClock(13)
Event processed UpdateClock(14)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 218=no)
							then	{	NextStep(3, 2, 218)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not 218=no)
					then	{	NextStep(3, 2, 218)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not 218=no)
	then	{	Sent(218, 2, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(13)
},
{	UpdateClock(14)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 3, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 218=no) then NextStep(3, 2, 218) else NextStep(3, 2) else if B(not 218=no) then NextStep(3, 2, 218) else NextStep(3, 2); if B(not 218=no) then Sent(218, 2, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(13), UpdateClock(14)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 218=no)
							then	{	NextStep(3, 2, 218)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not 218=no)
					then	{	NextStep(3, 2, 218)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not 218=no)
	then	{	Sent(218, 2, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(13)
},
{	UpdateClock(14)
}


[Planbase]:{	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 218=no)
							then	{	NextStep(3, 2, 218)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not 218=no)
					then	{	NextStep(3, 2, 218)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not 218=no)
	then	{	Sent(218, 2, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 3, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 218=no) then NextStep(3, 2, 218) else NextStep(3, 2) else if B(not 218=no) then NextStep(3, 2, 218) else NextStep(3, 2); if B(not 218=no) then Sent(218, 2, open, 12); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 218=no)
							then	{	NextStep(3, 2, 218)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not 218=no)
					then	{	NextStep(3, 2, 218)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not 218=no)
	then	{	Sent(218, 2, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 218=no)
					then	{	NextStep(3, 2, 218)
						}
					else	{	NextStep(3, 2)
						}
				}
		}
	else	{	if	B(not 218=no)
			then	{	NextStep(3, 2, 218)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not 218=no)
	then	{	Sent(218, 2, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(blue, V2))) then if B(700>V2) then if B(not 218=no) then NextStep(3, 2, 218) else NextStep(3, 2) else if B(not 218=no) then NextStep(3, 2, 218) else NextStep(3, 2); if B(not 218=no) then Sent(218, 2, open, 12); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 218=no)
					then	{	NextStep(3, 2, 218)
						}
					else	{	NextStep(3, 2)
						}
				}
		}
	else	{	if	B(not 218=no)
			then	{	NextStep(3, 2, 218)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not 218=no)
	then	{	Sent(218, 2, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(700>1000)
	then	{	if	B(not 218=no)
			then	{	NextStep(3, 2, 218)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not 218=no)
	then	{	Sent(218, 2, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(700>1000) then if B(not 218=no) then NextStep(3, 2, 218) else NextStep(3, 2); if B(not 218=no) then Sent(218, 2, open, 12); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(700>1000)
	then	{	if	B(not 218=no)
			then	{	NextStep(3, 2, 218)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not 218=no)
	then	{	Sent(218, 2, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not 218=no)
	then	{	Sent(218, 2, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not 218=no) then Sent(218, 2, open, 12); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not 218=no)
	then	{	Sent(218, 2, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	Sent(218, 2, open, 12);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[Sent(218, 2, open, 12); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	Sent(218, 2, open, 12);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a40[CTAH] path: 0
a40[CTAH] path: Path: [4][2] [4][3] [3][3] [3][4]

a40[CTAH] moveStepToGoalTest nopoints: []
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] found a chip....: (R:4,C:3)
a40[CTAH] moveStepToGoalTest sent proposal for: [4,3,2,2902]
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscourseMessage
[MSG] Message is of type: basicproposal
[MSG] Message is for: 2
[MSG] i'm: 2
Received a proposal creating event
org notification: Proposal [id=2902, agent=a40, agent2=a30, clock=14, time=2015-05-27 15:30:09.454]
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 3
[MSG] i'm: 3
AGENT : got response to offer
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


Event processed UpdateClock(14)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 2902=no)
							then	{	NextStep(4, 3, 2902)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not 2902=no)
					then	{	NextStep(4, 3, 2902)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not 2902=no)
	then	{	Sent(2902, 2, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(14)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 4, 3)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 2902=no) then NextStep(4, 3, 2902) else NextStep(4, 3) else if B(not 2902=no) then NextStep(4, 3, 2902) else NextStep(4, 3); if B(not 2902=no) then Sent(2902, 2, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(14)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 2902=no)
							then	{	NextStep(4, 3, 2902)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not 2902=no)
					then	{	NextStep(4, 3, 2902)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not 2902=no)
	then	{	Sent(2902, 2, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(14)
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 2902=no)
							then	{	NextStep(4, 3, 2902)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not 2902=no)
					then	{	NextStep(4, 3, 2902)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not 2902=no)
	then	{	Sent(2902, 2, open, 13)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 4, 3)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not 2902=no) then NextStep(4, 3, 2902) else NextStep(4, 3) else if B(not 2902=no) then NextStep(4, 3, 2902) else NextStep(4, 3); if B(not 2902=no) then Sent(2902, 2, open, 13); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not 2902=no)
							then	{	NextStep(4, 3, 2902)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not 2902=no)
					then	{	NextStep(4, 3, 2902)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not 2902=no)
	then	{	Sent(2902, 2, open, 13)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 2902=no)
					then	{	NextStep(4, 3, 2902)
						}
					else	{	NextStep(4, 3)
						}
				}
		}
	else	{	if	B(not 2902=no)
			then	{	NextStep(4, 3, 2902)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not 2902=no)
	then	{	Sent(2902, 2, open, 13)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(blue, V2))) then if B(700>V2) then if B(not 2902=no) then NextStep(4, 3, 2902) else NextStep(4, 3) else if B(not 2902=no) then NextStep(4, 3, 2902) else NextStep(4, 3); if B(not 2902=no) then Sent(2902, 2, open, 13); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not 2902=no)
					then	{	NextStep(4, 3, 2902)
						}
					else	{	NextStep(4, 3)
						}
				}
		}
	else	{	if	B(not 2902=no)
			then	{	NextStep(4, 3, 2902)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not 2902=no)
	then	{	Sent(2902, 2, open, 13)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(700>1000)
	then	{	if	B(not 2902=no)
			then	{	NextStep(4, 3, 2902)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not 2902=no)
	then	{	Sent(2902, 2, open, 13)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(700>1000) then if B(not 2902=no) then NextStep(4, 3, 2902) else NextStep(4, 3); if B(not 2902=no) then Sent(2902, 2, open, 13); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(700>1000)
	then	{	if	B(not 2902=no)
			then	{	NextStep(4, 3, 2902)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not 2902=no)
	then	{	Sent(2902, 2, open, 13)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not 2902=no)
	then	{	Sent(2902, 2, open, 13)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not 2902=no) then Sent(2902, 2, open, 13); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not 2902=no)
	then	{	Sent(2902, 2, open, 13)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	Sent(2902, 2, open, 13);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[Sent(2902, 2, open, 13); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	Sent(2902, 2, open, 13);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a30[CTAH] path: 0
a30[CTAH] path: Path: [6][4] [5][4] [4][4] [4][3]

a30[CTAH] moveStepToGoalTest returns I have chip: [5,4,no,no]
Event processed UpdateClock(13)
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


Event processed UpdateClock(14)
Event processed @ctenv(functionToList(proposal(proposal, 0, 218, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed @ctenv(functionToList(proposal(proposal, 3, 2902, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(13)
},
{	UpdateClock(14)
},
{	@ctenv(functionToList(proposal(proposal, 0, 218, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
},
{	@ctenv(functionToList(proposal(proposal, 3, 2902, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 5, 4)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(13), UpdateClock(14), @ctenv(functionToList(proposal(proposal, 0, 218, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), @ctenv(functionToList(proposal(proposal, 3, 2902, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(13)
},
{	UpdateClock(14)
},
{	@ctenv(functionToList(proposal(proposal, 0, 218, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
},
{	@ctenv(functionToList(proposal(proposal, 3, 2902, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@a4e5416
[CTAH] The created APLList : [proposal,0,218,open]
[CTAH] Array of Terms: [Lapapl.data.Term;@1c7275a3
[CTAH] The created APLList : [proposal,3,2902,open]
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([proposal,0,218,open])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([proposal,0,218,open])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([proposal,0,218,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	if	B([actionresult([proposal,3,2902,open])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([proposal,3,2902,open])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([proposal,3,2902,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B(tile(Color1, 5, 4)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 12); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B([actionresult([proposal,0,218,open])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([proposal,0,218,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,0,218,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), if B([actionresult([proposal,3,2902,open])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([proposal,3,2902,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,3,2902,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([proposal,0,218,open])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([proposal,0,218,open])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([proposal,0,218,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	if	B([actionresult([proposal,3,2902,open])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([proposal,3,2902,open])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([proposal,3,2902,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([proposal,0,218,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,0,218,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	if	B([actionresult([proposal,3,2902,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,3,2902,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(blue, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 12); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B([actionresult([proposal,0,218,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,0,218,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), if B([actionresult([proposal,3,2902,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,3,2902,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([proposal,0,218,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,0,218,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	if	B([actionresult([proposal,3,2902,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,3,2902,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([proposal,0,218,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
},
{	if	B([actionresult([proposal,3,2902,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[new scheduled]:[if B(700>1000) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 12); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B([actionresult([proposal,0,218,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), if B([actionresult([proposal,3,2902,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([proposal,0,218,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
},
{	if	B([actionresult([proposal,3,2902,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(0, 218, open)
		}
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(3, 2902, open)
		}
}


[new scheduled]:[if B(not no=no) then Sent(no, no, open, 12); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(proposal=proposal) then ReceivedProposal(0, 218, open), if B(proposal=proposal) then ReceivedProposal(3, 2902, open)]
[After]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 12)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(0, 218, open)
		}
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(3, 2902, open)
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedProposal(0, 218, open)
},
{	ReceivedProposal(3, 2902, open)
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), ReceivedProposal(0, 218, open), ReceivedProposal(3, 2902, open)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedProposal(0, 218, open)
},
{	ReceivedProposal(3, 2902, open)
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[getScoreAfterExchange(2, 218); if G(at(A, B, C)) then skip else makeResponse(218, accept), findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	getScoreAfterExchange(2, 218);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(218, accept)
		}
},
{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	GetScoreAfterExchange(218, yes);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(218, accept)
		}
},
{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[GetScoreAfterExchange(218, yes); if G(at(A, B, C)) then skip else makeResponse(218, accept), if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	GetScoreAfterExchange(218, yes);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(218, accept)
		}
},
{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(218, accept)
		}
},
{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(A, B, C)) then skip else makeResponse(218, accept), @ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(218, accept)
		}
},
{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a30[CTAH] going goal: 4,3 color: neco
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


object notification: Time [clock=15, time=2015-05-27 15:30:17.759]
object notification: Time [clock=15, time=2015-05-27 15:30:17.759]
org notification: Time [clock=15, time=2015-05-27 15:30:17.759]
Event processed UpdateClock(15)
object notification: Time [clock=15, time=2015-05-27 15:30:17.759]
Event processed UpdateClock(15)
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(15)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(15)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(15)
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(15)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(15)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(15)
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a30[CTAH] paths: 1000
Need to wait 3 more seconds
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


org notification: Time [clock=16, time=2015-05-27 15:30:27.763]
object notification: Time [clock=16, time=2015-05-27 15:30:27.763]
object notification: Time [clock=16, time=2015-05-27 15:30:27.763]
object notification: Time [clock=16, time=2015-05-27 15:30:27.763]
Event processed UpdateClock(16)
Event processed UpdateClock(16)
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(16)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(16)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(16)
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(16)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(16)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(16)
}


a30[CTAH] path: 0
a30[CTAH] path: Path: [6][4] [5][4] [4][4] [4][3]

a30[CTAH] moveStepToGoalTest returns I have chip: [5,4,no,no]
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


Event processed UpdateClock(15)
Event processed UpdateClock(16)
[Planbase]:{	skip
},
{	B(clock(Clock));
	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(15)
},
{	UpdateClock(16)
}


[new scheduled]:[skip, B(clock(Clock)); if B(tile(Color1, 5, 4)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(15), UpdateClock(16)]
[After]:{	skip
},
{	B(clock(Clock));
	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(15)
},
{	UpdateClock(16)
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 14)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[getScoreAfterExchange(2, 2902); if G(at(A, B, C)) then skip else makeResponse(2902, accept), if B(tile(Color1, 5, 4)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 14); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	getScoreAfterExchange(2, 2902);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(2902, accept)
		}
},
{	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 14)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	GetScoreAfterExchange(2902, yes);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(2902, accept)
		}
},
{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 14)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[GetScoreAfterExchange(2902, yes); if G(at(A, B, C)) then skip else makeResponse(2902, accept), if B(prohibition(useColor(blue, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 14); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	GetScoreAfterExchange(2902, yes);
	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(2902, accept)
		}
},
{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 14)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(2902, accept)
		}
},
{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 14)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(A, B, C)) then skip else makeResponse(2902, accept), if B(700>1000) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 14); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(A, B, C))
	then	{	skip
		}
	else	{	makeResponse(2902, accept)
		}
},
{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 14)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	skip
},
{	if	B(not no=no)
	then	{	Sent(no, no, open, 14)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[skip, if B(not no=no) then Sent(no, no, open, 14); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	skip
},
{	if	B(not no=no)
	then	{	Sent(no, no, open, 14)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(scoreAfterExchange(218, Score))
	then	{	respond(218, 700)
		}
}


[new scheduled]:[if B(scoreAfterExchange(218, Score)) then respond(218, 700)]
[After]:{	if	B(scoreAfterExchange(218, Score))
	then	{	respond(218, 700)
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	respond(218, 700)
}


[new scheduled]:[respond(218, 700)]
[After]:{	respond(218, 700)
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	B(ANSWER=accept);
	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(ANSWER=reject)
						}
				}
		};
	makeResponse(218, ANSWER)
}


[new scheduled]:[B(ANSWER=accept); if B(yes=no) then if B(prohibition(rejectRequests(V2))) then if B(V2>700) then B(ANSWER=reject); makeResponse(218, ANSWER)]
[After]:{	B(ANSWER=accept);
	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(ANSWER=reject)
						}
				}
		};
	makeResponse(218, ANSWER)
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(accept=reject)
						}
				}
		};
	makeResponse(218, accept)
}


[new scheduled]:[if B(yes=no) then if B(prohibition(rejectRequests(V2))) then if B(V2>700) then B(accept=reject); makeResponse(218, accept)]
[After]:{	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(accept=reject)
						}
				}
		};
	makeResponse(218, accept)
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	makeResponse(218, accept)
}


[new scheduled]:[makeResponse(218, accept)]
[After]:{	makeResponse(218, accept)
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	sendResponse(accept, 218)
}


[new scheduled]:[sendResponse(accept, 218)]
[After]:{	sendResponse(accept, 218)
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(sendResponse(218, accept),L1,0);
	Sent(accept, 218)
}


[new scheduled]:[@ctenv(sendResponse(218, accept),L1,0); Sent(accept, 218)]
[After]:{	@ctenv(sendResponse(218, accept),L1,0);
	Sent(accept, 218)
}


Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 0
[MSG] i'm: 0
AGENT : got response to offer
org notification: Response [id=218, response=accepted, clock=16, time=2015-05-27 15:30:30.266]
Event processed @ctenv(functionToList(message(response, 218, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(functionToList(message(response, 218, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), @ctenv(functionToList(message(response, 218, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(functionToList(message(response, 218, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@27816e47
[CTAH] The created APLList : [response,218,accept]
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([response,218,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,218,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,218,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B([actionresult([response,218,accept])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([response,218,accept])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([response,218,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([response,218,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,218,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,218,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 218)
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(response=response) then ReceivedMessage(accept, 218)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 218)
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a30[CTAH] going goal: 4,3 color: neco
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedMessage(accept, 218)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), ReceivedMessage(accept, 218)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedMessage(accept, 218)
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a10[CTAH] going goal: 3,2 color: neco
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


object notification: Time [clock=17, time=2015-05-27 15:30:37.766]
object notification: Time [clock=17, time=2015-05-27 15:30:37.766]
org notification: Time [clock=17, time=2015-05-27 15:30:37.766]
object notification: Time [clock=17, time=2015-05-27 15:30:37.766]
a30[CTAH] paths: 1000
Need to wait 3 more seconds
a10[CTAH] paths: 1000
a10[CTAH] path: 0
a10[CTAH] path: Path: [2][2] [3][2]

a10[CTAH] moveStepToGoalTest returns I have chip: [3,2,no,no]
a30[CTAH] path: 0
a30[CTAH] path: Path: [6][4] [5][4] [4][4] [4][3]

a30[CTAH] moveStepToGoalTest returns I have chip: [5,4,no,no]
Event processed UpdateClock(17)
Event processed UpdateClock(17)
Event processed UpdateClock(17)
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(17)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(17)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(17)
}


[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(3, 2, no)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(17)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 3, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2) else if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2); if B(not no=no) then Sent(no, no, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(17)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(3, 2, no)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(17)
}


[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(17)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 5, 4)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(17)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(17)
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(3, 2, no)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 16)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 3, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2) else if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2); if B(not no=no) then Sent(no, no, open, 16); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(3, 2, no)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 16)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 16)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 5, 4)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 16); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 16)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(3, 2, no)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 16)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(blue, V2))) then if B(700>V2) then if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2) else if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2); if B(not no=no) then Sent(no, no, open, 16); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(3, 2, no)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 16)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 16)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(blue, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 16); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 16)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(3, 2, no)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 16)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(700>1000) then if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2); if B(not no=no) then Sent(no, no, open, 16); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(3, 2, no)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 16)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 16)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(700>1000) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 16); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 16)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 16)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not no=no) then Sent(no, no, open, 16); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 16)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 16)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not no=no) then Sent(no, no, open, 16); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 16)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(scoreAfterExchange(2902, Score))
	then	{	respond(2902, 700)
		}
}


[new scheduled]:[if B(scoreAfterExchange(2902, Score)) then respond(2902, 700)]
[After]:{	if	B(scoreAfterExchange(2902, Score))
	then	{	respond(2902, 700)
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	respond(2902, 700)
}


[new scheduled]:[respond(2902, 700)]
[After]:{	respond(2902, 700)
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	B(ANSWER=accept);
	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(ANSWER=reject)
						}
				}
		};
	makeResponse(2902, ANSWER)
}


[new scheduled]:[B(ANSWER=accept); if B(yes=no) then if B(prohibition(rejectRequests(V2))) then if B(V2>700) then B(ANSWER=reject); makeResponse(2902, ANSWER)]
[After]:{	B(ANSWER=accept);
	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(ANSWER=reject)
						}
				}
		};
	makeResponse(2902, ANSWER)
}


a10[CTAH] going goal: 3,2 color: neco
object notification: Time [clock=18, time=2015-05-27 15:30:47.769]
org notification: Time [clock=18, time=2015-05-27 15:30:47.769]
object notification: Time [clock=18, time=2015-05-27 15:30:47.769]
object notification: Time [clock=18, time=2015-05-27 15:30:47.769]
Event processed UpdateClock(18)
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(accept=reject)
						}
				}
		};
	makeResponse(2902, accept)
},
{	UpdateClock(18)
}


[new scheduled]:[if B(yes=no) then if B(prohibition(rejectRequests(V2))) then if B(V2>700) then B(accept=reject); makeResponse(2902, accept), UpdateClock(18)]
[After]:{	if	B(yes=no)
	then	{	if	B(prohibition(rejectRequests(V2)))
			then	{	if	B(V2>700)
					then	{	B(accept=reject)
						}
				}
		};
	makeResponse(2902, accept)
},
{	UpdateClock(18)
}


Event processed UpdateClock(18)
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(18)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(18)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(18)
}


[Planbase]:{	makeResponse(2902, accept)
}


[new scheduled]:[makeResponse(2902, accept)]
[After]:{	makeResponse(2902, accept)
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	sendResponse(accept, 2902)
}


[new scheduled]:[sendResponse(accept, 2902)]
[After]:{	sendResponse(accept, 2902)
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(sendResponse(2902, accept),L1,0);
	Sent(accept, 2902)
}


[new scheduled]:[@ctenv(sendResponse(2902, accept),L1,0); Sent(accept, 2902)]
[After]:{	@ctenv(sendResponse(2902, accept),L1,0);
	Sent(accept, 2902)
}


Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 3
[MSG] i'm: 3
AGENT : got response to offer
org notification: Response [id=2902, response=accepted, clock=18, time=2015-05-27 15:30:48.199]
Event processed @ctenv(functionToList(message(response, 2902, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(functionToList(message(response, 2902, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), @ctenv(functionToList(message(response, 2902, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID])]) then if B(TYPE=proposal) then {ReceivedMessage(TYPE, ID, open); adopta(received(TYPE, ID, closed) : Infinite, priority 10)} else if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	@ctenv(functionToList(message(response, 2902, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedMessage(TYPE, ID, open);
					adopta(received(TYPE, ID, closed) : Infinite, priority 10)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
			then	{	if	B(TYPE=response)
					then	{	ReceivedMessage(RESPONSE, ID)
						}
				}
			else	{	if	B(LIST=[actionresult([TYPE])])
					then	{	ReceivedEvent(TYPE)
						}
					else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
							then	{	if	B(TYPE=proposal)
									then	{	ReceivedProposal(AGENT, ID, RESPONSE)
										}
								}
						}
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@40281b2a
[CTAH] The created APLList : [response,2902,accept]
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([response,2902,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,2902,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,2902,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B([actionresult([response,2902,accept])]=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedMessage(RESPONSE, ID) else if B([actionresult([response,2902,accept])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([response,2902,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B([actionresult([response,2902,accept])]=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedMessage(RESPONSE, ID)
				}
		}
	else	{	if	B([actionresult([response,2902,accept])]=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B([actionresult([response,2902,accept])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 2902)
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), if B(response=response) then ReceivedMessage(accept, 2902)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedMessage(accept, 2902)
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a30[CTAH] going goal: 4,3 color: neco
[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedMessage(accept, 2902)
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), ReceivedMessage(accept, 2902)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	ReceivedMessage(accept, 2902)
}


[Planbase]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a40[CTAH] going goal: 3,4 color: neco
a40[CTAH] paths: 1000
Need to wait 4 more seconds
org notification: Time [clock=19, time=2015-05-27 15:30:57.771]
object notification: Time [clock=19, time=2015-05-27 15:30:57.771]
object notification: Time [clock=19, time=2015-05-27 15:30:57.771]
object notification: Time [clock=19, time=2015-05-27 15:30:57.771]
a40[CTAH] path: 0
a40[CTAH] path: Path: [4][2] [4][3] [3][3] [3][4]

a40[CTAH] moveStepToGoalTest returns I have chip: [4,3,no,no]
Event processed UpdateClock(19)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 3, no)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(19)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 4, 3)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3) else if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3); if B(not no=no) then Sent(no, no, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(19)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 3, no)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(19)
}


[Planbase]:{	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 3, no)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 18)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 4, 3)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3) else if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3); if B(not no=no) then Sent(no, no, open, 18); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 3, no)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 18)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(4, 3, no)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 18)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(blue, V2))) then if B(700>V2) then if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3) else if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3); if B(not no=no) then Sent(no, no, open, 18); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(4, 3, no)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 18)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(4, 3, no)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 18)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(700>1000) then if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3); if B(not no=no) then Sent(no, no, open, 18); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(4, 3, no)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 18)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 18)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not no=no) then Sent(no, no, open, 18); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 18)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a40[CTAH] going goal: 3,4 color: neco
a10[CTAH] paths: 1000
a10[CTAH] path: 0
a10[CTAH] path: Path: [2][2] [3][2]

a10[CTAH] moveStepToGoalTest returns I have chip: [3,2,no,no]
Event processed UpdateClock(18)
Event processed UpdateClock(19)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(3, 2, no)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(18)
},
{	UpdateClock(19)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 3, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2) else if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2); if B(not no=no) then Sent(no, no, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(18), UpdateClock(19)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(3, 2, no)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(18)
},
{	UpdateClock(19)
}


[Planbase]:{	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(3, 2, no)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 17)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 3, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2) else if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2); if B(not no=no) then Sent(no, no, open, 17); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(3, 2, no)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 17)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(3, 2, no)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 17)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(blue, V2))) then if B(700>V2) then if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2) else if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2); if B(not no=no) then Sent(no, no, open, 17); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(3, 2, no)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 17)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(3, 2, no)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 17)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(700>1000) then if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2); if B(not no=no) then Sent(no, no, open, 17); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(3, 2, no)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 17)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 17)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not no=no) then Sent(no, no, open, 17); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 17)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a10[CTAH] going goal: 3,2 color: neco
a30[CTAH] paths: 1000
Need to wait 4 more seconds
a40[CTAH] paths: 1000
Need to wait 4 more seconds
a30[CTAH] path: 0
a30[CTAH] path: Path: [6][4] [5][4] [4][4] [4][3]

a30[CTAH] moveStepToGoalTest returns I have chip: [5,4,no,no]
Event processed UpdateClock(19)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(19)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 5, 4)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(19)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(19)
}


[Planbase]:{	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 18)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 5, 4)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 18); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 18)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 18)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(blue, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 18); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 18)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 18)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(700>1000) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 18); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 18)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 18)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not no=no) then Sent(no, no, open, 18); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 18)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a30[CTAH] going goal: 4,3 color: neco
object notification: Time [clock=20, time=2015-05-27 15:31:07.79]
object notification: Time [clock=20, time=2015-05-27 15:31:07.79]
org notification: Time [clock=20, time=2015-05-27 15:31:07.79]
object notification: Time [clock=20, time=2015-05-27 15:31:07.79]
a40[CTAH] path: 0
a40[CTAH] path: Path: [4][2] [4][3] [3][3] [3][4]

a40[CTAH] moveStepToGoalTest returns I have chip: [4,3,no,no]
Event processed UpdateClock(20)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 3, no)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(20)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 4, 3)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3) else if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3); if B(not no=no) then Sent(no, no, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(20)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 3, no)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(20)
}


[Planbase]:{	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 3, no)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 4, 3)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3) else if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3); if B(not no=no) then Sent(no, no, open, 19); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 3, no)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(4, 3, no)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(blue, V2))) then if B(700>V2) then if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3) else if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3); if B(not no=no) then Sent(no, no, open, 19); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(4, 3, no)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(4, 3, no)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(700>1000) then if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3); if B(not no=no) then Sent(no, no, open, 19); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(4, 3, no)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not no=no) then Sent(no, no, open, 19); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a40[CTAH] going goal: 3,4 color: neco
a10[CTAH] paths: 1000
a10[CTAH] path: 0
a10[CTAH] path: Path: [2][2] [3][2]

a10[CTAH] moveStepToGoalTest returns I have chip: [3,2,no,no]
Event processed UpdateClock(20)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(3, 2, no)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(20)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 3, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2) else if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2); if B(not no=no) then Sent(no, no, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(20)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(3, 2, no)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(20)
}


[Planbase]:{	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(3, 2, no)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 3, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2) else if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2); if B(not no=no) then Sent(no, no, open, 19); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(3, 2, no)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(3, 2, no)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(blue, V2))) then if B(700>V2) then if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2) else if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2); if B(not no=no) then Sent(no, no, open, 19); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(3, 2, no)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a40[CTAH] paths: 1000
Need to wait 3 more seconds
[Planbase]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(3, 2, no)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(700>1000) then if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2); if B(not no=no) then Sent(no, no, open, 19); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(3, 2, no)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not no=no) then Sent(no, no, open, 19); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a10[CTAH] going goal: 3,2 color: neco
object notification: Time [clock=21, time=2015-05-27 15:31:17.796]
object notification: Time [clock=21, time=2015-05-27 15:31:17.796]
object notification: Time [clock=21, time=2015-05-27 15:31:17.796]
org notification: Time [clock=21, time=2015-05-27 15:31:17.796]
a40[CTAH] path: 0
a40[CTAH] path: Path: [4][2] [4][3] [3][3] [3][4]

a40[CTAH] moveStepToGoalTest returns I have chip: [4,3,no,no]
Event processed UpdateClock(21)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 3, no)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(21)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 4, 3)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3) else if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3); if B(not no=no) then Sent(no, no, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(21)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 3, no)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(21)
}


[Planbase]:{	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 3, no)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 20)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 4, 3)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3) else if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3); if B(not no=no) then Sent(no, no, open, 20); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 3, no)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 20)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(4, 3, no)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 20)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(blue, V2))) then if B(700>V2) then if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3) else if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3); if B(not no=no) then Sent(no, no, open, 20); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(4, 3, no)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 20)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(4, 3, no)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 20)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(700>1000) then if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3); if B(not no=no) then Sent(no, no, open, 20); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(4, 3, no)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 20)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 20)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not no=no) then Sent(no, no, open, 20); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 20)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a40[CTAH] going goal: 3,4 color: neco
a30[CTAH] paths: 1000
Need to wait 4 more seconds
a40[CTAH] paths: 1000
Need to wait 3 more seconds
a30[CTAH] path: 0
a30[CTAH] path: Path: [6][4] [5][4] [4][4] [4][3]

a30[CTAH] moveStepToGoalTest returns I have chip: [5,4,no,no]
Event processed UpdateClock(20)
Event processed UpdateClock(21)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(20)
},
{	UpdateClock(21)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 5, 4)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(20), UpdateClock(21)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(20)
},
{	UpdateClock(21)
}


[Planbase]:{	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 5, 4)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 19); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(tile(Color1, 5, 4))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(5, 4, no)
								}
							else	{	NextStep(5, 4)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(blue, V2))) then if B(700>V2) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4) else if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 19); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(5, 4, no)
						}
					else	{	NextStep(5, 4)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(700>1000) then if B(not no=no) then NextStep(5, 4, no) else NextStep(5, 4); if B(not no=no) then Sent(no, no, open, 19); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(5, 4, no)
				}
			else	{	NextStep(5, 4)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not no=no) then Sent(no, no, open, 19); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 19)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 4, 3, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a30[CTAH] going goal: 4,3 color: neco
object notification: Time [clock=22, time=2015-05-27 15:31:27.801]
object notification: Time [clock=22, time=2015-05-27 15:31:27.801]
object notification: Time [clock=22, time=2015-05-27 15:31:27.801]
org notification: Time [clock=22, time=2015-05-27 15:31:27.801]
a40[CTAH] path: 0
a40[CTAH] path: Path: [4][2] [4][3] [3][3] [3][4]

a40[CTAH] moveStepToGoalTest returns I have chip: [4,3,no,no]
Event processed UpdateClock(22)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 3, no)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(22)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 4, 3)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3) else if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3); if B(not no=no) then Sent(no, no, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(22)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 3, no)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(22)
}


[Planbase]:{	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 3, no)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 21)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 4, 3)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3) else if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3); if B(not no=no) then Sent(no, no, open, 21); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(tile(Color1, 4, 3))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(4, 3, no)
								}
							else	{	NextStep(4, 3)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 21)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(4, 3, no)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 21)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(blue, V2))) then if B(700>V2) then if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3) else if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3); if B(not no=no) then Sent(no, no, open, 21); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(4, 3, no)
						}
					else	{	NextStep(4, 3)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(4, 3, no)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 21)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(4, 3, no)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 21)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(700>1000) then if B(not no=no) then NextStep(4, 3, no) else NextStep(4, 3); if B(not no=no) then Sent(no, no, open, 21); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(4, 3, no)
				}
			else	{	NextStep(4, 3)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 21)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 21)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not no=no) then Sent(no, no, open, 21); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 21)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 3, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a40[CTAH] going goal: 3,4 color: neco
a10[CTAH] paths: 1000
a10[CTAH] path: 0
a10[CTAH] path: Path: [2][2] [3][2]

a10[CTAH] moveStepToGoalTest returns I have chip: [3,2,no,no]
Event processed UpdateClock(21)
Event processed UpdateClock(22)
[Planbase]:{	B(clock(Clock));
	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(3, 2, no)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(21)
},
{	UpdateClock(22)
}


[new scheduled]:[B(clock(Clock)); if B(tile(Color1, 3, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2) else if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2); if B(not no=no) then Sent(no, no, open, Clock); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700), UpdateClock(21), UpdateClock(22)]
[After]:{	B(clock(Clock));
	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(3, 2, no)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, Clock)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
},
{	UpdateClock(21)
},
{	UpdateClock(22)
}


[Planbase]:{	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(3, 2, no)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 20)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(tile(Color1, 3, 2)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2) else if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2); if B(not no=no) then Sent(no, no, open, 20); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(tile(Color1, 3, 2))
	then	{	if	B(prohibition(useColor(Color1, V2)))
			then	{	if	B(700>V2)
					then	{	if	B(not no=no)
							then	{	NextStep(3, 2, no)
								}
							else	{	NextStep(3, 2)
								}
						}
				}
			else	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 20)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(3, 2, no)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 20)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(blue, V2))) then if B(700>V2) then if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2) else if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2); if B(not no=no) then Sent(no, no, open, 20); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(prohibition(useColor(blue, V2)))
	then	{	if	B(700>V2)
			then	{	if	B(not no=no)
					then	{	NextStep(3, 2, no)
						}
					else	{	NextStep(3, 2)
						}
				}
		}
	else	{	if	B(not no=no)
			then	{	NextStep(3, 2, no)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 20)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(3, 2, no)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 20)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(700>1000) then if B(not no=no) then NextStep(3, 2, no) else NextStep(3, 2); if B(not no=no) then Sent(no, no, open, 20); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(700>1000)
	then	{	if	B(not no=no)
			then	{	NextStep(3, 2, no)
				}
			else	{	NextStep(3, 2)
				}
		};
	if	B(not no=no)
	then	{	Sent(no, no, open, 20)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 20)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(not no=no) then Sent(no, no, open, 20); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(not no=no)
	then	{	Sent(no, no, open, 20)
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:


[new scheduled]:[findNextStep(neco, 700); if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	findNextStep(neco, 700);
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0) else if B(tile(neco, X, Y)) then @ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	if	G(at(X, Y, V))
	then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	@ctenv(moveStepToGoalTest(neco, X, Y, 8),L1,0)
				}
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(tile(Color1, Xa, Ya)) then if B(prohibition(useColor(Color1, V2))) then if B(700>V2) then if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya) else if B(not ID=no) then NextStep(Xa, Ya, ID) else NextStep(Xa, Ya); if B(not ID=no) then Sent(ID, Agent, open, Clock)}; if B(receivedP(A, MSGID, open)) then if B(scoreAfterExchange(MSGID, Score)) then respond(MSGID, 700)]
[After]:{	@ctenv(moveStepToGoalTest(neco, 3, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(tile(Color1, Xa, Ya))
			then	{	if	B(prohibition(useColor(Color1, V2)))
					then	{	if	B(700>V2)
							then	{	if	B(not ID=no)
									then	{	NextStep(Xa, Ya, ID)
										}
									else	{	NextStep(Xa, Ya)
										}
								}
						}
					else	{	if	B(not ID=no)
							then	{	NextStep(Xa, Ya, ID)
								}
							else	{	NextStep(Xa, Ya)
								}
						}
				};
			if	B(not ID=no)
			then	{	Sent(ID, Agent, open, Clock)
				}
		};
	if	B(receivedP(A, MSGID, open))
	then	{	if	B(scoreAfterExchange(MSGID, Score))
			then	{	respond(MSGID, 700)
				}
		}
}


a10[CTAH] going goal: 3,2 color: neco
