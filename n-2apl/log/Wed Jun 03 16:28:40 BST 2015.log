2015-06-03 16:28:43,688 CONFIG [com.gigaspaces.logger] - Log file: /Users/dxd/git/ct3/logs/2015-06-03~16.28-gigaspaces-service-192.168.0.40-63533.log
-------------------------last log tuples start--------------------------------
Time [clock=11, time=2015-06-03 16:23:47.878]
Response [id=9425, response=accepted, clock=13, time=2015-06-03 16:24:12.988]
Color [id=null, color=brown, agent=a10, type=no, sanction=100, time=2015-06-03 16:23:02.35, clock=6]
SetGoal [id=null, agent=a20, cell=Cell [x=1, y=1], goal=Cell [x=2, y=1], sanction=100, clock=6, time=2015-06-03 16:23:00.95]
Prohibition [subject=a30, prohibition=[color(white, a30)], sanction=[reduce(a30, 100)], clock=6, time=2015-06-03 16:23:02.632]
Proposal [id=1094, agent=a30, agent2=a20, clock=14, time=2015-06-03 16:24:27.449]
Response [id=8350, response=accepted, clock=11, time=2015-06-03 16:23:56.245]
Prohibition [subject=a20, prohibition=[rejectRequests(a20)], sanction=[reduce(a20, 300)], clock=6, time=2015-06-03 16:22:59.004]
Group [name=g, ra=a10, clock=0, time=2015-06-03 16:22:28.879]
Prohibition [subject=a20, prohibition=[moveTooFast(a20)], sanction=[reduce(a20, 300)], clock=6, time=2015-06-03 16:22:59.013]
Position [subject=a40, id=null, cell=Cell [x=2, y=2], time=2015-06-03 16:24:59.046, clock=18]
Color [id=null, color=white, agent=a40, type=no, sanction=100, time=2015-06-03 16:23:02.771, clock=6]
Prohibition [subject=a40, prohibition=[color(white, a40)], sanction=[reduce(a40, 100)], clock=6, time=2015-06-03 16:23:02.774]
Time [clock=28, time=2015-06-03 16:26:38.644]
Position [subject=a20, id=null, cell=Cell [x=1, y=2], time=2015-06-03 16:24:39.126, clock=16]
Color [id=null, color=white, agent=a20, type=yes, sanction=100, time=2015-06-03 16:23:01.778, clock=6]
Response [id=7294, response=accepted, clock=13, time=2015-06-03 16:24:13.313]
Prohibition [subject=a10, prohibition=[color(brown, a10)], sanction=[reduce(a10, 100)], clock=6, time=2015-06-03 16:23:02.353]
Goal [id=null, cell=Cell [x=2, y=1], agent=null, time=2015-06-03 16:22:28.837, clock=0]
Position [subject=a10, id=null, cell=Cell [x=3, y=1], time=2015-06-03 16:25:05.407, clock=18]
Tile [id=null, cell=Cell [x=6, y=0], subject=brown, time=2015-06-03 16:22:28.805, clock=0]
Time [clock=26, time=2015-06-03 16:26:18.447]
Obligation [subject=a20, obligation=[acceptRequest(717)], sanction=[reduce(a20, 200)], deadline=23, time=2015-06-03 16:25:01.53, clock=18]
Color [id=null, color=yellow, agent=a30, type=yes, sanction=100, time=2015-06-03 16:23:01.956, clock=6]
Prohibition [subject=a30, prohibition=[moveTooFast(a30)], sanction=[reduce(a30, 300)], clock=6, time=2015-06-03 16:22:59.015]
Prohibition [subject=a40, prohibition=[rejectRequests(a40)], sanction=[reduce(a40, 300)], clock=6, time=2015-06-03 16:22:59.009]
Color [id=null, color=yellow, agent=a20, type=no, sanction=100, time=2015-06-03 16:23:02.5, clock=6]
SetGoal [id=null, agent=a30, cell=Cell [x=3, y=1], goal=Cell [x=2, y=1], sanction=100, clock=6, time=2015-06-03 16:23:01.052]
Color [id=null, color=brown, agent=a40, type=yes, sanction=100, time=2015-06-03 16:23:02.202, clock=6]
Time [clock=4, time=2015-06-03 16:22:37.853]
Time [clock=3, time=2015-06-03 16:22:27.851]
Color [id=null, color=white, agent=a30, type=no, sanction=100, time=2015-06-03 16:23:02.63, clock=6]
Tile [id=null, cell=Cell [x=3, y=5], subject=brown, time=2015-06-03 16:22:28.784, clock=0]
Prohibition [subject=a20, prohibition=[color(yellow, a20)], sanction=[reduce(a20, 100)], clock=6, time=2015-06-03 16:23:02.503]
Position [subject=a10, id=null, cell=Cell [x=3, y=2], time=2015-06-03 16:24:31.124, clock=15]
Response [id=7450, response=accepted, clock=15, time=2015-06-03 16:24:34.258]
Time [clock=31, time=2015-06-03 16:27:09.466]
Position [subject=a10, id=null, cell=Cell [x=3, y=3], time=2015-06-03 16:24:12.98, clock=13]
Response [id=1094, response=accepted, clock=15, time=2015-06-03 16:24:36.121]
Prohibition [subject=a40, prohibition=[moveTooFast(a40)], sanction=[reduce(a40, 300)], clock=6, time=2015-06-03 16:22:59.017]
Time [clock=5, time=2015-06-03 16:22:47.856]
Proposal [id=9828, agent=a30, agent2=a20, clock=18, time=2015-06-03 16:25:02.472]
Proposal [id=8884, agent=a20, agent2=a10, clock=11, time=2015-06-03 16:23:56.562]
Position [subject=a30, id=null, cell=Cell [x=1, y=3], time=2015-06-03 16:23:57.037, clock=11]
Position [subject=a30, id=null, cell=Cell [x=2, y=1], time=2015-06-03 16:24:49.194, clock=17]
Proposal [id=8350, agent=a40, agent2=a10, clock=11, time=2015-06-03 16:23:54.202]
Time [clock=27, time=2015-06-03 16:26:28.596]
Proposal [id=717, agent=a10, agent2=a20, clock=18, time=2015-06-03 16:25:01.521]
Response [id=717, response=accepted, clock=18, time=2015-06-03 16:25:04.849]
Response [id=7537, response=accepted, clock=11, time=2015-06-03 16:23:56.076]
Prohibition [subject=a10, prohibition=[rejectRequests(a10)], sanction=[reduce(a10, 300)], clock=6, time=2015-06-03 16:22:58.949]
Position [subject=a20, id=null, cell=Cell [x=1, y=1], time=2015-06-03 16:24:58.635, clock=18]
Time [clock=17, time=2015-06-03 16:24:47.896]
Time [clock=23, time=2015-06-03 16:25:48.099]
Obligation [subject=a10, obligation=[respondToRequest(9425)], sanction=[reduce(a10, 300)], deadline=17, time=2015-06-03 16:23:58.011, clock=12]
Position [subject=a20, id=null, cell=Cell [x=1, y=2], time=2015-06-03 16:23:49.519, clock=11]
Position [subject=a20, id=null, cell=Cell [x=2, y=2], time=2015-06-03 16:24:18.104, clock=14]
Position [subject=a30, id=null, cell=Cell [x=1, y=2], time=2015-06-03 16:24:13.574, clock=13]
Position [subject=a10, id=null, cell=Cell [x=3, y=4], time=2015-06-03 16:23:56.882, clock=11]
Position [subject=a30, id=null, cell=Cell [x=2, y=2], time=2015-06-03 16:24:36.482, clock=15]
Obligation [subject=a20, obligation=[acceptRequest(7294)], sanction=[reduce(a20, 200)], deadline=17, time=2015-06-03 16:24:03.272, clock=12]
Prohibition [subject=a10, prohibition=[moveTooFast(a10)], sanction=[reduce(a10, 300)], clock=6, time=2015-06-03 16:22:59.011]
SetGoal [id=null, agent=a10, cell=Cell [x=2, y=0], goal=Cell [x=2, y=1], sanction=100, clock=6, time=2015-06-03 16:23:00.835]
Time [clock=24, time=2015-06-03 16:25:58.395]
SetGoal [id=null, agent=a40, cell=Cell [x=2, y=2], goal=Cell [x=2, y=1], sanction=100, clock=6, time=2015-06-03 16:23:01.174]
Time [clock=22, time=2015-06-03 16:25:37.91]
Prohibition [subject=a30, prohibition=[rejectRequests(a30)], sanction=[reduce(a30, 300)], clock=6, time=2015-06-03 16:22:59.007]
Obligation [subject=a20, obligation=[at(1, 1, a20)], sanction=[reduce(a20, 700)], deadline=26, time=2015-06-03 16:23:00.953, clock=6]
Time [clock=15, time=2015-06-03 16:24:27.891]
Obligation [subject=a10, obligation=[acceptRequest(8884)], sanction=[reduce(a10, 200)], deadline=16, time=2015-06-03 16:23:56.565, clock=11]
Obligation [subject=a40, obligation=[makeMove(0, 2, a40)], sanction=[reduce(a40, 300)], deadline=26, time=2015-06-03 16:23:56.984, clock=11]
Proposal [id=7537, agent=a10, agent2=a40, clock=11, time=2015-06-03 16:23:52.079]
Color [id=null, color=white, agent=a10, type=yes, sanction=100, time=2015-06-03 16:23:01.475, clock=6]
Response [id=9828, response=accepted, clock=19, time=2015-06-03 16:25:10.111]
Time [clock=30, time=2015-06-03 16:26:59.159]
Obligation [subject=a10, obligation=[acceptRequest(8350)], sanction=[reduce(a10, 200)], deadline=16, time=2015-06-03 16:23:54.205, clock=11]
Position [subject=a40, id=null, cell=Cell [x=1, y=2], time=2015-06-03 16:24:34.955, clock=15]
Obligation [subject=a10, obligation=[at(2, 0, a10)], sanction=[reduce(a10, 700)], deadline=26, time=2015-06-03 16:23:00.842, clock=6]
Proposal [id=9425, agent=a20, agent2=a10, clock=12, time=2015-06-03 16:23:57.993]
Obligation [subject=a20, obligation=[respondToRequest(7294)], sanction=[reduce(a20, 300)], deadline=17, time=2015-06-03 16:24:03.274, clock=12]
Obligation [subject=a20, obligation=[respondToRequest(717)], sanction=[reduce(a20, 300)], deadline=23, time=2015-06-03 16:25:01.535, clock=18]
Time [clock=16, time=2015-06-03 16:24:37.893]
Time [clock=21, time=2015-06-03 16:25:27.906]
Position [subject=a40, id=null, cell=Cell [x=0, y=2], time=2015-06-03 16:23:56.977, clock=11]
Time [clock=2, time=2015-06-03 16:22:17.849]
Time [clock=7, time=2015-06-03 16:23:07.863]
Obligation [subject=a20, obligation=[acceptRequest(9828)], sanction=[reduce(a20, 200)], deadline=23, time=2015-06-03 16:25:02.476, clock=18]
Time [clock=10, time=2015-06-03 16:23:37.874]
Time [clock=32, time=2015-06-03 16:27:19.885]
Obligation [subject=a30, obligation=[makeMove(1, 3, a30)], sanction=[reduce(a30, 300)], deadline=26, time=2015-06-03 16:23:57.052, clock=11]
Tile [id=null, cell=Cell [x=5, y=4], subject=yellow, time=2015-06-03 16:22:28.802, clock=0]
Time [clock=14, time=2015-06-03 16:24:17.889]
Proposal [id=7294, agent=a30, agent2=a20, clock=12, time=2015-06-03 16:24:03.267]
Obligation [subject=a10, obligation=[respondToRequest(8350)], sanction=[reduce(a10, 300)], deadline=16, time=2015-06-03 16:23:54.207, clock=11]
Time [clock=13, time=2015-06-03 16:24:07.888]
Obligation [subject=a10, obligation=[color(white, a10)], sanction=[reduce(a10, 100)], deadline=21, time=2015-06-03 16:23:01.483, clock=6]
Proposal [id=7450, agent=a40, agent2=a20, clock=14, time=2015-06-03 16:24:23.685]
Proposal [id=9346, agent=a30, agent2=a40, clock=11, time=2015-06-03 16:23:50.689]
Obligation [subject=a30, obligation=[color(yellow, a30)], sanction=[reduce(a30, 100)], deadline=21, time=2015-06-03 16:23:01.961, clock=6]
Time [clock=19, time=2015-06-03 16:25:07.901]
Obligation [subject=a40, obligation=[acceptRequest(7537)], sanction=[reduce(a40, 200)], deadline=16, time=2015-06-03 16:23:52.082, clock=11]
Obligation [subject=a20, obligation=[makeMove(1, 2, a20)], sanction=[reduce(a20, 300)], deadline=26, time=2015-06-03 16:23:49.543, clock=11]
Time [clock=8, time=2015-06-03 16:23:17.866]
Obligation [subject=a10, obligation=[acceptRequest(9425)], sanction=[reduce(a10, 200)], deadline=17, time=2015-06-03 16:23:58.001, clock=12]
Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-06-03 16:22:28.812, clock=0]
Time [clock=25, time=2015-06-03 16:26:08.413]
Tile [id=null, cell=Cell [x=6, y=3], subject=white, time=2015-06-03 16:22:28.809, clock=0]
Time [clock=6, time=2015-06-03 16:22:57.859]
Tile [id=null, cell=Cell [x=4, y=6], subject=yellow, time=2015-06-03 16:22:28.796, clock=0]
Obligation [subject=a20, obligation=[acceptRequest(1094)], sanction=[reduce(a20, 200)], deadline=19, time=2015-06-03 16:24:27.452, clock=14]
Time [clock=18, time=2015-06-03 16:24:57.899]
Obligation [subject=a10, obligation=[makeMove(3, 4, a10)], sanction=[reduce(a10, 300)], deadline=26, time=2015-06-03 16:23:56.889, clock=11]
Time [clock=12, time=2015-06-03 16:23:57.881]
Time [clock=9, time=2015-06-03 16:23:27.87]
Obligation [subject=a40, obligation=[respondToRequest(7537)], sanction=[reduce(a40, 300)], deadline=16, time=2015-06-03 16:23:52.084, clock=11]
Response [id=8350, response=accepted, clock=11, time=2015-06-03 16:23:56.012]
Response [id=8350, response=accepted, clock=11, time=2015-06-03 16:23:55.991]
Time [clock=20, time=2015-06-03 16:25:17.903]
Obligation [subject=a10, obligation=[surround(2, 1)], sanction=[reduce(g, 700)], deadline=28, time=2015-06-03 16:22:59.156, clock=6]
Obligation [subject=a20, obligation=[respondToRequest(1094)], sanction=[reduce(a20, 300)], deadline=19, time=2015-06-03 16:24:27.454, clock=14]
Response [id=9425, response=accepted, clock=13, time=2015-06-03 16:24:12.999]
Obligation [subject=a40, obligation=[color(brown, a40)], sanction=[reduce(a40, 100)], deadline=21, time=2015-06-03 16:23:02.206, clock=6]
Obligation [subject=a10, obligation=[respondToRequest(8884)], sanction=[reduce(a10, 300)], deadline=16, time=2015-06-03 16:23:56.567, clock=11]
Tile [id=null, cell=Cell [x=2, y=3], subject=white, time=2015-06-03 16:22:28.772, clock=0]
Time [clock=1, time=2015-06-03 16:22:07.826]
Tile [id=null, cell=Cell [x=5, y=5], subject=white, time=2015-06-03 16:22:28.803, clock=0]
Time [clock=29, time=2015-06-03 16:26:48.889]
Obligation [subject=a40, obligation=[acceptRequest(9346)], sanction=[reduce(a40, 200)], deadline=16, time=2015-06-03 16:23:50.703, clock=11]
Tile [id=null, cell=Cell [x=5, y=0], subject=brown, time=2015-06-03 16:22:28.797, clock=0]
Response [id=8884, response=accepted, clock=13, time=2015-06-03 16:24:12.739]
Obligation [subject=a20, obligation=[respondToRequest(9828)], sanction=[reduce(a20, 300)], deadline=23, time=2015-06-03 16:25:02.477, clock=18]
Response [id=9346, response=accepted, clock=11, time=2015-06-03 16:23:56.086]
Tile [id=null, cell=Cell [x=5, y=6], subject=yellow, time=2015-06-03 16:22:28.804, clock=0]
Tile [id=null, cell=Cell [x=4, y=0], subject=white, time=2015-06-03 16:22:28.787, clock=0]
Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-06-03 16:22:28.783, clock=0]
Obligation [subject=a40, obligation=[at(2, 2, a40)], sanction=[reduce(a40, 700)], deadline=26, time=2015-06-03 16:23:01.177, clock=6]
Obligation [subject=a40, obligation=[respondToRequest(9346)], sanction=[reduce(a40, 300)], deadline=16, time=2015-06-03 16:23:50.705, clock=11]
Tile [id=null, cell=Cell [x=5, y=2], subject=blue, time=2015-06-03 16:22:28.799, clock=0]
Tile [id=null, cell=Cell [x=4, y=5], subject=white, time=2015-06-03 16:22:28.794, clock=0]
Tile [id=null, cell=Cell [x=2, y=2], subject=white, time=2015-06-03 16:22:28.77, clock=0]
Obligation [subject=a20, obligation=[acceptRequest(7450)], sanction=[reduce(a20, 200)], deadline=19, time=2015-06-03 16:24:23.704, clock=14]
Response [id=7537, response=accepted, clock=11, time=2015-06-03 16:23:56.129]
Response [id=8884, response=accepted, clock=13, time=2015-06-03 16:24:12.504]
Tile [id=null, cell=Cell [x=2, y=1], subject=yellow, time=2015-06-03 16:22:28.768, clock=0]
Response [id=9346, response=accepted, clock=11, time=2015-06-03 16:23:56.11]
Obligation [subject=a20, obligation=[color(white, a20)], sanction=[reduce(a20, 100)], deadline=21, time=2015-06-03 16:23:01.781, clock=6]
Tile [id=null, cell=Cell [x=4, y=1], subject=yellow, time=2015-06-03 16:22:28.788, clock=0]
Response [id=8884, response=accepted, clock=13, time=2015-06-03 16:24:12.53]
Obligation [subject=a30, obligation=[at(3, 1, a30)], sanction=[reduce(a30, 700)], deadline=26, time=2015-06-03 16:23:01.056, clock=6]
Obligation [subject=a20, obligation=[respondToRequest(7450)], sanction=[reduce(a20, 300)], deadline=19, time=2015-06-03 16:24:23.706, clock=14]
Tile [id=null, cell=Cell [x=5, y=1], subject=brown, time=2015-06-03 16:22:28.798, clock=0]
Tile [id=null, cell=Cell [x=3, y=6], subject=brown, time=2015-06-03 16:22:28.785, clock=0]
Tile [id=null, cell=Cell [x=0, y=4], subject=white, time=2015-06-03 16:22:28.751, clock=0]
Points [subject=a30, time=2015-06-03 16:26:49.335, clock=29, value=250, id=null]
Points [subject=a30, time=2015-06-03 16:24:36.529, clock=15, value=900, id=null]
Tile [id=null, cell=Cell [x=6, y=5], subject=white, time=2015-06-03 16:22:28.811, clock=0]
Tile [id=null, cell=Cell [x=4, y=2], subject=white, time=2015-06-03 16:22:28.79, clock=0]
Tile [id=null, cell=Cell [x=3, y=0], subject=blue, time=2015-06-03 16:22:28.777, clock=0]
Tile [id=null, cell=Cell [x=2, y=5], subject=white, time=2015-06-03 16:22:28.775, clock=0]
Response [id=9346, response=accepted, clock=11, time=2015-06-03 16:23:56.269]
Tile [id=null, cell=Cell [x=3, y=3], subject=yellow, time=2015-06-03 16:22:28.782, clock=0]
Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-06-03 16:22:28.748, clock=0]
Tile [id=null, cell=Cell [x=4, y=3], subject=yellow, time=2015-06-03 16:22:28.791, clock=0]
Tile [id=null, cell=Cell [x=1, y=3], subject=yellow, time=2015-06-03 16:22:28.762, clock=0]
Tile [id=null, cell=Cell [x=2, y=4], subject=blue, time=2015-06-03 16:22:28.773, clock=0]
Points [subject=a10, time=2015-06-03 16:26:29.023, clock=27, value=700, id=null]
Points [subject=a10, time=2015-06-03 16:26:49.333, clock=29, value=350, id=null]
Points [subject=a30, time=2015-06-03 16:26:29.025, clock=27, value=600, id=null]
Points [subject=a40, time=2015-06-03 16:23:56.997, clock=11, value=900, id=null]
Tile [id=null, cell=Cell [x=0, y=6], subject=yellow, time=2015-06-03 16:22:28.755, clock=0]
Tile [id=null, cell=Cell [x=0, y=5], subject=yellow, time=2015-06-03 16:22:28.753, clock=0]
Tile [id=null, cell=Cell [x=0, y=3], subject=brown, time=2015-06-03 16:22:28.75, clock=0]
Tile [id=null, cell=Cell [x=6, y=2], subject=brown, time=2015-06-03 16:22:28.808, clock=0]
Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-06-03 16:22:28.757, clock=0]
Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-06-03 16:22:28.746, clock=0]
Tile [id=null, cell=Cell [x=1, y=4], subject=brown, time=2015-06-03 16:22:28.763, clock=0]
Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-06-03 16:22:28.764, clock=0]
Tile [id=null, cell=Cell [x=6, y=1], subject=blue, time=2015-06-03 16:22:28.806, clock=0]
Tile [id=null, cell=Cell [x=1, y=6], subject=blue, time=2015-06-03 16:22:28.765, clock=0]
Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-06-03 16:22:28.793, clock=0]
Tile [id=null, cell=Cell [x=3, y=2], subject=white, time=2015-06-03 16:22:28.78, clock=0]
Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-06-03 16:22:28.776, clock=0]
Tile [id=null, cell=Cell [x=2, y=0], subject=blue, time=2015-06-03 16:22:28.766, clock=0]
Tile [id=null, cell=Cell [x=1, y=1], subject=white, time=2015-06-03 16:22:28.759, clock=0]
Tile [id=null, cell=Cell [x=3, y=1], subject=white, time=2015-06-03 16:22:28.779, clock=0]
Tile [id=null, cell=Cell [x=1, y=2], subject=brown, time=2015-06-03 16:22:28.76, clock=0]
Tile [id=null, cell=Cell [x=0, y=0], subject=blue, time=2015-06-03 16:22:28.712, clock=0]
Tile [id=null, cell=Cell [x=5, y=3], subject=brown, time=2015-06-03 16:22:28.801, clock=0]
Tile [id=null, cell=Cell [x=6, y=4], subject=yellow, time=2015-06-03 16:22:28.81, clock=0]
-------------------------last log tuples end----------------------------------
[CTAH] started agent 10
[CTAH] Added a new agent to the game by the name of 10.
[ENV] added agent a10
[CTAH] started agent 30
[CTAH] Added a new agent to the game by the name of 30.
[ENV] added agent a30
[CTAH] started agent 40
[CTAH] Added a new agent to the game by the name of 40.
[ENV] added agent a40
org notification: Time [clock=1, time=2015-06-03 16:28:55.884]
object notification: Time [clock=1, time=2015-06-03 16:28:55.884]
object notification: Time [clock=1, time=2015-06-03 16:28:55.884]
object notification: Time [clock=1, time=2015-06-03 16:28:55.884]
#########################Game started
#########################Game started
#########################Game started
[Planbase]:{	initialize
}


[new scheduled]:[initialize]
[Planbase]:{	initialize
}


[new scheduled]:[initialize]
[After]:{	initialize
}


[After]:{	initialize
}


[Planbase]:{	initialize
}


[new scheduled]:[initialize]
[After]:{	initialize
}


Event processed UpdateClock(1)
Event processed UpdateClock(1)
Event processed @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed UpdateClock(1)
Event processed @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateClock(1)
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[getPhase; getId; B(agentId(ID)); getRole(ID); getPos, UpdateClock(1), @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateClock(1)
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@35371c0c
[CTAH] The created APLList : [game_initialized]
[Planbase]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateClock(1)
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[getPhase; getId; B(agentId(ID)); getRole(ID); getPos, UpdateClock(1), @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateClock(1)
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@455ef45a
[CTAH] The created APLList : [game_initialized]
[Planbase]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateClock(1)
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[getPhase; getId; B(agentId(ID)); getRole(ID); getPos, UpdateClock(1), @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateClock(1)
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@4782b18d
[CTAH] The created APLList : [game_initialized]
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, ReceivedEvent(game_initialized)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, ReceivedEvent(game_initialized)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, ReceivedEvent(game_initialized)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[Initialize, @ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos]
[After]:{	Initialize
},
{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


setPhases in ClientGameStatus, the current phase is 
setPhases in ClientGameStatus, the current phase is 
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[Initialize, @ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos]
[After]:{	Initialize
},
{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[Initialize, @ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos]
[After]:{	Initialize
},
{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


setPhases in ClientGameStatus, the current phase is 
setPhases in ClientGameStatus, the current phase is Norm Phase
setPhases in ClientGameStatus, the current phase is Norm Phase
setPhases in ClientGameStatus, the current phase is Norm Phase
object notification: Tile [id=null, cell=Cell [x=0, y=0], subject=blue, time=2015-06-03 16:29:00.406, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=0], subject=blue, time=2015-06-03 16:29:00.406, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=0], subject=blue, time=2015-06-03 16:29:00.406, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-06-03 16:29:00.449, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-06-03 16:29:00.449, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=2], subject=brown, time=2015-06-03 16:29:00.452, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-06-03 16:29:00.449, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=2], subject=brown, time=2015-06-03 16:29:00.452, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=0], subject=blue, time=2015-06-03 16:29:00.406, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-06-03 16:29:00.449, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=2], subject=brown, time=2015-06-03 16:29:00.452, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=3], subject=brown, time=2015-06-03 16:29:00.456, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=3], subject=brown, time=2015-06-03 16:29:00.456, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=3], subject=brown, time=2015-06-03 16:29:00.456, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=2], subject=brown, time=2015-06-03 16:29:00.452, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=3], subject=brown, time=2015-06-03 16:29:00.456, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-06-03 16:29:00.466, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-06-03 16:29:00.466, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-06-03 16:29:00.466, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-06-03 16:29:00.466, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-06-03 16:29:00.478, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-06-03 16:29:00.478, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-06-03 16:29:00.478, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-06-03 16:29:00.478, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-06-03 16:29:00.495, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-06-03 16:29:00.495, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-06-03 16:29:00.495, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-06-03 16:29:00.495, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-06-03 16:29:00.497, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-06-03 16:29:00.497, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-06-03 16:29:00.497, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-06-03 16:29:00.497, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=1], subject=blue, time=2015-06-03 16:29:00.515, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=1], subject=blue, time=2015-06-03 16:29:00.515, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=1], subject=blue, time=2015-06-03 16:29:00.515, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=1], subject=blue, time=2015-06-03 16:29:00.515, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=2], subject=blue, time=2015-06-03 16:29:00.526, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=2], subject=blue, time=2015-06-03 16:29:00.526, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=2], subject=blue, time=2015-06-03 16:29:00.526, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=2], subject=blue, time=2015-06-03 16:29:00.526, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=3], subject=brown, time=2015-06-03 16:29:00.537, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=3], subject=brown, time=2015-06-03 16:29:00.537, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=3], subject=brown, time=2015-06-03 16:29:00.537, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=3], subject=brown, time=2015-06-03 16:29:00.537, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=4], subject=yellow, time=2015-06-03 16:29:00.541, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=4], subject=yellow, time=2015-06-03 16:29:00.541, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=4], subject=yellow, time=2015-06-03 16:29:00.541, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=4], subject=yellow, time=2015-06-03 16:29:00.541, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-06-03 16:29:00.547, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-06-03 16:29:00.547, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-06-03 16:29:00.547, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=6], subject=blue, time=2015-06-03 16:29:00.551, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=6], subject=blue, time=2015-06-03 16:29:00.551, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=6], subject=blue, time=2015-06-03 16:29:00.551, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=0], subject=yellow, time=2015-06-03 16:29:00.554, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=0], subject=yellow, time=2015-06-03 16:29:00.554, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=0], subject=yellow, time=2015-06-03 16:29:00.554, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-06-03 16:29:00.547, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-06-03 16:29:00.558, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-06-03 16:29:00.558, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-06-03 16:29:00.558, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=2], subject=white, time=2015-06-03 16:29:00.562, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=2], subject=white, time=2015-06-03 16:29:00.562, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=2], subject=white, time=2015-06-03 16:29:00.562, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=6], subject=blue, time=2015-06-03 16:29:00.551, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=3], subject=white, time=2015-06-03 16:29:00.567, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=3], subject=white, time=2015-06-03 16:29:00.567, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=3], subject=white, time=2015-06-03 16:29:00.567, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=4], subject=brown, time=2015-06-03 16:29:00.571, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=4], subject=brown, time=2015-06-03 16:29:00.571, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=4], subject=brown, time=2015-06-03 16:29:00.571, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-06-03 16:29:00.574, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-06-03 16:29:00.574, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-06-03 16:29:00.574, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=0], subject=yellow, time=2015-06-03 16:29:00.554, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-06-03 16:29:00.578, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-06-03 16:29:00.578, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-06-03 16:29:00.578, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=0], subject=yellow, time=2015-06-03 16:29:00.581, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=0], subject=yellow, time=2015-06-03 16:29:00.581, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=0], subject=yellow, time=2015-06-03 16:29:00.581, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=1], subject=brown, time=2015-06-03 16:29:00.584, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=1], subject=brown, time=2015-06-03 16:29:00.584, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=1], subject=brown, time=2015-06-03 16:29:00.584, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-06-03 16:29:00.558, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=2], subject=white, time=2015-06-03 16:29:00.589, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=2], subject=white, time=2015-06-03 16:29:00.589, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=2], subject=white, time=2015-06-03 16:29:00.589, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=3], subject=white, time=2015-06-03 16:29:00.594, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=3], subject=white, time=2015-06-03 16:29:00.594, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=3], subject=white, time=2015-06-03 16:29:00.594, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=4], subject=brown, time=2015-06-03 16:29:00.597, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=4], subject=brown, time=2015-06-03 16:29:00.597, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=2], subject=white, time=2015-06-03 16:29:00.562, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=4], subject=brown, time=2015-06-03 16:29:00.597, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-06-03 16:29:00.601, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-06-03 16:29:00.601, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-06-03 16:29:00.601, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=6], subject=yellow, time=2015-06-03 16:29:00.605, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=6], subject=yellow, time=2015-06-03 16:29:00.605, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=6], subject=yellow, time=2015-06-03 16:29:00.605, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=3], subject=white, time=2015-06-03 16:29:00.567, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=0], subject=yellow, time=2015-06-03 16:29:00.608, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=0], subject=yellow, time=2015-06-03 16:29:00.608, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=0], subject=yellow, time=2015-06-03 16:29:00.608, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-06-03 16:29:00.612, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-06-03 16:29:00.612, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-06-03 16:29:00.612, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=4], subject=brown, time=2015-06-03 16:29:00.571, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-06-03 16:29:00.574, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-06-03 16:29:00.63, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-06-03 16:29:00.63, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-06-03 16:29:00.63, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-06-03 16:29:00.578, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=3], subject=yellow, time=2015-06-03 16:29:00.641, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=3], subject=yellow, time=2015-06-03 16:29:00.641, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=3], subject=yellow, time=2015-06-03 16:29:00.641, clock=0]
org notification: Tile [id=null, cell=Cell [x=3, y=0], subject=yellow, time=2015-06-03 16:29:00.581, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=4], subject=yellow, time=2015-06-03 16:29:00.649, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=4], subject=yellow, time=2015-06-03 16:29:00.649, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=4], subject=yellow, time=2015-06-03 16:29:00.649, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=5], subject=white, time=2015-06-03 16:29:00.657, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=5], subject=white, time=2015-06-03 16:29:00.657, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=5], subject=white, time=2015-06-03 16:29:00.657, clock=0]
org notification: Tile [id=null, cell=Cell [x=3, y=1], subject=brown, time=2015-06-03 16:29:00.584, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-06-03 16:29:00.661, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-06-03 16:29:00.661, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-06-03 16:29:00.661, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=0], subject=white, time=2015-06-03 16:29:00.664, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=0], subject=white, time=2015-06-03 16:29:00.664, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=0], subject=white, time=2015-06-03 16:29:00.664, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-06-03 16:29:00.668, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-06-03 16:29:00.668, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-06-03 16:29:00.668, clock=0]
org notification: Tile [id=null, cell=Cell [x=3, y=2], subject=white, time=2015-06-03 16:29:00.589, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=2], subject=white, time=2015-06-03 16:29:00.671, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=2], subject=white, time=2015-06-03 16:29:00.671, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=2], subject=white, time=2015-06-03 16:29:00.671, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=3], subject=white, time=2015-06-03 16:29:00.675, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=3], subject=white, time=2015-06-03 16:29:00.675, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=3], subject=white, time=2015-06-03 16:29:00.675, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=4], subject=yellow, time=2015-06-03 16:29:00.678, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=4], subject=yellow, time=2015-06-03 16:29:00.678, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=4], subject=yellow, time=2015-06-03 16:29:00.678, clock=0]
org notification: Tile [id=null, cell=Cell [x=3, y=3], subject=white, time=2015-06-03 16:29:00.594, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=5], subject=white, time=2015-06-03 16:29:00.682, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=5], subject=white, time=2015-06-03 16:29:00.682, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=5], subject=white, time=2015-06-03 16:29:00.682, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-06-03 16:29:00.685, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-06-03 16:29:00.685, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-06-03 16:29:00.685, clock=0]
org notification: Tile [id=null, cell=Cell [x=3, y=4], subject=brown, time=2015-06-03 16:29:00.597, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=0], subject=yellow, time=2015-06-03 16:29:00.689, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=0], subject=yellow, time=2015-06-03 16:29:00.689, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=0], subject=yellow, time=2015-06-03 16:29:00.689, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=1], subject=white, time=2015-06-03 16:29:00.693, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=1], subject=white, time=2015-06-03 16:29:00.693, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=1], subject=white, time=2015-06-03 16:29:00.693, clock=0]
org notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-06-03 16:29:00.601, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=2], subject=brown, time=2015-06-03 16:29:00.698, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=2], subject=brown, time=2015-06-03 16:29:00.698, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=2], subject=brown, time=2015-06-03 16:29:00.698, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=3], subject=white, time=2015-06-03 16:29:00.702, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=3], subject=white, time=2015-06-03 16:29:00.702, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=3], subject=white, time=2015-06-03 16:29:00.702, clock=0]
org notification: Tile [id=null, cell=Cell [x=3, y=6], subject=yellow, time=2015-06-03 16:29:00.605, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=4], subject=brown, time=2015-06-03 16:29:00.706, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=4], subject=brown, time=2015-06-03 16:29:00.706, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=4], subject=brown, time=2015-06-03 16:29:00.706, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=5], subject=blue, time=2015-06-03 16:29:00.709, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=5], subject=blue, time=2015-06-03 16:29:00.709, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=5], subject=blue, time=2015-06-03 16:29:00.709, clock=0]
org notification: Tile [id=null, cell=Cell [x=4, y=0], subject=yellow, time=2015-06-03 16:29:00.608, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=6], subject=blue, time=2015-06-03 16:29:00.715, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=6], subject=blue, time=2015-06-03 16:29:00.715, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=6], subject=blue, time=2015-06-03 16:29:00.715, clock=0]
org notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-06-03 16:29:00.612, clock=0]
org notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-06-03 16:29:00.63, clock=0]
org notification: Tile [id=null, cell=Cell [x=4, y=3], subject=yellow, time=2015-06-03 16:29:00.641, clock=0]
org notification: Goal [id=null, cell=Cell [x=5, y=1], agent=null, time=2015-06-03 16:29:00.753, clock=0]
org notification: Tile [id=null, cell=Cell [x=4, y=4], subject=yellow, time=2015-06-03 16:29:00.649, clock=0]
org notification: Tile [id=null, cell=Cell [x=4, y=5], subject=white, time=2015-06-03 16:29:00.657, clock=0]
org notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-06-03 16:29:00.661, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=0], subject=white, time=2015-06-03 16:29:00.664, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-06-03 16:29:00.668, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=2], subject=white, time=2015-06-03 16:29:00.671, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=3], subject=white, time=2015-06-03 16:29:00.675, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=4], subject=yellow, time=2015-06-03 16:29:00.678, clock=0]
Event processed UpdateTile(blue, 0, 0)
Event processed UpdateTile(brown, 0, 1)
Event processed UpdateTile(brown, 0, 2)
Event processed UpdateTile(brown, 0, 3)
Event processed UpdateTile(brown, 0, 4)
org notification: Tile [id=null, cell=Cell [x=5, y=5], subject=white, time=2015-06-03 16:29:00.682, clock=0]
Event processed UpdateTile(blue, 0, 5)
Event processed UpdateTile(brown, 0, 6)
org notification: Group [name=g, ra=a10, clock=0, time=2015-06-03 16:29:00.862]
Event processed UpdateTile(brown, 1, 0)
Event processed UpdateTile(blue, 1, 1)
org notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-06-03 16:29:00.685, clock=0]
Event processed UpdateTile(blue, 1, 2)
object notification: Obligation [subject=a10, obligation=[surround(5, 1)], sanction=[reduce(g, 700)], deadline=25, time=2015-06-03 16:29:00.886, clock=1]
Event processed UpdateTile(brown, 1, 3)
Event processed UpdateTile(yellow, 1, 4)
Event processed UpdateTile(blue, 0, 0)
Event processed UpdateTile(brown, 0, 1)
Event processed UpdateTile(brown, 0, 2)
Event processed UpdateTile(brown, 0, 3)
Event processed UpdateTile(brown, 0, 4)
Event processed UpdateTile(blue, 0, 5)
Event processed UpdateTile(brown, 1, 5)
Event processed UpdateTile(brown, 0, 6)
Event processed UpdateTile(blue, 1, 6)
Event processed UpdateTile(brown, 1, 0)
Event processed UpdateTile(yellow, 2, 0)
Event processed UpdateTile(blue, 1, 1)
Event processed UpdateTile(blue, 1, 2)
Event processed UpdateTile(white, 2, 1)
Event processed UpdateTile(brown, 1, 3)
Event processed UpdateTile(white, 2, 2)
Event processed UpdateTile(yellow, 1, 4)
Event processed UpdateTile(white, 2, 3)
Event processed UpdateTile(brown, 2, 4)
Event processed UpdateTile(brown, 2, 5)
object notification: Prohibition [subject=a30, prohibition=[rejectRequests(a30)], sanction=[reduce(a30, 300)], clock=1, time=2015-06-03 16:29:00.923]
object notification: Prohibition [subject=a30, prohibition=[moveTooFast(a30)], sanction=[reduce(a30, 300)], clock=1, time=2015-06-03 16:29:01.033]
object notification: Prohibition [subject=a10, prohibition=[rejectRequests(a10)], sanction=[reduce(a10, 300)], clock=1, time=2015-06-03 16:29:00.912]
object notification: Prohibition [subject=a10, prohibition=[moveTooFast(a10)], sanction=[reduce(a10, 300)], clock=1, time=2015-06-03 16:29:01.016]
Event processed UpdateTile(brown, 1, 5)
Event processed UpdateTile(blue, 1, 6)
Event processed UpdateTile(brown, 2, 6)
Event processed UpdateTile(yellow, 2, 0)
object notification: Prohibition [subject=a40, prohibition=[rejectRequests(a40)], sanction=[reduce(a40, 300)], clock=1, time=2015-06-03 16:29:00.981]
object notification: Prohibition [subject=a40, prohibition=[moveTooFast(a40)], sanction=[reduce(a40, 300)], clock=1, time=2015-06-03 16:29:01.038]
Event processed UpdateTile(white, 2, 1)
Event processed UpdateTile(yellow, 3, 0)
Event processed UpdateTile(white, 2, 2)
Event processed UpdateTile(brown, 3, 1)
Event processed UpdateTile(white, 3, 2)
Event processed UpdateTile(white, 2, 3)
Event processed UpdateTile(white, 3, 3)
Event processed UpdateTile(brown, 2, 4)
Event processed UpdateTile(brown, 3, 4)
#########################Game Initialized
AGENT Thread-16: current phase name: Norm Phase
we have 0 goals
we have GoalWeight: 100  DistWeight: -10  ChipWeight: 5  CommWeight: 0 scoring
Event processed UpdateTile(yellow, 3, 5)
Event processed UpdateTile(brown, 2, 5)
#########################Game Initialized
AGENT Thread-14: current phase name: Norm Phase
we have 0 goals
we have GoalWeight: 100  DistWeight: -10  ChipWeight: 5  CommWeight: 0 scoring
Event processed UpdateTile(yellow, 3, 6)
Event processed UpdateTile(brown, 2, 6)
Event processed UpdateTile(yellow, 4, 0)
Event processed UpdateTile(yellow, 3, 0)
Event processed UpdateTile(blue, 4, 1)
Event processed UpdateTile(yellow, 4, 2)
org notification: Tile [id=null, cell=Cell [x=6, y=0], subject=yellow, time=2015-06-03 16:29:00.689, clock=0]
Event processed UpdateTile(brown, 3, 1)
Event processed UpdateTile(yellow, 4, 3)
Event processed UpdateTile(white, 3, 2)
Event processed UpdateTile(white, 3, 3)
Event processed UpdateTile(brown, 3, 4)
Event processed UpdateTile(yellow, 4, 4)
Event processed UpdateTile(white, 4, 5)
#########################Game Initialized
AGENT Thread-12: current phase name: Norm Phase
we have 0 goals
we have GoalWeight: 100  DistWeight: -10  ChipWeight: 5  CommWeight: 0 scoring
Event processed UpdateTile(yellow, 3, 5)
Event processed UpdateTile(brown, 4, 6)
Event processed UpdateTile(yellow, 3, 6)
Event processed UpdateTile(white, 5, 0)
Event processed UpdateTile(yellow, 4, 0)
Event processed UpdateTile(white, 5, 1)
Event processed UpdateTile(blue, 4, 1)
org notification: Tile [id=null, cell=Cell [x=6, y=1], subject=white, time=2015-06-03 16:29:00.693, clock=0]
Event processed UpdateTile(white, 5, 2)
Event processed UpdateTile(yellow, 4, 2)
Event processed UpdateTile(white, 5, 3)
org notification: Tile [id=null, cell=Cell [x=6, y=2], subject=brown, time=2015-06-03 16:29:00.698, clock=0]
Event processed UpdateTile(yellow, 4, 3)
Event processed UpdateTile(yellow, 5, 4)
Event processed UpdateTile(yellow, 4, 4)
Event processed UpdateTile(white, 5, 5)
Event processed UpdateTile(white, 4, 5)
Event processed UpdateTile(white, 5, 6)
Event processed UpdateTile(brown, 4, 6)
Event processed UpdateTile(white, 5, 0)
Event processed UpdateTile(yellow, 6, 0)
Event processed UpdateTile(white, 5, 1)
Event processed UpdateTile(white, 6, 1)
Event processed UpdateTile(white, 5, 2)
Event processed UpdateTile(brown, 6, 2)
Event processed UpdateTile(white, 5, 3)
Event processed UpdateTile(white, 6, 3)
Event processed UpdateTile(yellow, 5, 4)
Event processed UpdateTile(brown, 6, 4)
Event processed UpdateTile(white, 5, 5)
Event processed UpdateTile(blue, 6, 5)
Event processed UpdateTile(white, 5, 6)
Event processed UpdateTile(blue, 6, 6)
Event processed adoptProhibition(rejectRequests(a40), reduce(a40, 300))
Event processed UpdateTile(yellow, 6, 0)
org notification: Tile [id=null, cell=Cell [x=6, y=3], subject=white, time=2015-06-03 16:29:00.702, clock=0]
Event processed adoptProhibition(moveTooFast(a40), reduce(a40, 300))
org notification: Tile [id=null, cell=Cell [x=6, y=4], subject=brown, time=2015-06-03 16:29:00.706, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=5], subject=blue, time=2015-06-03 16:29:00.709, clock=0]
Event processed UpdateTile(white, 6, 1)
org notification: Tile [id=null, cell=Cell [x=6, y=6], subject=blue, time=2015-06-03 16:29:00.715, clock=0]
[Planbase]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateTile(blue, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(brown, 0, 2)
},
{	UpdateTile(brown, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateTile(blue, 0, 5)
},
{	UpdateTile(brown, 0, 6)
},
{	UpdateTile(brown, 1, 0)
},
{	UpdateTile(blue, 1, 1)
},
{	UpdateTile(blue, 1, 2)
},
{	UpdateTile(brown, 1, 3)
},
{	UpdateTile(yellow, 1, 4)
},
{	UpdateTile(brown, 1, 5)
},
{	UpdateTile(blue, 1, 6)
},
{	UpdateTile(yellow, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateTile(white, 2, 2)
},
{	UpdateTile(white, 2, 3)
},
{	UpdateTile(brown, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(yellow, 3, 0)
},
{	UpdateTile(brown, 3, 1)
},
{	UpdateTile(white, 3, 2)
},
{	UpdateTile(white, 3, 3)
},
{	UpdateTile(brown, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(yellow, 3, 6)
},
{	UpdateTile(yellow, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(yellow, 4, 3)
},
{	UpdateTile(yellow, 4, 4)
},
{	UpdateTile(white, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(white, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(white, 5, 2)
},
{	UpdateTile(white, 5, 3)
},
{	UpdateTile(yellow, 5, 4)
},
{	UpdateTile(white, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(yellow, 6, 0)
},
{	UpdateTile(white, 6, 1)
},
{	UpdateTile(brown, 6, 2)
},
{	UpdateTile(white, 6, 3)
},
{	UpdateTile(brown, 6, 4)
},
{	UpdateTile(blue, 6, 5)
},
{	UpdateTile(blue, 6, 6)
},
{	adoptProhibition(rejectRequests(a40), reduce(a40, 300))
},
{	adoptProhibition(moveTooFast(a40), reduce(a40, 300))
}


[new scheduled]:[GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos, UpdateTile(blue, 0, 0), UpdateTile(brown, 0, 1), UpdateTile(brown, 0, 2), UpdateTile(brown, 0, 3), UpdateTile(brown, 0, 4), UpdateTile(blue, 0, 5), UpdateTile(brown, 0, 6), UpdateTile(brown, 1, 0), UpdateTile(blue, 1, 1), UpdateTile(blue, 1, 2), UpdateTile(brown, 1, 3), UpdateTile(yellow, 1, 4), UpdateTile(brown, 1, 5), UpdateTile(blue, 1, 6), UpdateTile(yellow, 2, 0), UpdateTile(white, 2, 1), UpdateTile(white, 2, 2), UpdateTile(white, 2, 3), UpdateTile(brown, 2, 4), UpdateTile(brown, 2, 5), UpdateTile(brown, 2, 6), UpdateTile(yellow, 3, 0), UpdateTile(brown, 3, 1), UpdateTile(white, 3, 2), UpdateTile(white, 3, 3), UpdateTile(brown, 3, 4), UpdateTile(yellow, 3, 5), UpdateTile(yellow, 3, 6), UpdateTile(yellow, 4, 0), UpdateTile(blue, 4, 1), UpdateTile(yellow, 4, 2), UpdateTile(yellow, 4, 3), UpdateTile(yellow, 4, 4), UpdateTile(white, 4, 5), UpdateTile(brown, 4, 6), UpdateTile(white, 5, 0), UpdateTile(white, 5, 1), UpdateTile(white, 5, 2), UpdateTile(white, 5, 3), UpdateTile(yellow, 5, 4), UpdateTile(white, 5, 5), UpdateTile(white, 5, 6), UpdateTile(yellow, 6, 0), UpdateTile(white, 6, 1), UpdateTile(brown, 6, 2), UpdateTile(white, 6, 3), UpdateTile(brown, 6, 4), UpdateTile(blue, 6, 5), UpdateTile(blue, 6, 6), adoptProhibition(rejectRequests(a40), reduce(a40, 300)), adoptProhibition(moveTooFast(a40), reduce(a40, 300))]
[After]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateTile(blue, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(brown, 0, 2)
},
{	UpdateTile(brown, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateTile(blue, 0, 5)
},
{	UpdateTile(brown, 0, 6)
},
{	UpdateTile(brown, 1, 0)
},
{	UpdateTile(blue, 1, 1)
},
{	UpdateTile(blue, 1, 2)
},
{	UpdateTile(brown, 1, 3)
},
{	UpdateTile(yellow, 1, 4)
},
{	UpdateTile(brown, 1, 5)
},
{	UpdateTile(blue, 1, 6)
},
{	UpdateTile(yellow, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateTile(white, 2, 2)
},
{	UpdateTile(white, 2, 3)
},
{	UpdateTile(brown, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(yellow, 3, 0)
},
{	UpdateTile(brown, 3, 1)
},
{	UpdateTile(white, 3, 2)
},
{	UpdateTile(white, 3, 3)
},
{	UpdateTile(brown, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(yellow, 3, 6)
},
{	UpdateTile(yellow, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(yellow, 4, 3)
},
{	UpdateTile(yellow, 4, 4)
},
{	UpdateTile(white, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(white, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(white, 5, 2)
},
{	UpdateTile(white, 5, 3)
},
{	UpdateTile(yellow, 5, 4)
},
{	UpdateTile(white, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(yellow, 6, 0)
},
{	UpdateTile(white, 6, 1)
},
{	UpdateTile(brown, 6, 2)
},
{	UpdateTile(white, 6, 3)
},
{	UpdateTile(brown, 6, 4)
},
{	UpdateTile(blue, 6, 5)
},
{	UpdateTile(blue, 6, 6)
},
{	adoptProhibition(rejectRequests(a40), reduce(a40, 300))
},
{	adoptProhibition(moveTooFast(a40), reduce(a40, 300))
}


Event processed UpdateTile(brown, 6, 2)
Event processed UpdateTile(white, 6, 3)
Event processed UpdateTile(brown, 6, 4)
Event processed UpdateTile(blue, 6, 5)
Event processed UpdateTile(blue, 6, 6)
Event processed adoptObligation(surround(5, 1), 25, reduce(g, 700))
Event processed adoptProhibition(rejectRequests(a10), reduce(a10, 300))
Event processed adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[Planbase]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateTile(blue, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(brown, 0, 2)
},
{	UpdateTile(brown, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateTile(blue, 0, 5)
},
{	UpdateTile(brown, 0, 6)
},
{	UpdateTile(brown, 1, 0)
},
{	UpdateTile(blue, 1, 1)
},
{	UpdateTile(blue, 1, 2)
},
{	UpdateTile(brown, 1, 3)
},
{	UpdateTile(yellow, 1, 4)
},
{	UpdateTile(brown, 1, 5)
},
{	UpdateTile(blue, 1, 6)
},
{	UpdateTile(yellow, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateTile(white, 2, 2)
},
{	UpdateTile(white, 2, 3)
},
{	UpdateTile(brown, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(yellow, 3, 0)
},
{	UpdateTile(brown, 3, 1)
},
{	UpdateTile(white, 3, 2)
},
{	UpdateTile(white, 3, 3)
},
{	UpdateTile(brown, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(yellow, 3, 6)
},
{	UpdateTile(yellow, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(yellow, 4, 3)
},
{	UpdateTile(yellow, 4, 4)
},
{	UpdateTile(white, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(white, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(white, 5, 2)
},
{	UpdateTile(white, 5, 3)
},
{	UpdateTile(yellow, 5, 4)
},
{	UpdateTile(white, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(yellow, 6, 0)
},
{	UpdateTile(white, 6, 1)
},
{	UpdateTile(brown, 6, 2)
},
{	UpdateTile(white, 6, 3)
},
{	UpdateTile(brown, 6, 4)
},
{	UpdateTile(blue, 6, 5)
},
{	UpdateTile(blue, 6, 6)
},
{	adoptObligation(surround(5, 1), 25, reduce(g, 700))
},
{	adoptProhibition(rejectRequests(a10), reduce(a10, 300))
},
{	adoptProhibition(moveTooFast(a10), reduce(a10, 300))
}


[new scheduled]:[GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos, UpdateTile(blue, 0, 0), UpdateTile(brown, 0, 1), UpdateTile(brown, 0, 2), UpdateTile(brown, 0, 3), UpdateTile(brown, 0, 4), UpdateTile(blue, 0, 5), UpdateTile(brown, 0, 6), UpdateTile(brown, 1, 0), UpdateTile(blue, 1, 1), UpdateTile(blue, 1, 2), UpdateTile(brown, 1, 3), UpdateTile(yellow, 1, 4), UpdateTile(brown, 1, 5), UpdateTile(blue, 1, 6), UpdateTile(yellow, 2, 0), UpdateTile(white, 2, 1), UpdateTile(white, 2, 2), UpdateTile(white, 2, 3), UpdateTile(brown, 2, 4), UpdateTile(brown, 2, 5), UpdateTile(brown, 2, 6), UpdateTile(yellow, 3, 0), UpdateTile(brown, 3, 1), UpdateTile(white, 3, 2), UpdateTile(white, 3, 3), UpdateTile(brown, 3, 4), UpdateTile(yellow, 3, 5), UpdateTile(yellow, 3, 6), UpdateTile(yellow, 4, 0), UpdateTile(blue, 4, 1), UpdateTile(yellow, 4, 2), UpdateTile(yellow, 4, 3), UpdateTile(yellow, 4, 4), UpdateTile(white, 4, 5), UpdateTile(brown, 4, 6), UpdateTile(white, 5, 0), UpdateTile(white, 5, 1), UpdateTile(white, 5, 2), UpdateTile(white, 5, 3), UpdateTile(yellow, 5, 4), UpdateTile(white, 5, 5), UpdateTile(white, 5, 6), UpdateTile(yellow, 6, 0), UpdateTile(white, 6, 1), UpdateTile(brown, 6, 2), UpdateTile(white, 6, 3), UpdateTile(brown, 6, 4), UpdateTile(blue, 6, 5), UpdateTile(blue, 6, 6), adoptObligation(surround(5, 1), 25, reduce(g, 700)), adoptProhibition(rejectRequests(a10), reduce(a10, 300)), adoptProhibition(moveTooFast(a10), reduce(a10, 300))]
[After]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateTile(blue, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(brown, 0, 2)
},
{	UpdateTile(brown, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateTile(blue, 0, 5)
},
{	UpdateTile(brown, 0, 6)
},
{	UpdateTile(brown, 1, 0)
},
{	UpdateTile(blue, 1, 1)
},
{	UpdateTile(blue, 1, 2)
},
{	UpdateTile(brown, 1, 3)
},
{	UpdateTile(yellow, 1, 4)
},
{	UpdateTile(brown, 1, 5)
},
{	UpdateTile(blue, 1, 6)
},
{	UpdateTile(yellow, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateTile(white, 2, 2)
},
{	UpdateTile(white, 2, 3)
},
{	UpdateTile(brown, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(yellow, 3, 0)
},
{	UpdateTile(brown, 3, 1)
},
{	UpdateTile(white, 3, 2)
},
{	UpdateTile(white, 3, 3)
},
{	UpdateTile(brown, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(yellow, 3, 6)
},
{	UpdateTile(yellow, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(yellow, 4, 3)
},
{	UpdateTile(yellow, 4, 4)
},
{	UpdateTile(white, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(white, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(white, 5, 2)
},
{	UpdateTile(white, 5, 3)
},
{	UpdateTile(yellow, 5, 4)
},
{	UpdateTile(white, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(yellow, 6, 0)
},
{	UpdateTile(white, 6, 1)
},
{	UpdateTile(brown, 6, 2)
},
{	UpdateTile(white, 6, 3)
},
{	UpdateTile(brown, 6, 4)
},
{	UpdateTile(blue, 6, 5)
},
{	UpdateTile(blue, 6, 6)
},
{	adoptObligation(surround(5, 1), 25, reduce(g, 700))
},
{	adoptProhibition(rejectRequests(a10), reduce(a10, 300))
},
{	adoptProhibition(moveTooFast(a10), reduce(a10, 300))
}


[Planbase]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	AdoptP(rejectRequests(300));
	aprohibition(rejectRequests(300) -> reduce(300), priority 0)
},
{	AdoptP(moveTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[getId; B(agentId(ID)); getRole(ID); getPos, AdoptP(rejectRequests(300)); aprohibition(rejectRequests(300) -> reduce(300), priority 0), AdoptP(moveTooFast(300)); aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	AdoptP(rejectRequests(300));
	aprohibition(rejectRequests(300) -> reduce(300), priority 0)
},
{	AdoptP(moveTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[Planbase]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	adopta(surround(5, 1, 700) : 3 Jun 2015 15:45:42 GMT, priority 10)
},
{	AdoptP(rejectRequests(300));
	aprohibition(rejectRequests(300) -> reduce(300), priority 0)
},
{	AdoptP(moveTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[getId; B(agentId(ID)); getRole(ID); getPos, adopta(surround(5, 1, 700) : 3 Jun 2015 15:45:42 GMT, priority 10), AdoptP(rejectRequests(300)); aprohibition(rejectRequests(300) -> reduce(300), priority 0), AdoptP(moveTooFast(300)); aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	adopta(surround(5, 1, 700) : 3 Jun 2015 15:45:42 GMT, priority 10)
},
{	AdoptP(rejectRequests(300));
	aprohibition(rejectRequests(300) -> reduce(300), priority 0)
},
{	AdoptP(moveTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


obligation to be adopted: surround(5, 1, 700) : 3 Jun 2015 15:45:42 GMT, priority 10
[Planbase]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	aprohibition(rejectRequests(300) -> reduce(300), priority 0)
},
{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[@ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos, aprohibition(rejectRequests(300) -> reduce(300), priority 0), aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	aprohibition(rejectRequests(300) -> reduce(300), priority 0)
},
{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[Planbase]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	aprohibition(rejectRequests(300) -> reduce(300), priority 0)
},
{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[@ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos, aprohibition(rejectRequests(300) -> reduce(300), priority 0), aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	aprohibition(rejectRequests(300) -> reduce(300), priority 0)
},
{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[Planbase]:{	GetAgentId(3);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[GetAgentId(3); B(agentId(ID)); getRole(ID); getPos]
[After]:{	GetAgentId(3);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	GetAgentId(0);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[GetAgentId(0); B(agentId(ID)); getRole(ID); getPos]
[After]:{	GetAgentId(0);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[B(agentId(ID)); getRole(ID); getPos]
[After]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[B(agentId(ID)); getRole(ID); getPos]
[After]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	getRole(3);
	getPos
}


[new scheduled]:[getRole(3); getPos]
[After]:{	getRole(3);
	getPos
}


[Planbase]:{	getRole(0);
	getPos
}


[new scheduled]:[getRole(0); getPos]
[After]:{	getRole(0);
	getPos
}


[Planbase]:{	@ctenv(getRole(3),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(3, X);
	getPos
}


[new scheduled]:[@ctenv(getRole(3),L1,0); B(L1=[actionresult(X)]); GetRole(3, X); getPos]
[After]:{	@ctenv(getRole(3),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(3, X);
	getPos
}


[Planbase]:{	@ctenv(getRole(0),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(0, X);
	getPos
}


[new scheduled]:[@ctenv(getRole(0),L1,0); B(L1=[actionresult(X)]); GetRole(0, X); getPos]
[After]:{	@ctenv(getRole(0),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(0, X);
	getPos
}


[Planbase]:{	GetRole(3, none);
	getPos
}


[new scheduled]:[GetRole(3, none); getPos]
[After]:{	GetRole(3, none);
	getPos
}


[Planbase]:{	GetRole(0, raaa);
	getPos
}


[new scheduled]:[GetRole(0, raaa); getPos]
[After]:{	GetRole(0, raaa);
	getPos
}


[Planbase]:{	getPos
}


[new scheduled]:[getPos]
[After]:{	getPos
}


[Planbase]:{	getPos
}


[new scheduled]:[Surround(5, 1); sendSouth(a10, 5, 1, 100); sendWest(a20, 5, 1, 100); sendEast(a30, 5, 1, 100); sendNorth(a40, 5, 1, 100); B(tile(C1, 1, 1)); color(C1, a10, yes, 100); B(tile(C2, 2, 2)); color(C2, a20, yes, 100); B(tile(C3, 3, 3)); color(C3, a30, yes, 100); B(tile(C4, 4, 4)); color(C4, a40, yes, 100); color(C4, a10, no, 100); color(C3, a20, no, 100); color(C2, a30, no, 100); color(C1, a40, no, 100); dropgoal(surround(5, 1, 700) : Infinite, priority 10), getPos]
[After]:{	Surround(5, 1);
	sendSouth(a10, 5, 1, 100);
	sendWest(a20, 5, 1, 100);
	sendEast(a30, 5, 1, 100);
	sendNorth(a40, 5, 1, 100);
	B(tile(C1, 1, 1));
	color(C1, a10, yes, 100);
	B(tile(C2, 2, 2));
	color(C2, a20, yes, 100);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(C2, a30, no, 100);
	color(C1, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	getPos
}


[Planbase]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[new scheduled]:[@ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)]
[After]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[CTAH] Agentposition: [2,6]
[Planbase]:{	B(clock(C));
	GetAgentPos(2, 6, C)
}


[new scheduled]:[B(clock(C)); GetAgentPos(2, 6, C)]
[After]:{	B(clock(C));
	GetAgentPos(2, 6, C)
}


[Planbase]:{	sendSouth(a10, 5, 1, 100);
	sendWest(a20, 5, 1, 100);
	sendEast(a30, 5, 1, 100);
	sendNorth(a40, 5, 1, 100);
	B(tile(C1, 1, 1));
	color(C1, a10, yes, 100);
	B(tile(C2, 2, 2));
	color(C2, a20, yes, 100);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(C2, a30, no, 100);
	color(C1, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[new scheduled]:[sendSouth(a10, 5, 1, 100); sendWest(a20, 5, 1, 100); sendEast(a30, 5, 1, 100); sendNorth(a40, 5, 1, 100); B(tile(C1, 1, 1)); color(C1, a10, yes, 100); B(tile(C2, 2, 2)); color(C2, a20, yes, 100); B(tile(C3, 3, 3)); color(C3, a30, yes, 100); B(tile(C4, 4, 4)); color(C4, a40, yes, 100); color(C4, a10, no, 100); color(C3, a20, no, 100); color(C2, a30, no, 100); color(C1, a40, no, 100); dropgoal(surround(5, 1, 700) : Infinite, priority 10), @ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)]
[After]:{	sendSouth(a10, 5, 1, 100);
	sendWest(a20, 5, 1, 100);
	sendEast(a30, 5, 1, 100);
	sendNorth(a40, 5, 1, 100);
	B(tile(C1, 1, 1));
	color(C1, a10, yes, 100);
	B(tile(C2, 2, 2));
	color(C2, a20, yes, 100);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(C2, a30, no, 100);
	color(C1, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[CTAH] Agentposition: [5,6]
[Planbase]:{	GetAgentPos(2, 6, 1)
}


[new scheduled]:[GetAgentPos(2, 6, 1)]
[After]:{	GetAgentPos(2, 6, 1)
}


[Planbase]:{	@ctenv(setGoal(a10, 5, 0, 5, 1, 100),L,0);
	sendWest(a20, 5, 1, 100);
	sendEast(a30, 5, 1, 100);
	sendNorth(a40, 5, 1, 100);
	B(tile(C1, 1, 1));
	color(C1, a10, yes, 100);
	B(tile(C2, 2, 2));
	color(C2, a20, yes, 100);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(C2, a30, no, 100);
	color(C1, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	B(clock(C));
	GetAgentPos(5, 6, C)
}


[new scheduled]:[@ctenv(setGoal(a10, 5, 0, 5, 1, 100),L,0); sendWest(a20, 5, 1, 100); sendEast(a30, 5, 1, 100); sendNorth(a40, 5, 1, 100); B(tile(C1, 1, 1)); color(C1, a10, yes, 100); B(tile(C2, 2, 2)); color(C2, a20, yes, 100); B(tile(C3, 3, 3)); color(C3, a30, yes, 100); B(tile(C4, 4, 4)); color(C4, a40, yes, 100); color(C4, a10, no, 100); color(C3, a20, no, 100); color(C2, a30, no, 100); color(C1, a40, no, 100); dropgoal(surround(5, 1, 700) : Infinite, priority 10), B(clock(C)); GetAgentPos(5, 6, C)]
[After]:{	@ctenv(setGoal(a10, 5, 0, 5, 1, 100),L,0);
	sendWest(a20, 5, 1, 100);
	sendEast(a30, 5, 1, 100);
	sendNorth(a40, 5, 1, 100);
	B(tile(C1, 1, 1));
	color(C1, a10, yes, 100);
	B(tile(C2, 2, 2));
	color(C2, a20, yes, 100);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(C2, a30, no, 100);
	color(C1, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	B(clock(C));
	GetAgentPos(5, 6, C)
}


agent writes: SetGoal [id=null, agent=a10, cell=Cell [x=5, y=0], goal=Cell [x=5, y=1], sanction=100, clock=1, time=2015-06-03 16:29:04.891]
org notification: SetGoal [id=null, agent=a10, cell=Cell [x=5, y=0], goal=Cell [x=5, y=1], sanction=100, clock=1, time=2015-06-03 16:29:04.891]
object notification: Obligation [subject=a10, obligation=[at(5, 0, a10)], sanction=[reduce(a10, 700)], deadline=21, time=2015-06-03 16:29:04.9, clock=1]
[Planbase]:


[new scheduled]:[]
[After]:


Event processed adoptObligation(at(5, 0, a10), 21, reduce(a10, 700))
[Planbase]:{	@ctenv(setGoal(a20, 4, 1, 5, 1, 100),L,0);
	sendEast(a30, 5, 1, 100);
	sendNorth(a40, 5, 1, 100);
	B(tile(C1, 1, 1));
	color(C1, a10, yes, 100);
	B(tile(C2, 2, 2));
	color(C2, a20, yes, 100);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(C2, a30, no, 100);
	color(C1, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	GetAgentPos(5, 6, 1)
},
{	adoptObligation(at(5, 0, a10), 21, reduce(a10, 700))
}


[new scheduled]:[@ctenv(setGoal(a20, 4, 1, 5, 1, 100),L,0); sendEast(a30, 5, 1, 100); sendNorth(a40, 5, 1, 100); B(tile(C1, 1, 1)); color(C1, a10, yes, 100); B(tile(C2, 2, 2)); color(C2, a20, yes, 100); B(tile(C3, 3, 3)); color(C3, a30, yes, 100); B(tile(C4, 4, 4)); color(C4, a40, yes, 100); color(C4, a10, no, 100); color(C3, a20, no, 100); color(C2, a30, no, 100); color(C1, a40, no, 100); dropgoal(surround(5, 1, 700) : Infinite, priority 10), GetAgentPos(5, 6, 1), adoptObligation(at(5, 0, a10), 21, reduce(a10, 700))]
[After]:{	@ctenv(setGoal(a20, 4, 1, 5, 1, 100),L,0);
	sendEast(a30, 5, 1, 100);
	sendNorth(a40, 5, 1, 100);
	B(tile(C1, 1, 1));
	color(C1, a10, yes, 100);
	B(tile(C2, 2, 2));
	color(C2, a20, yes, 100);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(C2, a30, no, 100);
	color(C1, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	GetAgentPos(5, 6, 1)
},
{	adoptObligation(at(5, 0, a10), 21, reduce(a10, 700))
}


agent writes: SetGoal [id=null, agent=a20, cell=Cell [x=4, y=1], goal=Cell [x=5, y=1], sanction=100, clock=1, time=2015-06-03 16:29:04.995]
org notification: SetGoal [id=null, agent=a20, cell=Cell [x=4, y=1], goal=Cell [x=5, y=1], sanction=100, clock=1, time=2015-06-03 16:29:04.995]
[Planbase]:{	@ctenv(setGoal(a30, 6, 1, 5, 1, 100),L,0);
	sendNorth(a40, 5, 1, 100);
	B(tile(C1, 1, 1));
	color(C1, a10, yes, 100);
	B(tile(C2, 2, 2));
	color(C2, a20, yes, 100);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(C2, a30, no, 100);
	color(C1, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	adoptz(at(5, 0, 700) : 3 Jun 2015 15:45:45 GMT, priority 10)
}


[new scheduled]:[@ctenv(setGoal(a30, 6, 1, 5, 1, 100),L,0); sendNorth(a40, 5, 1, 100); B(tile(C1, 1, 1)); color(C1, a10, yes, 100); B(tile(C2, 2, 2)); color(C2, a20, yes, 100); B(tile(C3, 3, 3)); color(C3, a30, yes, 100); B(tile(C4, 4, 4)); color(C4, a40, yes, 100); color(C4, a10, no, 100); color(C3, a20, no, 100); color(C2, a30, no, 100); color(C1, a40, no, 100); dropgoal(surround(5, 1, 700) : Infinite, priority 10), adoptz(at(5, 0, 700) : 3 Jun 2015 15:45:45 GMT, priority 10)]
[After]:{	@ctenv(setGoal(a30, 6, 1, 5, 1, 100),L,0);
	sendNorth(a40, 5, 1, 100);
	B(tile(C1, 1, 1));
	color(C1, a10, yes, 100);
	B(tile(C2, 2, 2));
	color(C2, a20, yes, 100);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(C2, a30, no, 100);
	color(C1, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	adoptz(at(5, 0, 700) : 3 Jun 2015 15:45:45 GMT, priority 10)
}


agent writes: SetGoal [id=null, agent=a30, cell=Cell [x=6, y=1], goal=Cell [x=5, y=1], sanction=100, clock=1, time=2015-06-03 16:29:05.075]
org notification: SetGoal [id=null, agent=a30, cell=Cell [x=6, y=1], goal=Cell [x=5, y=1], sanction=100, clock=1, time=2015-06-03 16:29:05.075]
obligation to be adopted: at(5, 0, 700) : 3 Jun 2015 15:45:45 GMT, priority 10
object notification: Obligation [subject=a30, obligation=[at(6, 1, a30)], sanction=[reduce(a30, 700)], deadline=21, time=2015-06-03 16:29:05.077, clock=1]
[Planbase]:{	@ctenv(setGoal(a40, 5, 2, 5, 1, 100),L,0);
	B(tile(C1, 1, 1));
	color(C1, a10, yes, 100);
	B(tile(C2, 2, 2));
	color(C2, a20, yes, 100);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(C2, a30, no, 100);
	color(C1, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
}


[new scheduled]:[@ctenv(setGoal(a40, 5, 2, 5, 1, 100),L,0); B(tile(C1, 1, 1)); color(C1, a10, yes, 100); B(tile(C2, 2, 2)); color(C2, a20, yes, 100); B(tile(C3, 3, 3)); color(C3, a30, yes, 100); B(tile(C4, 4, 4)); color(C4, a40, yes, 100); color(C4, a10, no, 100); color(C3, a20, no, 100); color(C2, a30, no, 100); color(C1, a40, no, 100); dropgoal(surround(5, 1, 700) : Infinite, priority 10)]
[After]:{	@ctenv(setGoal(a40, 5, 2, 5, 1, 100),L,0);
	B(tile(C1, 1, 1));
	color(C1, a10, yes, 100);
	B(tile(C2, 2, 2));
	color(C2, a20, yes, 100);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(C2, a30, no, 100);
	color(C1, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
}


agent writes: SetGoal [id=null, agent=a40, cell=Cell [x=5, y=2], goal=Cell [x=5, y=1], sanction=100, clock=1, time=2015-06-03 16:29:05.144]
org notification: SetGoal [id=null, agent=a40, cell=Cell [x=5, y=2], goal=Cell [x=5, y=1], sanction=100, clock=1, time=2015-06-03 16:29:05.144]
object notification: Obligation [subject=a40, obligation=[at(5, 2, a40)], sanction=[reduce(a40, 700)], deadline=21, time=2015-06-03 16:29:05.148, clock=1]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	color(blue, a10, yes, 100);
	B(tile(C2, 2, 2));
	color(C2, a20, yes, 100);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(C2, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
}


[new scheduled]:[color(blue, a10, yes, 100); B(tile(C2, 2, 2)); color(C2, a20, yes, 100); B(tile(C3, 3, 3)); color(C3, a30, yes, 100); B(tile(C4, 4, 4)); color(C4, a40, yes, 100); color(C4, a10, no, 100); color(C3, a20, no, 100); color(C2, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(5, 1, 700) : Infinite, priority 10)]
[After]:{	color(blue, a10, yes, 100);
	B(tile(C2, 2, 2));
	color(C2, a20, yes, 100);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(C2, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
}


Event processed adoptObligation(at(5, 2, a40), 21, reduce(a40, 700))
[Planbase]:{	adoptObligation(at(5, 2, a40), 21, reduce(a40, 700))
}


[new scheduled]:[adoptObligation(at(5, 2, a40), 21, reduce(a40, 700))]
[After]:{	adoptObligation(at(5, 2, a40), 21, reduce(a40, 700))
}


[Planbase]:{	@ctenv(setColor(a10, blue, yes, 100),L,0);
	B(tile(C2, 2, 2));
	color(C2, a20, yes, 100);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(C2, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
}


[new scheduled]:[@ctenv(setColor(a10, blue, yes, 100),L,0); B(tile(C2, 2, 2)); color(C2, a20, yes, 100); B(tile(C3, 3, 3)); color(C3, a30, yes, 100); B(tile(C4, 4, 4)); color(C4, a40, yes, 100); color(C4, a10, no, 100); color(C3, a20, no, 100); color(C2, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(5, 1, 700) : Infinite, priority 10)]
[After]:{	@ctenv(setColor(a10, blue, yes, 100),L,0);
	B(tile(C2, 2, 2));
	color(C2, a20, yes, 100);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(C2, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
}


[Planbase]:{	adoptz(at(5, 2, 700) : 3 Jun 2015 15:45:45 GMT, priority 10)
}


[new scheduled]:[adoptz(at(5, 2, 700) : 3 Jun 2015 15:45:45 GMT, priority 10)]
[After]:{	adoptz(at(5, 2, 700) : 3 Jun 2015 15:45:45 GMT, priority 10)
}


agent writes: Color [id=null, color=blue, agent=a10, type=yes, sanction=100, time=2015-06-03 16:29:05.346, clock=1]
org notification: Color [id=null, color=blue, agent=a10, type=yes, sanction=100, time=2015-06-03 16:29:05.346, clock=1]
object notification: Obligation [subject=a10, obligation=[color(blue, a10)], sanction=[reduce(a10, 100)], deadline=16, time=2015-06-03 16:29:05.355, clock=1]
obligation to be adopted: at(5, 2, 700) : 3 Jun 2015 15:45:45 GMT, priority 10
Event processed adoptObligation(color(blue, a10), 16, reduce(a10, 100))
[Planbase]:{	color(white, a20, yes, 100);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(white, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	adoptObligation(color(blue, a10), 16, reduce(a10, 100))
}


[new scheduled]:[color(white, a20, yes, 100); B(tile(C3, 3, 3)); color(C3, a30, yes, 100); B(tile(C4, 4, 4)); color(C4, a40, yes, 100); color(C4, a10, no, 100); color(C3, a20, no, 100); color(white, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(5, 1, 700) : Infinite, priority 10), adoptObligation(color(blue, a10), 16, reduce(a10, 100))]
[After]:{	color(white, a20, yes, 100);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(white, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	adoptObligation(color(blue, a10), 16, reduce(a10, 100))
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	@ctenv(setColor(a20, white, yes, 100),L,0);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(white, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	adoptz(useColor(blue, 100) : 3 Jun 2015 15:45:45 GMT, priority 10)
}


[new scheduled]:[@ctenv(setColor(a20, white, yes, 100),L,0); B(tile(C3, 3, 3)); color(C3, a30, yes, 100); B(tile(C4, 4, 4)); color(C4, a40, yes, 100); color(C4, a10, no, 100); color(C3, a20, no, 100); color(white, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(5, 1, 700) : Infinite, priority 10), adoptz(useColor(blue, 100) : 3 Jun 2015 15:45:45 GMT, priority 10)]
[After]:{	@ctenv(setColor(a20, white, yes, 100),L,0);
	B(tile(C3, 3, 3));
	color(C3, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(C3, a20, no, 100);
	color(white, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	adoptz(useColor(blue, 100) : 3 Jun 2015 15:45:45 GMT, priority 10)
}


agent writes: Color [id=null, color=white, agent=a20, type=yes, sanction=100, time=2015-06-03 16:29:05.537, clock=1]
org notification: Color [id=null, color=white, agent=a20, type=yes, sanction=100, time=2015-06-03 16:29:05.537, clock=1]
obligation to be adopted: useColor(blue, 100) : 3 Jun 2015 15:45:45 GMT, priority 10
[Planbase]:{	color(white, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(white, a20, no, 100);
	color(white, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
}


[new scheduled]:[color(white, a30, yes, 100); B(tile(C4, 4, 4)); color(C4, a40, yes, 100); color(C4, a10, no, 100); color(white, a20, no, 100); color(white, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(5, 1, 700) : Infinite, priority 10)]
[After]:{	color(white, a30, yes, 100);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(white, a20, no, 100);
	color(white, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
}


[Planbase]:{	@ctenv(setColor(a30, white, yes, 100),L,0);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(white, a20, no, 100);
	color(white, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
}


[new scheduled]:[@ctenv(setColor(a30, white, yes, 100),L,0); B(tile(C4, 4, 4)); color(C4, a40, yes, 100); color(C4, a10, no, 100); color(white, a20, no, 100); color(white, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(5, 1, 700) : Infinite, priority 10)]
[After]:{	@ctenv(setColor(a30, white, yes, 100),L,0);
	B(tile(C4, 4, 4));
	color(C4, a40, yes, 100);
	color(C4, a10, no, 100);
	color(white, a20, no, 100);
	color(white, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
}


agent writes: Color [id=null, color=white, agent=a30, type=yes, sanction=100, time=2015-06-03 16:29:05.673, clock=1]
org notification: Color [id=null, color=white, agent=a30, type=yes, sanction=100, time=2015-06-03 16:29:05.673, clock=1]
object notification: Obligation [subject=a30, obligation=[color(white, a30)], sanction=[reduce(a30, 100)], deadline=16, time=2015-06-03 16:29:05.677, clock=1]
[Planbase]:{	color(yellow, a40, yes, 100);
	color(yellow, a10, no, 100);
	color(white, a20, no, 100);
	color(white, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
}


[new scheduled]:[color(yellow, a40, yes, 100); color(yellow, a10, no, 100); color(white, a20, no, 100); color(white, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(5, 1, 700) : Infinite, priority 10)]
[After]:{	color(yellow, a40, yes, 100);
	color(yellow, a10, no, 100);
	color(white, a20, no, 100);
	color(white, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
}


[Planbase]:{	@ctenv(setColor(a40, yellow, yes, 100),L,0);
	color(yellow, a10, no, 100);
	color(white, a20, no, 100);
	color(white, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
}


[new scheduled]:[@ctenv(setColor(a40, yellow, yes, 100),L,0); color(yellow, a10, no, 100); color(white, a20, no, 100); color(white, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(5, 1, 700) : Infinite, priority 10)]
[After]:{	@ctenv(setColor(a40, yellow, yes, 100),L,0);
	color(yellow, a10, no, 100);
	color(white, a20, no, 100);
	color(white, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
}


agent writes: Color [id=null, color=yellow, agent=a40, type=yes, sanction=100, time=2015-06-03 16:29:05.794, clock=1]
org notification: Color [id=null, color=yellow, agent=a40, type=yes, sanction=100, time=2015-06-03 16:29:05.794, clock=1]
object notification: Obligation [subject=a40, obligation=[color(yellow, a40)], sanction=[reduce(a40, 100)], deadline=16, time=2015-06-03 16:29:05.797, clock=1]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	@ctenv(setColor(a10, yellow, no, 100),L,0);
	color(white, a20, no, 100);
	color(white, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
}


[new scheduled]:[@ctenv(setColor(a10, yellow, no, 100),L,0); color(white, a20, no, 100); color(white, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(5, 1, 700) : Infinite, priority 10)]
[After]:{	@ctenv(setColor(a10, yellow, no, 100),L,0);
	color(white, a20, no, 100);
	color(white, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
}


Event processed adoptObligation(color(yellow, a40), 16, reduce(a40, 100))
object notification: Time [clock=2, time=2015-06-03 16:29:05.903]
org notification: Time [clock=2, time=2015-06-03 16:29:05.903]
object notification: Time [clock=2, time=2015-06-03 16:29:05.903]
object notification: Time [clock=2, time=2015-06-03 16:29:05.903]
agent writes: Color [id=null, color=yellow, agent=a10, type=no, sanction=100, time=2015-06-03 16:29:05.914, clock=2]
org notification: Color [id=null, color=yellow, agent=a10, type=no, sanction=100, time=2015-06-03 16:29:05.914, clock=2]
object notification: Prohibition [subject=a10, prohibition=[color(yellow, a10)], sanction=[reduce(a10, 100)], clock=2, time=2015-06-03 16:29:05.917]
[Planbase]:{	adoptObligation(color(yellow, a40), 16, reduce(a40, 100))
}


[new scheduled]:[adoptObligation(color(yellow, a40), 16, reduce(a40, 100))]
[After]:{	adoptObligation(color(yellow, a40), 16, reduce(a40, 100))
}


Event processed UpdateClock(2)
Event processed adoptProhibition(color(yellow, a10), reduce(a10, 100))
Event processed UpdateClock(2)
[Planbase]:{	adoptz(useColor(yellow, 100) : 3 Jun 2015 15:45:45 GMT, priority 10)
},
{	UpdateClock(2)
}


[new scheduled]:[adoptz(useColor(yellow, 100) : 3 Jun 2015 15:45:45 GMT, priority 10), UpdateClock(2)]
[After]:{	adoptz(useColor(yellow, 100) : 3 Jun 2015 15:45:45 GMT, priority 10)
},
{	UpdateClock(2)
}


[Planbase]:{	@ctenv(setColor(a20, white, no, 100),L,0);
	color(white, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	UpdateClock(2)
},
{	adoptProhibition(color(yellow, a10), reduce(a10, 100))
}


[new scheduled]:[@ctenv(setColor(a20, white, no, 100),L,0); color(white, a30, no, 100); color(blue, a40, no, 100); dropgoal(surround(5, 1, 700) : Infinite, priority 10), UpdateClock(2), adoptProhibition(color(yellow, a10), reduce(a10, 100))]
[After]:{	@ctenv(setColor(a20, white, no, 100),L,0);
	color(white, a30, no, 100);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	UpdateClock(2)
},
{	adoptProhibition(color(yellow, a10), reduce(a10, 100))
}


obligation to be adopted: useColor(yellow, 100) : 3 Jun 2015 15:45:45 GMT, priority 10
agent writes: Color [id=null, color=white, agent=a20, type=no, sanction=100, time=2015-06-03 16:29:06.05, clock=2]
org notification: Color [id=null, color=white, agent=a20, type=no, sanction=100, time=2015-06-03 16:29:06.05, clock=2]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	@ctenv(setColor(a30, white, no, 100),L,0);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	AdoptP(useColor(yellow, 100));
	aprohibition(useColor(yellow, 100) -> reduce(100), priority 0)
}


[new scheduled]:[@ctenv(setColor(a30, white, no, 100),L,0); color(blue, a40, no, 100); dropgoal(surround(5, 1, 700) : Infinite, priority 10), AdoptP(useColor(yellow, 100)); aprohibition(useColor(yellow, 100) -> reduce(100), priority 0)]
[After]:{	@ctenv(setColor(a30, white, no, 100),L,0);
	color(blue, a40, no, 100);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	AdoptP(useColor(yellow, 100));
	aprohibition(useColor(yellow, 100) -> reduce(100), priority 0)
}


agent writes: Color [id=null, color=white, agent=a30, type=no, sanction=100, time=2015-06-03 16:29:06.157, clock=2]
org notification: Color [id=null, color=white, agent=a30, type=no, sanction=100, time=2015-06-03 16:29:06.157, clock=2]
object notification: Prohibition [subject=a30, prohibition=[color(white, a30)], sanction=[reduce(a30, 100)], clock=2, time=2015-06-03 16:29:06.16]
[Planbase]:{	@ctenv(setColor(a40, blue, no, 100),L,0);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	aprohibition(useColor(yellow, 100) -> reduce(100), priority 0)
}


[new scheduled]:[@ctenv(setColor(a40, blue, no, 100),L,0); dropgoal(surround(5, 1, 700) : Infinite, priority 10), aprohibition(useColor(yellow, 100) -> reduce(100), priority 0)]
[After]:{	@ctenv(setColor(a40, blue, no, 100),L,0);
	dropgoal(surround(5, 1, 700) : Infinite, priority 10)
},
{	aprohibition(useColor(yellow, 100) -> reduce(100), priority 0)
}


agent writes: Color [id=null, color=blue, agent=a40, type=no, sanction=100, time=2015-06-03 16:29:06.271, clock=2]
org notification: Color [id=null, color=blue, agent=a40, type=no, sanction=100, time=2015-06-03 16:29:06.271, clock=2]
object notification: Prohibition [subject=a40, prohibition=[color(blue, a40)], sanction=[reduce(a40, 100)], clock=2, time=2015-06-03 16:29:06.273]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


Event processed adoptProhibition(color(blue, a40), reduce(a40, 100))
[Planbase]:{	adoptProhibition(color(blue, a40), reduce(a40, 100))
}


[new scheduled]:[adoptProhibition(color(blue, a40), reduce(a40, 100))]
[After]:{	adoptProhibition(color(blue, a40), reduce(a40, 100))
}


[Planbase]:{	AdoptP(useColor(blue, 100));
	aprohibition(useColor(blue, 100) -> reduce(100), priority 0)
}


[new scheduled]:[AdoptP(useColor(blue, 100)); aprohibition(useColor(blue, 100) -> reduce(100), priority 0)]
[After]:{	AdoptP(useColor(blue, 100));
	aprohibition(useColor(blue, 100) -> reduce(100), priority 0)
}


[Planbase]:{	aprohibition(useColor(blue, 100) -> reduce(100), priority 0)
}


[new scheduled]:[aprohibition(useColor(blue, 100) -> reduce(100), priority 0)]
[After]:{	aprohibition(useColor(blue, 100) -> reduce(100), priority 0)
}


[Planbase]:


[new scheduled]:[]
[After]:


org notification: Time [clock=3, time=2015-06-03 16:29:15.906]
object notification: Time [clock=3, time=2015-06-03 16:29:15.906]
object notification: Time [clock=3, time=2015-06-03 16:29:15.906]
object notification: Time [clock=3, time=2015-06-03 16:29:15.906]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


Event processed UpdateClock(3)
Event processed UpdateClock(3)
[Planbase]:{	UpdateClock(3)
}


[new scheduled]:[UpdateClock(3)]
[After]:{	UpdateClock(3)
}


[Planbase]:{	UpdateClock(3)
}


[new scheduled]:[UpdateClock(3)]
[After]:{	UpdateClock(3)
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


org notification: Time [clock=4, time=2015-06-03 16:29:25.907]
object notification: Time [clock=4, time=2015-06-03 16:29:25.907]
object notification: Time [clock=4, time=2015-06-03 16:29:25.907]
object notification: Time [clock=4, time=2015-06-03 16:29:25.907]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


Event processed UpdateClock(4)
Event processed UpdateClock(4)
[Planbase]:{	UpdateClock(4)
}


[new scheduled]:[UpdateClock(4)]
[After]:{	UpdateClock(4)
}


[Planbase]:{	UpdateClock(4)
}


[new scheduled]:[UpdateClock(4)]
[After]:{	UpdateClock(4)
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Time [clock=5, time=2015-06-03 16:29:35.91]
object notification: Time [clock=5, time=2015-06-03 16:29:35.91]
object notification: Time [clock=5, time=2015-06-03 16:29:35.91]
org notification: Time [clock=5, time=2015-06-03 16:29:35.91]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


Event processed UpdateClock(5)
Event processed UpdateClock(5)
[Planbase]:{	UpdateClock(5)
}


[new scheduled]:[UpdateClock(5)]
[After]:{	UpdateClock(5)
}


[Planbase]:{	UpdateClock(5)
}


[new scheduled]:[UpdateClock(5)]
[After]:{	UpdateClock(5)
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Time [clock=6, time=2015-06-03 16:29:45.912]
object notification: Time [clock=6, time=2015-06-03 16:29:45.912]
org notification: Time [clock=6, time=2015-06-03 16:29:45.912]
object notification: Time [clock=6, time=2015-06-03 16:29:45.912]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


Event processed UpdateClock(6)
Event processed UpdateClock(6)
[Planbase]:{	UpdateClock(6)
}


[new scheduled]:[UpdateClock(6)]
[After]:{	UpdateClock(6)
}


[Planbase]:{	UpdateClock(6)
}


[new scheduled]:[UpdateClock(6)]
[After]:{	UpdateClock(6)
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Time [clock=7, time=2015-06-03 16:29:55.915]
object notification: Time [clock=7, time=2015-06-03 16:29:55.915]
object notification: Time [clock=7, time=2015-06-03 16:29:55.915]
org notification: Time [clock=7, time=2015-06-03 16:29:55.915]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


Event processed UpdateClock(7)
Event processed UpdateClock(7)
[Planbase]:{	UpdateClock(7)
}


[new scheduled]:[UpdateClock(7)]
[After]:{	UpdateClock(7)
}


[Planbase]:{	UpdateClock(7)
}


[new scheduled]:[UpdateClock(7)]
[After]:{	UpdateClock(7)
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


org notification: Time [clock=8, time=2015-06-03 16:30:05.918]
object notification: Time [clock=8, time=2015-06-03 16:30:05.918]
object notification: Time [clock=8, time=2015-06-03 16:30:05.918]
object notification: Time [clock=8, time=2015-06-03 16:30:05.918]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


Event processed UpdateClock(8)
Event processed UpdateClock(8)
[Planbase]:{	UpdateClock(8)
}


[new scheduled]:[UpdateClock(8)]
[After]:{	UpdateClock(8)
}


[Planbase]:{	UpdateClock(8)
}


[new scheduled]:[UpdateClock(8)]
[After]:{	UpdateClock(8)
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


setPhases in ClientGameStatus, the current phase is Movement Phase
setPhases in ClientGameStatus, the current phase is Movement Phase
setPhases in ClientGameStatus, the current phase is Movement Phase
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@837a151
[CTAH] The created APLList : [phasechange]
[CTAH] Array of Terms: [Lapapl.data.Term;@3e120ba9
[CTAH] The created APLList : [phasechange]
[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	ReceivedEvent(phasechange)
}


[new scheduled]:[ReceivedEvent(phasechange)]
[After]:{	ReceivedEvent(phasechange)
}


[Planbase]:{	ReceivedEvent(phasechange)
}


[new scheduled]:[ReceivedEvent(phasechange)]
[After]:{	ReceivedEvent(phasechange)
}


[Planbase]:


[new scheduled]:[update]
[After]:{	update
}


[Planbase]:


[new scheduled]:[update]
[After]:{	update
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[GetPhase(movementphase); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[GetPhase(movementphase); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), findNextStep(neco, 700), B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100), findNextStep(neco, 700), B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	G(at(X, Y, V))
	then	{	B([A,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(event(phasechange)) then Updated, if G(at(X, Y, V)) then B([A,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(V3>700) then @ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	G(at(X, Y, V))
	then	{	B([A,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	G(at(X, Y, V))
	then	{	B([A,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(event(phasechange)) then Updated, if G(at(X, Y, V)) then B([A,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(V3>700) then @ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	if	G(at(X, Y, V))
	then	{	B([A,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	Updated
},
{	B([A,B]=[5,0]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[Updated, B([A,B]=[5,0]); if B(prohibition(useColor(Color2, V3))) then if B(V3>700) then @ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	Updated
},
{	B([A,B]=[5,0]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	Updated
},
{	B([A,B]=[5,2]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[Updated, B([A,B]=[5,2]); if B(prohibition(useColor(Color2, V3))) then if B(V3>700) then @ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	Updated
},
{	B([A,B]=[5,2]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 5, 0, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(V3>700) then @ctenv(moveStepToGoalTest(Color2, no, 5, 0, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 5, 0, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 5, 2, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 2, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(V3>700) then @ctenv(moveStepToGoalTest(Color2, no, 5, 2, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 5, 2, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 5, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 5, 2, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 2, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(100>700)
	then	{	@ctenv(moveStepToGoalTest(yellow, no, 5, 0, 8),L1,0)
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(100>700) then @ctenv(moveStepToGoalTest(yellow, no, 5, 0, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(100>700)
	then	{	@ctenv(moveStepToGoalTest(yellow, no, 5, 0, 8),L1,0)
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(100>700)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 5, 2, 8),L1,0)
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(100>700) then @ctenv(moveStepToGoalTest(blue, no, 5, 2, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 5, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(100>700)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 5, 2, 8),L1,0)
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 2, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, any, 5, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, any, 5, 2, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	@ctenv(moveStepToGoalTest(neco, any, 5, 2, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


a10[CTAH] going goal: 5,0 color: neco
a40[CTAH] going goal: 5,2 color: neco
object notification: Time [clock=9, time=2015-06-03 16:30:15.921]
org notification: Time [clock=9, time=2015-06-03 16:30:15.921]
object notification: Time [clock=9, time=2015-06-03 16:30:15.921]
object notification: Time [clock=9, time=2015-06-03 16:30:15.921]
a10[CTAH] paths: 1000
Need to wait 4 more seconds
a40[CTAH] paths: 1000
a40[CTAH] path: 0
a40[CTAH] path: Path: [6][2] [5][2]

a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] moveStepToGoalTest proposals: null
a40[CTAH] found a chip....: (R:5,C:2)
a40[CTAH] moveStepToGoalTest sent proposal for: [5,2,0,1080]
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscourseMessage
[MSG] Message is of type: basicproposal
[MSG] Message is for: 0
[MSG] i'm: 0
Received a proposal creating event
org notification: Proposal [id=1080, agent=a40, agent2=a10, clock=9, time=2015-06-03 16:30:21.362]
Event processed UpdateClock(9)
object notification: Obligation [subject=a10, obligation=[acceptRequest(1080)], sanction=[reduce(a10, 200)], deadline=14, time=2015-06-03 16:30:21.372, clock=9]
object notification: Obligation [subject=a10, obligation=[respondToRequest(1080)], sanction=[reduce(a10, 300)], deadline=14, time=2015-06-03 16:30:21.374, clock=9]
[Planbase]:{	B(clock(Clock));
	if	B(not 1080=no)
	then	{	NextStep(5, 2, 1080);
			SentProposal(1080, 0, open, Clock)
		}
	else	{	NextStep(5, 2)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	UpdateClock(9)
}


[new scheduled]:[B(clock(Clock)); if B(not 1080=no) then {NextStep(5, 2, 1080); SentProposal(1080, 0, open, Clock)} else NextStep(5, 2), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100), UpdateClock(9)]
[After]:{	B(clock(Clock));
	if	B(not 1080=no)
	then	{	NextStep(5, 2, 1080);
			SentProposal(1080, 0, open, Clock)
		}
	else	{	NextStep(5, 2)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	UpdateClock(9)
}


[Planbase]:{	if	B(not 1080=no)
	then	{	NextStep(5, 2, 1080);
			SentProposal(1080, 0, open, 8)
		}
	else	{	NextStep(5, 2)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(not 1080=no) then {NextStep(5, 2, 1080); SentProposal(1080, 0, open, 8)} else NextStep(5, 2), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(not 1080=no)
	then	{	NextStep(5, 2, 1080);
			SentProposal(1080, 0, open, 8)
		}
	else	{	NextStep(5, 2)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	NextStep(5, 2, 1080);
	SentProposal(1080, 0, open, 8)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[NextStep(5, 2, 1080); SentProposal(1080, 0, open, 8), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	NextStep(5, 2, 1080);
	SentProposal(1080, 0, open, 8)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	SentProposal(1080, 0, open, 8)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[SentProposal(1080, 0, open, 8), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	SentProposal(1080, 0, open, 8)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


a10[CTAH] path: 0
a10[CTAH] path: Path: [6][5] [6][4] [6][3] [5][3] [5][2] [5][1] [5][0]

a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] found a chip....: (R:6,C:4)
a10[CTAH] moveStepToGoalTest sent proposal for: [6,4,1,8702]
org notification: Proposal [id=8702, agent=a10, agent2=a20, clock=9, time=2015-06-03 16:30:23.509]
[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


Event processed UpdateClock(9)
Event processed @ctenv(functionToList(proposal(proposal, 3, 1080, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed adoptObligation(acceptRequest(1080), 14, reduce(a10, 200))
Event processed adoptObligation(respondToRequest(1080), 14, reduce(a10, 300))
[Planbase]:{	B(clock(Clock));
	if	B(not 8702=no)
	then	{	NextStep(6, 4, 8702);
			SentProposal(8702, 1, open, Clock)
		}
	else	{	NextStep(6, 4)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	UpdateClock(9)
},
{	@ctenv(functionToList(proposal(proposal, 3, 1080, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	adoptObligation(acceptRequest(1080), 14, reduce(a10, 200))
},
{	adoptObligation(respondToRequest(1080), 14, reduce(a10, 300))
}


[new scheduled]:[B(clock(Clock)); if B(not 8702=no) then {NextStep(6, 4, 8702); SentProposal(8702, 1, open, Clock)} else NextStep(6, 4), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), UpdateClock(9), @ctenv(functionToList(proposal(proposal, 3, 1080, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), adoptObligation(acceptRequest(1080), 14, reduce(a10, 200)), adoptObligation(respondToRequest(1080), 14, reduce(a10, 300))]
[After]:{	B(clock(Clock));
	if	B(not 8702=no)
	then	{	NextStep(6, 4, 8702);
			SentProposal(8702, 1, open, Clock)
		}
	else	{	NextStep(6, 4)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	UpdateClock(9)
},
{	@ctenv(functionToList(proposal(proposal, 3, 1080, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	adoptObligation(acceptRequest(1080), 14, reduce(a10, 200))
},
{	adoptObligation(respondToRequest(1080), 14, reduce(a10, 300))
}


[CTAH] Array of Terms: [Lapapl.data.Term;@4f5ace22
[CTAH] The created APLList : [proposal,3,1080,open]
[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(not 8702=no)
	then	{	NextStep(6, 4, 8702);
			SentProposal(8702, 1, open, 8)
		}
	else	{	NextStep(6, 4)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	if	B([actionresult([proposal,3,1080,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,3,1080,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	adoptz(acceptRequest(1080, 200) : 3 Jun 2015 15:47:03 GMT, priority 10)
},
{	adoptz(respondToRequest(1080, 300) : 3 Jun 2015 15:47:03 GMT, priority 10)
}


[new scheduled]:[if B(not 8702=no) then {NextStep(6, 4, 8702); SentProposal(8702, 1, open, 8)} else NextStep(6, 4), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), if B([actionresult([proposal,3,1080,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,3,1080,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), adoptz(acceptRequest(1080, 200) : 3 Jun 2015 15:47:03 GMT, priority 10), adoptz(respondToRequest(1080, 300) : 3 Jun 2015 15:47:03 GMT, priority 10)]
[After]:{	if	B(not 8702=no)
	then	{	NextStep(6, 4, 8702);
			SentProposal(8702, 1, open, 8)
		}
	else	{	NextStep(6, 4)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	if	B([actionresult([proposal,3,1080,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,3,1080,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	adoptz(acceptRequest(1080, 200) : 3 Jun 2015 15:47:03 GMT, priority 10)
},
{	adoptz(respondToRequest(1080, 300) : 3 Jun 2015 15:47:03 GMT, priority 10)
}


obligation to be adopted: acceptRequest(1080, 200) : 3 Jun 2015 15:47:03 GMT, priority 10
obligation to be adopted: respondToRequest(1080, 300) : 3 Jun 2015 15:47:03 GMT, priority 10
[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	NextStep(6, 4, 8702);
	SentProposal(8702, 1, open, 8)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	if	B([actionresult([proposal,3,1080,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[new scheduled]:[NextStep(6, 4, 8702); SentProposal(8702, 1, open, 8), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), if B([actionresult([proposal,3,1080,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	NextStep(6, 4, 8702);
	SentProposal(8702, 1, open, 8)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	if	B([actionresult([proposal,3,1080,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	SentProposal(8702, 1, open, 8)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(3, 1080, open)
		}
}


[new scheduled]:[SentProposal(8702, 1, open, 8), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), if B(proposal=proposal) then ReceivedProposal(3, 1080, open)]
[After]:{	SentProposal(8702, 1, open, 8)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(3, 1080, open)
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	ReceivedProposal(3, 1080, open)
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), ReceivedProposal(3, 1080, open)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	ReceivedProposal(3, 1080, open)
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(not scoreAfterExchange(1080, Score)) then getScoreAfterExchange(1080); B(scoreAfterExchange(1080, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>200) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<200) then B(Answer=reject); sendResponse(1080, Answer), if B(not scoreAfterExchange(1080, Score)) then getScoreAfterExchange(1080); B(scoreAfterExchange(1080, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>300) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<300) then B(Answer=reject); sendResponse(1080, Answer), if G(acceptRequests(1080, V2)) then skip else if B(not receivedP(3, 1080, closed(A))) then adoptz(respondToRequest(1080, 50) : Infinite, priority 10), B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	G(acceptRequests(1080, V2))
	then	{	skip
		}
	else	{	if	B(not receivedP(3, 1080, closed(A)))
			then	{	adoptz(respondToRequest(1080, 50) : Infinite, priority 10)
				}
		}
},
{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(not scoreAfterExchange(1080, Score))
	then	{	getScoreAfterExchange(1080)
		};
	B(scoreAfterExchange(1080, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	if	B(not scoreAfterExchange(1080, Score))
	then	{	getScoreAfterExchange(1080)
		};
	B(scoreAfterExchange(1080, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(not receivedP(3, 1080, closed(A)))
	then	{	adoptz(respondToRequest(1080, 50) : Infinite, priority 10)
		}
},
{	if	B(9>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	getScoreAfterExchange(1080);
	B(scoreAfterExchange(1080, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	getScoreAfterExchange(1080);
	B(scoreAfterExchange(1080, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(not receivedP(3, 1080, closed(A))) then adoptz(respondToRequest(1080, 50) : Infinite, priority 10), if B(9>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, getScoreAfterExchange(1080); B(scoreAfterExchange(1080, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>300) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<300) then B(Answer=reject); sendResponse(1080, Answer), getScoreAfterExchange(1080); B(scoreAfterExchange(1080, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>200) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<200) then B(Answer=reject); sendResponse(1080, Answer), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(not receivedP(3, 1080, closed(A)))
	then	{	adoptz(respondToRequest(1080, 50) : Infinite, priority 10)
		}
},
{	if	B(9>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	getScoreAfterExchange(1080);
	B(scoreAfterExchange(1080, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	getScoreAfterExchange(1080);
	B(scoreAfterExchange(1080, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	adoptz(respondToRequest(1080, 50) : Infinite, priority 10)
},
{	GetScoreAfterExchange(1080, yes);
	B(scoreAfterExchange(1080, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	GetScoreAfterExchange(1080, yes);
	B(scoreAfterExchange(1080, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), adoptz(respondToRequest(1080, 50) : Infinite, priority 10), GetScoreAfterExchange(1080, yes); B(scoreAfterExchange(1080, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>300) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<300) then B(Answer=reject); sendResponse(1080, Answer), GetScoreAfterExchange(1080, yes); B(scoreAfterExchange(1080, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>200) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<200) then B(Answer=reject); sendResponse(1080, Answer), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	adoptz(respondToRequest(1080, 50) : Infinite, priority 10)
},
{	findNextStep(neco, 700)
},
{	GetScoreAfterExchange(1080, yes);
	B(scoreAfterExchange(1080, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	GetScoreAfterExchange(1080, yes);
	B(scoreAfterExchange(1080, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


obligation to be adopted: respondToRequest(1080, 50) : Infinite, priority 10
[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	B(scoreAfterExchange(1080, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	B(scoreAfterExchange(1080, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(not scoreAfterExchange(1080, Score)) then getScoreAfterExchange(1080); B(scoreAfterExchange(1080, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>50) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<50) then B(Answer=reject); sendResponse(1080, Answer), if G(acceptRequests(1080, V2)) then skip else if B(not receivedP(3, 1080, closed(A))) then adoptz(respondToRequest(1080, 50) : Infinite, priority 10), B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, B(scoreAfterExchange(1080, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>300) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<300) then B(Answer=reject); sendResponse(1080, Answer), B(scoreAfterExchange(1080, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>200) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<200) then B(Answer=reject); sendResponse(1080, Answer), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(not scoreAfterExchange(1080, Score))
	then	{	getScoreAfterExchange(1080)
		};
	B(scoreAfterExchange(1080, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>50)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	if	G(acceptRequests(1080, V2))
	then	{	skip
		}
	else	{	if	B(not receivedP(3, 1080, closed(A)))
			then	{	adoptz(respondToRequest(1080, 50) : Infinite, priority 10)
				}
		}
},
{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	B(scoreAfterExchange(1080, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	B(scoreAfterExchange(1080, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(scoreAfterExchange(1080, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>50)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	if	B(not receivedP(3, 1080, closed(A)))
	then	{	adoptz(respondToRequest(1080, 50) : Infinite, priority 10)
		}
},
{	if	B(9>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	B(Answer=accept);
	if	B(yes=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(yes>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	B(Answer=accept);
	if	B(yes=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(yes>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(scoreAfterExchange(1080, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>50) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<50) then B(Answer=reject); sendResponse(1080, Answer), if B(not receivedP(3, 1080, closed(A))) then adoptz(respondToRequest(1080, 50) : Infinite, priority 10), if B(9>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, B(Answer=accept); if B(yes=yes) then B(Answer=accept) else if B(yes=no) then B(Answer=reject) else if B(yes>300) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<300) then B(Answer=reject); sendResponse(1080, Answer), B(Answer=accept); if B(yes=yes) then B(Answer=accept) else if B(yes=no) then B(Answer=reject) else if B(yes>200) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<200) then B(Answer=reject); sendResponse(1080, Answer), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(scoreAfterExchange(1080, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>50)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	if	B(not receivedP(3, 1080, closed(A)))
	then	{	adoptz(respondToRequest(1080, 50) : Infinite, priority 10)
		}
},
{	if	B(9>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	B(Answer=accept);
	if	B(yes=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(yes>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	B(Answer=accept);
	if	B(yes=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(yes>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	B(Answer=accept);
	if	B(yes=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(yes>50)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	adoptz(respondToRequest(1080, 50) : Infinite, priority 10)
},
{	if	B(yes=yes)
	then	{	B(accept=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(accept=reject)
				}
			else	{	if	B(yes>300)
					then	{	B(accept=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(accept=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, accept)
},
{	if	B(yes=yes)
	then	{	B(accept=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(accept=reject)
				}
			else	{	if	B(yes>200)
					then	{	B(accept=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(accept=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, accept)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), B(Answer=accept); if B(yes=yes) then B(Answer=accept) else if B(yes=no) then B(Answer=reject) else if B(yes>50) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<50) then B(Answer=reject); sendResponse(1080, Answer), adoptz(respondToRequest(1080, 50) : Infinite, priority 10), if B(yes=yes) then B(accept=accept) else if B(yes=no) then B(accept=reject) else if B(yes>300) then B(accept=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<300) then B(accept=reject); sendResponse(1080, accept), if B(yes=yes) then B(accept=accept) else if B(yes=no) then B(accept=reject) else if B(yes>200) then B(accept=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<200) then B(accept=reject); sendResponse(1080, accept), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(Answer=accept);
	if	B(yes=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(yes>50)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, Answer)
},
{	adoptz(respondToRequest(1080, 50) : Infinite, priority 10)
},
{	findNextStep(neco, 700)
},
{	if	B(yes=yes)
	then	{	B(accept=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(accept=reject)
				}
			else	{	if	B(yes>300)
					then	{	B(accept=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(accept=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, accept)
},
{	if	B(yes=yes)
	then	{	B(accept=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(accept=reject)
				}
			else	{	if	B(yes>200)
					then	{	B(accept=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(accept=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, accept)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


obligation to be adopted: respondToRequest(1080, 50) : Infinite, priority 10
[Planbase]:{	if	B(yes=yes)
	then	{	B(accept=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(accept=reject)
				}
			else	{	if	B(yes>50)
					then	{	B(accept=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(accept=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, accept)
},
{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	B(accept=accept);
	sendResponse(1080, accept)
},
{	B(accept=accept);
	sendResponse(1080, accept)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if G(acceptRequests(1080, V2)) then skip else if B(not receivedP(3, 1080, closed(A))) then adoptz(respondToRequest(1080, 50) : Infinite, priority 10), if B(yes=yes) then B(accept=accept) else if B(yes=no) then B(accept=reject) else if B(yes>50) then B(accept=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<50) then B(accept=reject); sendResponse(1080, accept), B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, B(accept=accept); sendResponse(1080, accept), B(accept=accept); sendResponse(1080, accept), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	G(acceptRequests(1080, V2))
	then	{	skip
		}
	else	{	if	B(not receivedP(3, 1080, closed(A)))
			then	{	adoptz(respondToRequest(1080, 50) : Infinite, priority 10)
				}
		}
},
{	if	B(yes=yes)
	then	{	B(accept=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(accept=reject)
				}
			else	{	if	B(yes>50)
					then	{	B(accept=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(accept=reject)
										}
								}
						}
				}
		};
	sendResponse(1080, accept)
},
{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	B(accept=accept);
	sendResponse(1080, accept)
},
{	B(accept=accept);
	sendResponse(1080, accept)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	if	B(not receivedP(3, 1080, closed(A)))
	then	{	adoptz(respondToRequest(1080, 50) : Infinite, priority 10)
		}
},
{	B(accept=accept);
	sendResponse(1080, accept)
},
{	if	B(9>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	sendResponse(1080, accept)
},
{	sendResponse(1080, accept)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(not receivedP(3, 1080, closed(A))) then adoptz(respondToRequest(1080, 50) : Infinite, priority 10), B(accept=accept); sendResponse(1080, accept), if B(9>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, sendResponse(1080, accept), sendResponse(1080, accept), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(not receivedP(3, 1080, closed(A)))
	then	{	adoptz(respondToRequest(1080, 50) : Infinite, priority 10)
		}
},
{	B(accept=accept);
	sendResponse(1080, accept)
},
{	if	B(9>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	sendResponse(1080, accept)
},
{	sendResponse(1080, accept)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[Planbase]:{	adoptz(respondToRequest(1080, 50) : Infinite, priority 10)
},
{	sendResponse(1080, accept)
},
{	@ctenv(sendResponse(1080, accept),L1,0);
	SentResponse(accept, 1080)
},
{	@ctenv(sendResponse(1080, accept),L1,0);
	SentResponse(accept, 1080)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), adoptz(respondToRequest(1080, 50) : Infinite, priority 10), sendResponse(1080, accept), @ctenv(sendResponse(1080, accept),L1,0); SentResponse(accept, 1080), @ctenv(sendResponse(1080, accept),L1,0); SentResponse(accept, 1080), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	adoptz(respondToRequest(1080, 50) : Infinite, priority 10)
},
{	sendResponse(1080, accept)
},
{	findNextStep(neco, 700)
},
{	@ctenv(sendResponse(1080, accept),L1,0);
	SentResponse(accept, 1080)
},
{	@ctenv(sendResponse(1080, accept),L1,0);
	SentResponse(accept, 1080)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
}


a10[CTAH] sent response: Discourse Message...
From PerGameId: 0.
To PerGameId: 3.

a10[CTAH] sent response: Discourse Message...
From PerGameId: 0.
To PerGameId: 3.

obligation to be adopted: respondToRequest(1080, 50) : Infinite, priority 10
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 3
[MSG] i'm: 3
AGENT : got response to offer
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 3
[MSG] i'm: 3
AGENT : got response to offer
org notification: Response [id=1080, response=accepted, clock=9, time=2015-06-03 16:30:24.976]
org notification: Response [id=1080, response=accepted, clock=9, time=2015-06-03 16:30:24.998]
Event processed @ctenv(functionToList(message(response, 1080, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed @ctenv(functionToList(message(response, 1080, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	@ctenv(sendResponse(1080, accept),L1,0);
	SentResponse(accept, 1080)
},
{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[@ctenv(sendResponse(1080, accept),L1,0); SentResponse(accept, 1080), B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	@ctenv(sendResponse(1080, accept),L1,0);
	SentResponse(accept, 1080)
},
{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	@ctenv(functionToList(message(response, 1080, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	@ctenv(functionToList(message(response, 1080, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100), @ctenv(functionToList(message(response, 1080, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), @ctenv(functionToList(message(response, 1080, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	@ctenv(functionToList(message(response, 1080, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	@ctenv(functionToList(message(response, 1080, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


a10[CTAH] sent response: Discourse Message...
From PerGameId: 0.
To PerGameId: 3.

Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 3
[MSG] i'm: 3
AGENT : got response to offer
[CTAH] Array of Terms: [Lapapl.data.Term;@763080f5
[CTAH] The created APLList : [response,1080,accept]
[CTAH] Array of Terms: [Lapapl.data.Term;@6a629171
[CTAH] The created APLList : [response,1080,accept]
org notification: Response [id=1080, response=accepted, clock=9, time=2015-06-03 16:30:25.114]
Event processed @ctenv(functionToList(message(response, 1080, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedResponse(accept, 1080)
		}
},
{	if	B(response=response)
	then	{	ReceivedResponse(accept, 1080)
		}
},
{	@ctenv(functionToList(message(response, 1080, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100), if B(response=response) then ReceivedResponse(accept, 1080), if B(response=response) then ReceivedResponse(accept, 1080), @ctenv(functionToList(message(response, 1080, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedResponse(accept, 1080)
		}
},
{	if	B(response=response)
	then	{	ReceivedResponse(accept, 1080)
		}
},
{	@ctenv(functionToList(message(response, 1080, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@64bd19e6
[CTAH] The created APLList : [response,1080,accept]
[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	if	B(response=response)
	then	{	ReceivedResponse(accept, 1080)
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), if B(response=response) then ReceivedResponse(accept, 1080)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	if	B(response=response)
	then	{	ReceivedResponse(accept, 1080)
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(5, 2, 1080); ReceivedResponse(noresponse, 1080)}, if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(5, 2, 1080);
			ReceivedResponse(noresponse, 1080)
		}
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoal(neco, 5, 2),L2,0);
	if	B(L2=[actionresult([5,2])])
	then	{	B(clock(Clock));
			UpdatePosition(5, 2, Clock)
		};
	NoNextStep(5, 2, 1080)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[@ctenv(moveStepToGoal(neco, 5, 2),L2,0); if B(L2=[actionresult([5,2])]) then {B(clock(Clock)); UpdatePosition(5, 2, Clock)}; NoNextStep(5, 2, 1080), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	@ctenv(moveStepToGoal(neco, 5, 2),L2,0);
	if	B(L2=[actionresult([5,2])])
	then	{	B(clock(Clock));
			UpdatePosition(5, 2, Clock)
		};
	NoNextStep(5, 2, 1080)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


a40[CTAH] moveStepToGoal returns: no
org notification: Position [subject=a40, id=null, cell=Cell [x=5, y=2], time=2015-06-03 16:30:25.707, clock=9]
object notification: Position [subject=a40, id=null, cell=Cell [x=5, y=2], time=2015-06-03 16:30:25.707, clock=9]
object notification: Obligation [subject=a40, obligation=[makeMove(5, 2, a40)], sanction=[reduce(a40, 300)], deadline=24, time=2015-06-03 16:30:25.731, clock=9]
[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


Event processed UpdatePosition(5, 2, 9)
Event processed adoptObligation(makeMove(5, 2, a40), 24, reduce(a40, 300))
[Planbase]:{	NoNextStep(5, 2, 1080)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdatePosition(5, 2, 9)
},
{	adoptObligation(makeMove(5, 2, a40), 24, reduce(a40, 300))
}


[new scheduled]:[NoNextStep(5, 2, 1080), if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), UpdatePosition(5, 2, 9), adoptObligation(makeMove(5, 2, a40), 24, reduce(a40, 300))]
[After]:{	NoNextStep(5, 2, 1080)
},
{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdatePosition(5, 2, 9)
},
{	adoptObligation(makeMove(5, 2, a40), 24, reduce(a40, 300))
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	adoptz(makeMove(5, 2, 300) : 3 Jun 2015 15:47:05 GMT, priority 10)
}


[new scheduled]:[if B(tile(yellow, 2, 6)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), adoptz(makeMove(5, 2, 300) : 3 Jun 2015 15:47:05 GMT, priority 10)]
[After]:{	if	B(tile(yellow, 2, 6))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	adoptz(makeMove(5, 2, 300) : 3 Jun 2015 15:47:05 GMT, priority 10)
}


obligation to be adopted: makeMove(5, 2, 300) : 3 Jun 2015 15:47:05 GMT, priority 10
org notification: Time [clock=10, time=2015-06-03 16:30:25.923]
object notification: Time [clock=10, time=2015-06-03 16:30:25.923]
object notification: Time [clock=10, time=2015-06-03 16:30:25.923]
object notification: Time [clock=10, time=2015-06-03 16:30:25.923]
[Planbase]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(9>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(9>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(yellow, V2)))
	then	{	if	B(V2>100)
			then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
				}
		}
	else	{	findNextStep(yellow, 100)
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	if	B(prohibition(useColor(yellow, V2)))
	then	{	if	B(V2>100)
			then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
				}
		}
	else	{	findNextStep(yellow, 100)
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


Event processed UpdateClock(10)
Event processed UpdateClock(10)
[Planbase]:{	if	B(9>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	UpdateClock(10)
}


[new scheduled]:[if B(9>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), UpdateClock(10)]
[After]:{	if	B(9>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	UpdateClock(10)
}


[Planbase]:{	findNextStep(yellow, 100)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(10)
}


[new scheduled]:[findNextStep(yellow, 100), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), UpdateClock(10)]
[After]:{	findNextStep(yellow, 100)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(10)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A,B]=[X,Y])
		}
	else	{	if	B(tile(yellow, X, Y))
			then	{	B([A,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>100)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(yellow, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(yellow, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[if G(at(X, Y, V)) then B([A,B]=[X,Y]) else if B(tile(yellow, X, Y)) then B([A,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(V3>100) then @ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(yellow, any, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(yellow, any, A, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A,B]=[X,Y])
		}
	else	{	if	B(tile(yellow, X, Y))
			then	{	B([A,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>100)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(yellow, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(yellow, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(yellow, X, Y))
	then	{	B([A,B]=[X,Y])
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>100)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(yellow, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(yellow, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[if B(tile(yellow, X, Y)) then B([A,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(V3>100) then @ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(yellow, any, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(yellow, any, A, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	if	B(tile(yellow, X, Y))
	then	{	B([A,B]=[X,Y])
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>100)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(yellow, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(yellow, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B([A,B]=[1,4]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>100)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(yellow, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(yellow, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[B([A,B]=[1,4]); if B(prohibition(useColor(Color2, V3))) then if B(V3>100) then @ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(yellow, any, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(yellow, any, A, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	B([A,B]=[1,4]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>100)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(yellow, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(yellow, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>100)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 1, 4, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(yellow, any, 1, 4, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(yellow, any, 1, 4, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(V3>100) then @ctenv(moveStepToGoalTest(Color2, no, 1, 4, 8),L1,0) else @ctenv(moveStepToGoalTest(yellow, any, 1, 4, 8),L1,0) else @ctenv(moveStepToGoalTest(yellow, any, 1, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>100)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 1, 4, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(yellow, any, 1, 4, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(yellow, any, 1, 4, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(100>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 1, 4, 8),L1,0)
		}
	else	{	@ctenv(moveStepToGoalTest(yellow, any, 1, 4, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[if B(100>100) then @ctenv(moveStepToGoalTest(blue, no, 1, 4, 8),L1,0) else @ctenv(moveStepToGoalTest(yellow, any, 1, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	if	B(100>100)
	then	{	@ctenv(moveStepToGoalTest(blue, no, 1, 4, 8),L1,0)
		}
	else	{	@ctenv(moveStepToGoalTest(yellow, any, 1, 4, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	@ctenv(moveStepToGoalTest(yellow, any, 1, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[@ctenv(moveStepToGoalTest(yellow, any, 1, 4, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	@ctenv(moveStepToGoalTest(yellow, any, 1, 4, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


a40[CTAH] going goal: 1,4 color: yellow
[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscourseMessage
[MSG] Message is of type: basicproposal
[MSG] Message is for: 3
[MSG] i'm: 3
Received a proposal creating event
org notification: Proposal [id=7276, agent=a20, agent2=a40, clock=10, time=2015-06-03 16:30:27.328]
object notification: Obligation [subject=a40, obligation=[acceptRequest(7276)], sanction=[reduce(a40, 200)], deadline=15, time=2015-06-03 16:30:27.338, clock=10]
object notification: Obligation [subject=a40, obligation=[respondToRequest(7276)], sanction=[reduce(a40, 300)], deadline=15, time=2015-06-03 16:30:27.34, clock=10]
[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


a40[CTAH] paths: 1000
a40[CTAH] path: 0
a40[CTAH] path: Path: [5][2] [4][2] [3][2] [2][2] [2][3] [1][3] [1][4]

a40[CTAH] moveStepToGoalTest returns I have chip: [4,2,no,no]
[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


Event processed @ctenv(functionToList(proposal(proposal, 1, 7276, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed adoptObligation(acceptRequest(7276), 15, reduce(a40, 200))
Event processed adoptObligation(respondToRequest(7276), 15, reduce(a40, 300))
[Planbase]:{	B(clock(Clock));
	if	B(not no=no)
	then	{	NextStep(4, 2, no);
			SentProposal(no, no, open, Clock)
		}
	else	{	NextStep(4, 2)
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	@ctenv(functionToList(proposal(proposal, 1, 7276, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	adoptObligation(acceptRequest(7276), 15, reduce(a40, 200))
},
{	adoptObligation(respondToRequest(7276), 15, reduce(a40, 300))
}


[new scheduled]:[B(clock(Clock)); if B(not no=no) then {NextStep(4, 2, no); SentProposal(no, no, open, Clock)} else NextStep(4, 2), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), @ctenv(functionToList(proposal(proposal, 1, 7276, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), adoptObligation(acceptRequest(7276), 15, reduce(a40, 200)), adoptObligation(respondToRequest(7276), 15, reduce(a40, 300))]
[After]:{	B(clock(Clock));
	if	B(not no=no)
	then	{	NextStep(4, 2, no);
			SentProposal(no, no, open, Clock)
		}
	else	{	NextStep(4, 2)
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	@ctenv(functionToList(proposal(proposal, 1, 7276, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	adoptObligation(acceptRequest(7276), 15, reduce(a40, 200))
},
{	adoptObligation(respondToRequest(7276), 15, reduce(a40, 300))
}


[CTAH] Array of Terms: [Lapapl.data.Term;@761f8190
[CTAH] The created APLList : [proposal,1,7276,open]
[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(not no=no)
	then	{	NextStep(4, 2, no);
			SentProposal(no, no, open, 10)
		}
	else	{	NextStep(4, 2)
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	if	B([actionresult([proposal,1,7276,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,1,7276,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	adoptz(acceptRequest(7276, 200) : 3 Jun 2015 15:47:11 GMT, priority 10)
},
{	adoptz(respondToRequest(7276, 300) : 3 Jun 2015 15:47:11 GMT, priority 10)
}


[new scheduled]:[if B(not no=no) then {NextStep(4, 2, no); SentProposal(no, no, open, 10)} else NextStep(4, 2), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), if B([actionresult([proposal,1,7276,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,1,7276,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), adoptz(acceptRequest(7276, 200) : 3 Jun 2015 15:47:11 GMT, priority 10), adoptz(respondToRequest(7276, 300) : 3 Jun 2015 15:47:11 GMT, priority 10)]
[After]:{	if	B(not no=no)
	then	{	NextStep(4, 2, no);
			SentProposal(no, no, open, 10)
		}
	else	{	NextStep(4, 2)
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	if	B([actionresult([proposal,1,7276,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,1,7276,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	adoptz(acceptRequest(7276, 200) : 3 Jun 2015 15:47:11 GMT, priority 10)
},
{	adoptz(respondToRequest(7276, 300) : 3 Jun 2015 15:47:11 GMT, priority 10)
}


obligation to be adopted: acceptRequest(7276, 200) : 3 Jun 2015 15:47:11 GMT, priority 10
obligation to be adopted: respondToRequest(7276, 300) : 3 Jun 2015 15:47:11 GMT, priority 10
[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	NextStep(4, 2)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	if	B([actionresult([proposal,1,7276,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[new scheduled]:[NextStep(4, 2), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), if B([actionresult([proposal,1,7276,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	NextStep(4, 2)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	if	B([actionresult([proposal,1,7276,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(1, 7276, open)
		}
}


[new scheduled]:[if B(tile(yellow, 5, 2)) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), if B(proposal=proposal) then ReceivedProposal(1, 7276, open)]
[After]:{	if	B(tile(yellow, 5, 2))
	then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(yellow, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(yellow, 100)
				}
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(1, 7276, open)
		}
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(prohibition(useColor(yellow, V2)))
	then	{	if	B(V2>100)
			then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
				}
		}
	else	{	findNextStep(yellow, 100)
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedProposal(1, 7276, open)
}


[new scheduled]:[if B(prohibition(useColor(yellow, V2))) then if B(V2>100) then dropgoal(useColor(yellow, 100) : Infinite, priority 10) else findNextStep(yellow, 100), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), ReceivedProposal(1, 7276, open)]
[After]:{	if	B(prohibition(useColor(yellow, V2)))
	then	{	if	B(V2>100)
			then	{	dropgoal(useColor(yellow, 100) : Infinite, priority 10)
				}
		}
	else	{	findNextStep(yellow, 100)
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedProposal(1, 7276, open)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	findNextStep(yellow, 100)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[if B(not scoreAfterExchange(7276, Score)) then getScoreAfterExchange(7276); B(scoreAfterExchange(7276, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>200) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<200) then B(Answer=reject); sendResponse(7276, Answer), if B(not scoreAfterExchange(7276, Score)) then getScoreAfterExchange(7276); B(scoreAfterExchange(7276, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>300) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<300) then B(Answer=reject); sendResponse(7276, Answer), if G(acceptRequests(7276, V2)) then skip else if B(not receivedP(1, 7276, closed(A))) then adoptz(respondToRequest(7276, 50) : Infinite, priority 10), findNextStep(yellow, 100), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	if	G(acceptRequests(7276, V2))
	then	{	skip
		}
	else	{	if	B(not receivedP(1, 7276, closed(A)))
			then	{	adoptz(respondToRequest(7276, 50) : Infinite, priority 10)
				}
		}
},
{	if	B(not scoreAfterExchange(7276, Score))
	then	{	getScoreAfterExchange(7276)
		};
	B(scoreAfterExchange(7276, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	if	B(not scoreAfterExchange(7276, Score))
	then	{	getScoreAfterExchange(7276)
		};
	B(scoreAfterExchange(7276, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	findNextStep(yellow, 100)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(not receivedP(1, 7276, closed(A)))
	then	{	adoptz(respondToRequest(7276, 50) : Infinite, priority 10)
		}
},
{	getScoreAfterExchange(7276);
	B(scoreAfterExchange(7276, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	getScoreAfterExchange(7276);
	B(scoreAfterExchange(7276, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	@ctenv(moveStepToGoal(yellow, 4, 2),L2,0);
	if	B(L2=[actionresult([4,2])])
	then	{	B(clock(Clock));
			UpdatePosition(4, 2, Clock)
		};
	NoNextStep(4, 2)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[if B(not receivedP(1, 7276, closed(A))) then adoptz(respondToRequest(7276, 50) : Infinite, priority 10), getScoreAfterExchange(7276); B(scoreAfterExchange(7276, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>300) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<300) then B(Answer=reject); sendResponse(7276, Answer), getScoreAfterExchange(7276); B(scoreAfterExchange(7276, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>200) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<200) then B(Answer=reject); sendResponse(7276, Answer), @ctenv(moveStepToGoal(yellow, 4, 2),L2,0); if B(L2=[actionresult([4,2])]) then {B(clock(Clock)); UpdatePosition(4, 2, Clock)}; NoNextStep(4, 2), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	if	B(not receivedP(1, 7276, closed(A)))
	then	{	adoptz(respondToRequest(7276, 50) : Infinite, priority 10)
		}
},
{	getScoreAfterExchange(7276);
	B(scoreAfterExchange(7276, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	getScoreAfterExchange(7276);
	B(scoreAfterExchange(7276, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	@ctenv(moveStepToGoal(yellow, 4, 2),L2,0);
	if	B(L2=[actionresult([4,2])])
	then	{	B(clock(Clock));
			UpdatePosition(4, 2, Clock)
		};
	NoNextStep(4, 2)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


a40[CTAH] moveStepToGoal returns: no
org notification: Position [subject=a40, id=null, cell=Cell [x=4, y=2], time=2015-06-03 16:30:32.063, clock=10]
object notification: Position [subject=a40, id=null, cell=Cell [x=4, y=2], time=2015-06-03 16:30:32.063, clock=10]
Event processed UpdatePosition(4, 2, 10)
[Planbase]:{	adoptz(respondToRequest(7276, 50) : Infinite, priority 10)
},
{	GetScoreAfterExchange(7276, yes);
	B(scoreAfterExchange(7276, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	GetScoreAfterExchange(7276, yes);
	B(scoreAfterExchange(7276, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	NoNextStep(4, 2)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdatePosition(4, 2, 10)
}


[new scheduled]:[adoptz(respondToRequest(7276, 50) : Infinite, priority 10), GetScoreAfterExchange(7276, yes); B(scoreAfterExchange(7276, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>300) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<300) then B(Answer=reject); sendResponse(7276, Answer), GetScoreAfterExchange(7276, yes); B(scoreAfterExchange(7276, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>200) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<200) then B(Answer=reject); sendResponse(7276, Answer), NoNextStep(4, 2), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), UpdatePosition(4, 2, 10)]
[After]:{	adoptz(respondToRequest(7276, 50) : Infinite, priority 10)
},
{	GetScoreAfterExchange(7276, yes);
	B(scoreAfterExchange(7276, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	GetScoreAfterExchange(7276, yes);
	B(scoreAfterExchange(7276, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	NoNextStep(4, 2)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdatePosition(4, 2, 10)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


obligation to be adopted: respondToRequest(7276, 50) : Infinite, priority 10
[Planbase]:{	B(scoreAfterExchange(7276, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	B(scoreAfterExchange(7276, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[if B(not scoreAfterExchange(7276, Score)) then getScoreAfterExchange(7276); B(scoreAfterExchange(7276, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>50) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<50) then B(Answer=reject); sendResponse(7276, Answer), if G(acceptRequests(7276, V2)) then skip else if B(not receivedP(1, 7276, closed(A))) then adoptz(respondToRequest(7276, 50) : Infinite, priority 10), B(scoreAfterExchange(7276, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>300) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<300) then B(Answer=reject); sendResponse(7276, Answer), B(scoreAfterExchange(7276, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>200) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<200) then B(Answer=reject); sendResponse(7276, Answer), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	if	B(not scoreAfterExchange(7276, Score))
	then	{	getScoreAfterExchange(7276)
		};
	B(scoreAfterExchange(7276, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>50)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	if	G(acceptRequests(7276, V2))
	then	{	skip
		}
	else	{	if	B(not receivedP(1, 7276, closed(A)))
			then	{	adoptz(respondToRequest(7276, 50) : Infinite, priority 10)
				}
		}
},
{	B(scoreAfterExchange(7276, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	B(scoreAfterExchange(7276, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(scoreAfterExchange(7276, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>50)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	if	B(not receivedP(1, 7276, closed(A)))
	then	{	adoptz(respondToRequest(7276, 50) : Infinite, priority 10)
		}
},
{	B(Answer=accept);
	if	B(yes=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(yes>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	B(Answer=accept);
	if	B(yes=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(yes>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[B(scoreAfterExchange(7276, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>50) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<50) then B(Answer=reject); sendResponse(7276, Answer), if B(not receivedP(1, 7276, closed(A))) then adoptz(respondToRequest(7276, 50) : Infinite, priority 10), B(Answer=accept); if B(yes=yes) then B(Answer=accept) else if B(yes=no) then B(Answer=reject) else if B(yes>300) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<300) then B(Answer=reject); sendResponse(7276, Answer), B(Answer=accept); if B(yes=yes) then B(Answer=accept) else if B(yes=no) then B(Answer=reject) else if B(yes>200) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<200) then B(Answer=reject); sendResponse(7276, Answer), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	B(scoreAfterExchange(7276, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>50)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	if	B(not receivedP(1, 7276, closed(A)))
	then	{	adoptz(respondToRequest(7276, 50) : Infinite, priority 10)
		}
},
{	B(Answer=accept);
	if	B(yes=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(yes>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	B(Answer=accept);
	if	B(yes=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(yes>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	B(Answer=accept);
	if	B(yes=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(yes>50)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	adoptz(respondToRequest(7276, 50) : Infinite, priority 10)
},
{	if	B(yes=yes)
	then	{	B(accept=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(accept=reject)
				}
			else	{	if	B(yes>300)
					then	{	B(accept=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(accept=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, accept)
},
{	if	B(yes=yes)
	then	{	B(accept=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(accept=reject)
				}
			else	{	if	B(yes>200)
					then	{	B(accept=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(accept=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, accept)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[B(Answer=accept); if B(yes=yes) then B(Answer=accept) else if B(yes=no) then B(Answer=reject) else if B(yes>50) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<50) then B(Answer=reject); sendResponse(7276, Answer), adoptz(respondToRequest(7276, 50) : Infinite, priority 10), if B(yes=yes) then B(accept=accept) else if B(yes=no) then B(accept=reject) else if B(yes>300) then B(accept=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<300) then B(accept=reject); sendResponse(7276, accept), if B(yes=yes) then B(accept=accept) else if B(yes=no) then B(accept=reject) else if B(yes>200) then B(accept=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<200) then B(accept=reject); sendResponse(7276, accept), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	B(Answer=accept);
	if	B(yes=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(yes>50)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, Answer)
},
{	adoptz(respondToRequest(7276, 50) : Infinite, priority 10)
},
{	if	B(yes=yes)
	then	{	B(accept=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(accept=reject)
				}
			else	{	if	B(yes>300)
					then	{	B(accept=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(accept=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, accept)
},
{	if	B(yes=yes)
	then	{	B(accept=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(accept=reject)
				}
			else	{	if	B(yes>200)
					then	{	B(accept=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(accept=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, accept)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


obligation to be adopted: respondToRequest(7276, 50) : Infinite, priority 10
[Planbase]:{	if	B(yes=yes)
	then	{	B(accept=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(accept=reject)
				}
			else	{	if	B(yes>50)
					then	{	B(accept=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(accept=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, accept)
},
{	B(accept=accept);
	sendResponse(7276, accept)
},
{	B(accept=accept);
	sendResponse(7276, accept)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[if G(acceptRequests(7276, V2)) then skip else if B(not receivedP(1, 7276, closed(A))) then adoptz(respondToRequest(7276, 50) : Infinite, priority 10), if B(yes=yes) then B(accept=accept) else if B(yes=no) then B(accept=reject) else if B(yes>50) then B(accept=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<50) then B(accept=reject); sendResponse(7276, accept), B(accept=accept); sendResponse(7276, accept), B(accept=accept); sendResponse(7276, accept), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	if	G(acceptRequests(7276, V2))
	then	{	skip
		}
	else	{	if	B(not receivedP(1, 7276, closed(A)))
			then	{	adoptz(respondToRequest(7276, 50) : Infinite, priority 10)
				}
		}
},
{	if	B(yes=yes)
	then	{	B(accept=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(accept=reject)
				}
			else	{	if	B(yes>50)
					then	{	B(accept=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(accept=reject)
										}
								}
						}
				}
		};
	sendResponse(7276, accept)
},
{	B(accept=accept);
	sendResponse(7276, accept)
},
{	B(accept=accept);
	sendResponse(7276, accept)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	if	B(not receivedP(1, 7276, closed(A)))
	then	{	adoptz(respondToRequest(7276, 50) : Infinite, priority 10)
		}
},
{	B(accept=accept);
	sendResponse(7276, accept)
},
{	sendResponse(7276, accept)
},
{	sendResponse(7276, accept)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[if B(not receivedP(1, 7276, closed(A))) then adoptz(respondToRequest(7276, 50) : Infinite, priority 10), B(accept=accept); sendResponse(7276, accept), sendResponse(7276, accept), sendResponse(7276, accept), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	if	B(not receivedP(1, 7276, closed(A)))
	then	{	adoptz(respondToRequest(7276, 50) : Infinite, priority 10)
		}
},
{	B(accept=accept);
	sendResponse(7276, accept)
},
{	sendResponse(7276, accept)
},
{	sendResponse(7276, accept)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	adoptz(respondToRequest(7276, 50) : Infinite, priority 10)
},
{	sendResponse(7276, accept)
},
{	@ctenv(sendResponse(7276, accept),L1,0);
	SentResponse(accept, 7276)
},
{	@ctenv(sendResponse(7276, accept),L1,0);
	SentResponse(accept, 7276)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[adoptz(respondToRequest(7276, 50) : Infinite, priority 10), sendResponse(7276, accept), @ctenv(sendResponse(7276, accept),L1,0); SentResponse(accept, 7276), @ctenv(sendResponse(7276, accept),L1,0); SentResponse(accept, 7276), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	adoptz(respondToRequest(7276, 50) : Infinite, priority 10)
},
{	sendResponse(7276, accept)
},
{	@ctenv(sendResponse(7276, accept),L1,0);
	SentResponse(accept, 7276)
},
{	@ctenv(sendResponse(7276, accept),L1,0);
	SentResponse(accept, 7276)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


a40[CTAH] sent response: Discourse Message...
From PerGameId: 3.
To PerGameId: 1.

a40[CTAH] sent response: Discourse Message...
From PerGameId: 3.
To PerGameId: 1.

obligation to be adopted: respondToRequest(7276, 50) : Infinite, priority 10
org notification: Response [id=7276, response=accepted, clock=10, time=2015-06-03 16:30:32.663]
org notification: Response [id=7276, response=accepted, clock=10, time=2015-06-03 16:30:32.676]
[Planbase]:{	@ctenv(sendResponse(7276, accept),L1,0);
	SentResponse(accept, 7276)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[@ctenv(sendResponse(7276, accept),L1,0); SentResponse(accept, 7276), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	@ctenv(sendResponse(7276, accept),L1,0);
	SentResponse(accept, 7276)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


a40[CTAH] sent response: Discourse Message...
From PerGameId: 3.
To PerGameId: 1.

[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


org notification: Response [id=7276, response=accepted, clock=10, time=2015-06-03 16:30:32.76]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


org notification: Time [clock=11, time=2015-06-03 16:30:35.925]
object notification: Time [clock=11, time=2015-06-03 16:30:35.925]
object notification: Time [clock=11, time=2015-06-03 16:30:35.925]
object notification: Time [clock=11, time=2015-06-03 16:30:35.925]
Event processed UpdateClock(11)
[Planbase]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(10>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(10>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(11)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), UpdateClock(11)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(11)
}


Event processed UpdateClock(11)
[Planbase]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	UpdateClock(11)
}


[new scheduled]:[if B(10>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), UpdateClock(11)]
[After]:{	if	B(10>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	UpdateClock(11)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


org notification: Time [clock=12, time=2015-06-03 16:30:45.927]
object notification: Time [clock=12, time=2015-06-03 16:30:45.927]
object notification: Time [clock=12, time=2015-06-03 16:30:45.927]
object notification: Time [clock=12, time=2015-06-03 16:30:45.927]
Event processed UpdateClock(12)
Event processed UpdateClock(12)
[Planbase]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	UpdateClock(12)
}


[new scheduled]:[B(timetowait(Wait)); if B(11>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), UpdateClock(12)]
[After]:{	B(timetowait(Wait));
	if	B(11>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	UpdateClock(12)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(12)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), UpdateClock(12)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(12)
}


[Planbase]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(11>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(11>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 0
[MSG] i'm: 0
AGENT : got response to offer
org notification: Response [id=8702, response=accepted, clock=12, time=2015-06-03 16:30:52.799]
Event processed @ctenv(functionToList(message(response, 8702, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	@ctenv(functionToList(message(response, 8702, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), @ctenv(functionToList(message(response, 8702, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	@ctenv(functionToList(message(response, 8702, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[CTAH] Array of Terms: [Lapapl.data.Term;@739237dd
[CTAH] The created APLList : [response,8702,accept]
[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedResponse(accept, 8702)
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), if B(response=response) then ReceivedResponse(accept, 8702)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedResponse(accept, 8702)
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	ReceivedResponse(accept, 8702)
}


[new scheduled]:[B(timetowait(Wait)); if B(12>8+Wait) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), ReceivedResponse(accept, 8702)]
[After]:{	B(timetowait(Wait));
	if	B(12>8+Wait)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	ReceivedResponse(accept, 8702)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(12>8+7) then {NoNextStep(6, 4, 8702); ReceivedResponse(noresponse, 8702)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(12>8+7)
	then	{	NoNextStep(6, 4, 8702);
			ReceivedResponse(noresponse, 8702)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	@ctenv(moveStepToGoal(neco, 6, 4),L2,0);
	if	B(L2=[actionresult([6,4])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 4, Clock)
		};
	NoNextStep(6, 4, 8702)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoal(neco, 6, 4),L2,0); if B(L2=[actionresult([6,4])]) then {B(clock(Clock)); UpdatePosition(6, 4, Clock)}; NoNextStep(6, 4, 8702), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	@ctenv(moveStepToGoal(neco, 6, 4),L2,0);
	if	B(L2=[actionresult([6,4])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 4, Clock)
		};
	NoNextStep(6, 4, 8702)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


Need to wait 3 more seconds
org notification: Position [subject=a10, id=null, cell=Cell [x=6, y=4], time=2015-06-03 16:30:53.201, clock=12]
object notification: Position [subject=a10, id=null, cell=Cell [x=6, y=4], time=2015-06-03 16:30:53.201, clock=12]
object notification: Obligation [subject=a10, obligation=[makeMove(6, 4, a10)], sanction=[reduce(a10, 300)], deadline=27, time=2015-06-03 16:30:53.207, clock=12]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


org notification: Position [subject=a20, id=null, cell=Cell [x=5, y=4], time=2015-06-03 16:30:54.689, clock=12]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


org notification: Time [clock=13, time=2015-06-03 16:30:55.929]
object notification: Time [clock=13, time=2015-06-03 16:30:55.929]
object notification: Time [clock=13, time=2015-06-03 16:30:55.929]
object notification: Time [clock=13, time=2015-06-03 16:30:55.929]
Event processed UpdateClock(13)
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(13)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), UpdateClock(13)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(13)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


a10[CTAH] moveStepToGoal returns: [6,4]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


Event processed UpdatePosition(6, 4, 12)
Event processed adoptObligation(makeMove(6, 4, a10), 27, reduce(a10, 300))
Event processed UpdateClock(13)
[Planbase]:{	B(clock(Clock));
	UpdatePosition(6, 4, Clock);
	NoNextStep(6, 4, 8702)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	UpdatePosition(6, 4, 12)
},
{	adoptObligation(makeMove(6, 4, a10), 27, reduce(a10, 300))
},
{	UpdateClock(13)
}


[new scheduled]:[B(clock(Clock)); UpdatePosition(6, 4, Clock); NoNextStep(6, 4, 8702), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), UpdatePosition(6, 4, 12), adoptObligation(makeMove(6, 4, a10), 27, reduce(a10, 300)), UpdateClock(13)]
[After]:{	B(clock(Clock));
	UpdatePosition(6, 4, Clock);
	NoNextStep(6, 4, 8702)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	UpdatePosition(6, 4, 12)
},
{	adoptObligation(makeMove(6, 4, a10), 27, reduce(a10, 300))
},
{	UpdateClock(13)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	UpdatePosition(6, 4, 12);
	NoNextStep(6, 4, 8702)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	adoptz(makeMove(6, 4, 300) : 3 Jun 2015 15:47:36 GMT, priority 10)
}


[new scheduled]:[UpdatePosition(6, 4, 12); NoNextStep(6, 4, 8702), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), adoptz(makeMove(6, 4, 300) : 3 Jun 2015 15:47:36 GMT, priority 10)]
[After]:{	UpdatePosition(6, 4, 12);
	NoNextStep(6, 4, 8702)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	adoptz(makeMove(6, 4, 300) : 3 Jun 2015 15:47:36 GMT, priority 10)
}


obligation to be adopted: makeMove(6, 4, 300) : 3 Jun 2015 15:47:36 GMT, priority 10
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	NoNextStep(6, 4, 8702)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[NoNextStep(6, 4, 8702), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	NoNextStep(6, 4, 8702)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(V3>700) then @ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B([A,B]=[5,0]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B([A,B]=[5,0]); if B(prohibition(useColor(Color2, V3))) then if B(V3>700) then @ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B([A,B]=[5,0]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 5, 0, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(V3>700) then @ctenv(moveStepToGoalTest(Color2, no, 5, 0, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 5, 0, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(100>700)
	then	{	@ctenv(moveStepToGoalTest(yellow, no, 5, 0, 8),L1,0)
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(100>700) then @ctenv(moveStepToGoalTest(yellow, no, 5, 0, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(100>700)
	then	{	@ctenv(moveStepToGoalTest(yellow, no, 5, 0, 8),L1,0)
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[Planbase]:{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


a10[CTAH] going goal: 5,0 color: neco
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscourseMessage
[MSG] Message is of type: basicproposal
[MSG] Message is for: 2
[MSG] i'm: 2
Received a proposal creating event
org notification: Proposal [id=1559, agent=a20, agent2=a30, clock=13, time=2015-06-03 16:31:03.612]
object notification: Obligation [subject=a30, obligation=[acceptRequest(1559)], sanction=[reduce(a30, 200)], deadline=18, time=2015-06-03 16:31:03.619, clock=13]
object notification: Obligation [subject=a30, obligation=[respondToRequest(1559)], sanction=[reduce(a30, 300)], deadline=18, time=2015-06-03 16:31:03.622, clock=13]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


org notification: Position [subject=a20, id=null, cell=Cell [x=4, y=4], time=2015-06-03 16:31:05.255, clock=13]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


object notification: Time [clock=14, time=2015-06-03 16:31:05.931]
org notification: Time [clock=14, time=2015-06-03 16:31:05.931]
object notification: Time [clock=14, time=2015-06-03 16:31:05.931]
object notification: Time [clock=14, time=2015-06-03 16:31:05.931]
Event processed UpdateClock(14)
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(14)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), UpdateClock(14)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(14)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


a10[CTAH] paths: 1000
Need to wait 4 more seconds
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


org notification: Position [subject=a20, id=null, cell=Cell [x=4, y=3], time=2015-06-03 16:31:14.102, clock=14]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


org notification: Time [clock=15, time=2015-06-03 16:31:15.934]
object notification: Time [clock=15, time=2015-06-03 16:31:15.934]
object notification: Time [clock=15, time=2015-06-03 16:31:15.934]
object notification: Time [clock=15, time=2015-06-03 16:31:15.934]
Event processed UpdateClock(15)
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(15)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), UpdateClock(15)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(15)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


a10[CTAH] path: 0
a10[CTAH] path: Path: [6][4] [6][3] [6][2] [6][1] [6][0] [5][0]

a10[CTAH] moveStepToGoalTest returns I have chip: [6,3,no,no]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


Event processed UpdateClock(14)
Event processed UpdateClock(15)
[Planbase]:{	B(clock(Clock));
	if	B(not no=no)
	then	{	NextStep(6, 3, no);
			SentProposal(no, no, open, Clock)
		}
	else	{	NextStep(6, 3)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	UpdateClock(14)
},
{	UpdateClock(15)
}


[new scheduled]:[B(clock(Clock)); if B(not no=no) then {NextStep(6, 3, no); SentProposal(no, no, open, Clock)} else NextStep(6, 3), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), UpdateClock(14), UpdateClock(15)]
[After]:{	B(clock(Clock));
	if	B(not no=no)
	then	{	NextStep(6, 3, no);
			SentProposal(no, no, open, Clock)
		}
	else	{	NextStep(6, 3)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	UpdateClock(14)
},
{	UpdateClock(15)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(not no=no)
	then	{	NextStep(6, 3, no);
			SentProposal(no, no, open, 13)
		}
	else	{	NextStep(6, 3)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(not no=no) then {NextStep(6, 3, no); SentProposal(no, no, open, 13)} else NextStep(6, 3), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(not no=no)
	then	{	NextStep(6, 3, no);
			SentProposal(no, no, open, 13)
		}
	else	{	NextStep(6, 3)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	NextStep(6, 3)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[NextStep(6, 3), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	NextStep(6, 3)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	@ctenv(moveStepToGoal(neco, 6, 3),L2,0);
	if	B(L2=[actionresult([6,3])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 3, Clock)
		};
	NoNextStep(6, 3)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoal(neco, 6, 3),L2,0); if B(L2=[actionresult([6,3])]) then {B(clock(Clock)); UpdatePosition(6, 3, Clock)}; NoNextStep(6, 3), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	@ctenv(moveStepToGoal(neco, 6, 3),L2,0);
	if	B(L2=[actionresult([6,3])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 3, Clock)
		};
	NoNextStep(6, 3)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


Need to wait 4 more seconds
org notification: Position [subject=a10, id=null, cell=Cell [x=6, y=3], time=2015-06-03 16:31:18.319, clock=15]
object notification: Position [subject=a10, id=null, cell=Cell [x=6, y=3], time=2015-06-03 16:31:18.319, clock=15]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


a10[CTAH] moveStepToGoal returns: [6,3]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


Event processed UpdatePosition(6, 3, 15)
[Planbase]:{	B(clock(Clock));
	UpdatePosition(6, 3, Clock);
	NoNextStep(6, 3)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	UpdatePosition(6, 3, 15)
}


[new scheduled]:[B(clock(Clock)); UpdatePosition(6, 3, Clock); NoNextStep(6, 3), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), UpdatePosition(6, 3, 15)]
[After]:{	B(clock(Clock));
	UpdatePosition(6, 3, Clock);
	NoNextStep(6, 3)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	UpdatePosition(6, 3, 15)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	UpdatePosition(6, 3, 15);
	NoNextStep(6, 3)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[UpdatePosition(6, 3, 15); NoNextStep(6, 3), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	UpdatePosition(6, 3, 15);
	NoNextStep(6, 3)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	NoNextStep(6, 3)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[NoNextStep(6, 3), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	NoNextStep(6, 3)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(V3>700) then @ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B([A,B]=[5,0]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B([A,B]=[5,0]); if B(prohibition(useColor(Color2, V3))) then if B(V3>700) then @ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B([A,B]=[5,0]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 5, 0, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(V3>700) then @ctenv(moveStepToGoalTest(Color2, no, 5, 0, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 5, 0, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(100>700)
	then	{	@ctenv(moveStepToGoalTest(yellow, no, 5, 0, 8),L1,0)
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(100>700) then @ctenv(moveStepToGoalTest(yellow, no, 5, 0, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(100>700)
	then	{	@ctenv(moveStepToGoalTest(yellow, no, 5, 0, 8),L1,0)
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


a10[CTAH] going goal: 5,0 color: neco
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


object notification: Time [clock=16, time=2015-06-03 16:31:25.936]
org notification: Time [clock=16, time=2015-06-03 16:31:25.936]
object notification: Time [clock=16, time=2015-06-03 16:31:25.936]
object notification: Time [clock=16, time=2015-06-03 16:31:25.936]
Event processed UpdateClock(16)
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(16)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), UpdateClock(16)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(16)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscourseMessage
[MSG] Message is of type: basicproposal
[MSG] Message is for: 3
[MSG] i'm: 3
Received a proposal creating event
org notification: Proposal [id=7508, agent=a20, agent2=a40, clock=16, time=2015-06-03 16:31:26.567]
object notification: Obligation [subject=a40, obligation=[acceptRequest(7508)], sanction=[reduce(a40, 200)], deadline=21, time=2015-06-03 16:31:26.581, clock=16]
object notification: Obligation [subject=a40, obligation=[respondToRequest(7508)], sanction=[reduce(a40, 300)], deadline=21, time=2015-06-03 16:31:26.584, clock=16]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


Event processed @ctenv(functionToList(proposal(proposal, 1, 7508, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
Event processed adoptObligation(acceptRequest(7508), 21, reduce(a40, 200))
Event processed adoptObligation(respondToRequest(7508), 21, reduce(a40, 300))
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	@ctenv(functionToList(proposal(proposal, 1, 7508, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	adoptObligation(acceptRequest(7508), 21, reduce(a40, 200))
},
{	adoptObligation(respondToRequest(7508), 21, reduce(a40, 300))
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), @ctenv(functionToList(proposal(proposal, 1, 7508, open)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), adoptObligation(acceptRequest(7508), 21, reduce(a40, 200)), adoptObligation(respondToRequest(7508), 21, reduce(a40, 300))]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	@ctenv(functionToList(proposal(proposal, 1, 7508, open)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	adoptObligation(acceptRequest(7508), 21, reduce(a40, 200))
},
{	adoptObligation(respondToRequest(7508), 21, reduce(a40, 300))
}


[CTAH] Array of Terms: [Lapapl.data.Term;@6c999381
[CTAH] The created APLList : [proposal,1,7508,open]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	if	B([actionresult([proposal,1,7508,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,1,7508,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	adoptz(acceptRequest(7508, 200) : 3 Jun 2015 15:48:06 GMT, priority 10)
},
{	adoptz(respondToRequest(7508, 300) : 3 Jun 2015 15:48:06 GMT, priority 10)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), if B([actionresult([proposal,1,7508,open])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([proposal,1,7508,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), adoptz(acceptRequest(7508, 200) : 3 Jun 2015 15:48:06 GMT, priority 10), adoptz(respondToRequest(7508, 300) : 3 Jun 2015 15:48:06 GMT, priority 10)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	if	B([actionresult([proposal,1,7508,open])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([proposal,1,7508,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
},
{	adoptz(acceptRequest(7508, 200) : 3 Jun 2015 15:48:06 GMT, priority 10)
},
{	adoptz(respondToRequest(7508, 300) : 3 Jun 2015 15:48:06 GMT, priority 10)
}


obligation to be adopted: acceptRequest(7508, 200) : 3 Jun 2015 15:48:06 GMT, priority 10
obligation to be adopted: respondToRequest(7508, 300) : 3 Jun 2015 15:48:06 GMT, priority 10
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	if	B([actionresult([proposal,1,7508,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), if B([actionresult([proposal,1,7508,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	if	B([actionresult([proposal,1,7508,open])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
	then	{	if	B(TYPE=proposal)
			then	{	ReceivedProposal(AGENT, ID, RESPONSE)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(1, 7508, open)
		}
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), if B(proposal=proposal) then ReceivedProposal(1, 7508, open)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	if	B(proposal=proposal)
	then	{	ReceivedProposal(1, 7508, open)
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedProposal(1, 7508, open)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), ReceivedProposal(1, 7508, open)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedProposal(1, 7508, open)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[if B(not scoreAfterExchange(7508, Score)) then getScoreAfterExchange(7508); B(scoreAfterExchange(7508, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>200) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<200) then B(Answer=reject); sendResponse(7508, Answer), if B(not scoreAfterExchange(7508, Score)) then getScoreAfterExchange(7508); B(scoreAfterExchange(7508, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>300) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<300) then B(Answer=reject); sendResponse(7508, Answer), if G(acceptRequests(7508, V2)) then skip else if B(not receivedP(1, 7508, closed(A))) then adoptz(respondToRequest(7508, 50) : Infinite, priority 10), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	if	G(acceptRequests(7508, V2))
	then	{	skip
		}
	else	{	if	B(not receivedP(1, 7508, closed(A)))
			then	{	adoptz(respondToRequest(7508, 50) : Infinite, priority 10)
				}
		}
},
{	if	B(not scoreAfterExchange(7508, Score))
	then	{	getScoreAfterExchange(7508)
		};
	B(scoreAfterExchange(7508, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	if	B(not scoreAfterExchange(7508, Score))
	then	{	getScoreAfterExchange(7508)
		};
	B(scoreAfterExchange(7508, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(not receivedP(1, 7508, closed(A)))
	then	{	adoptz(respondToRequest(7508, 50) : Infinite, priority 10)
		}
},
{	getScoreAfterExchange(7508);
	B(scoreAfterExchange(7508, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	getScoreAfterExchange(7508);
	B(scoreAfterExchange(7508, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[if B(not receivedP(1, 7508, closed(A))) then adoptz(respondToRequest(7508, 50) : Infinite, priority 10), getScoreAfterExchange(7508); B(scoreAfterExchange(7508, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>300) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<300) then B(Answer=reject); sendResponse(7508, Answer), getScoreAfterExchange(7508); B(scoreAfterExchange(7508, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>200) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<200) then B(Answer=reject); sendResponse(7508, Answer), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	if	B(not receivedP(1, 7508, closed(A)))
	then	{	adoptz(respondToRequest(7508, 50) : Infinite, priority 10)
		}
},
{	getScoreAfterExchange(7508);
	B(scoreAfterExchange(7508, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	getScoreAfterExchange(7508);
	B(scoreAfterExchange(7508, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	adoptz(respondToRequest(7508, 50) : Infinite, priority 10)
},
{	GetScoreAfterExchange(7508, yes);
	B(scoreAfterExchange(7508, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	GetScoreAfterExchange(7508, yes);
	B(scoreAfterExchange(7508, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[adoptz(respondToRequest(7508, 50) : Infinite, priority 10), GetScoreAfterExchange(7508, yes); B(scoreAfterExchange(7508, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>300) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<300) then B(Answer=reject); sendResponse(7508, Answer), GetScoreAfterExchange(7508, yes); B(scoreAfterExchange(7508, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>200) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<200) then B(Answer=reject); sendResponse(7508, Answer), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	adoptz(respondToRequest(7508, 50) : Infinite, priority 10)
},
{	GetScoreAfterExchange(7508, yes);
	B(scoreAfterExchange(7508, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	GetScoreAfterExchange(7508, yes);
	B(scoreAfterExchange(7508, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


obligation to be adopted: respondToRequest(7508, 50) : Infinite, priority 10
[Planbase]:{	B(scoreAfterExchange(7508, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	B(scoreAfterExchange(7508, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[if B(not scoreAfterExchange(7508, Score)) then getScoreAfterExchange(7508); B(scoreAfterExchange(7508, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>50) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<50) then B(Answer=reject); sendResponse(7508, Answer), if G(acceptRequests(7508, V2)) then skip else if B(not receivedP(1, 7508, closed(A))) then adoptz(respondToRequest(7508, 50) : Infinite, priority 10), B(scoreAfterExchange(7508, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>300) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<300) then B(Answer=reject); sendResponse(7508, Answer), B(scoreAfterExchange(7508, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>200) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<200) then B(Answer=reject); sendResponse(7508, Answer), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	if	B(not scoreAfterExchange(7508, Score))
	then	{	getScoreAfterExchange(7508)
		};
	B(scoreAfterExchange(7508, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>50)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	if	G(acceptRequests(7508, V2))
	then	{	skip
		}
	else	{	if	B(not receivedP(1, 7508, closed(A)))
			then	{	adoptz(respondToRequest(7508, 50) : Infinite, priority 10)
				}
		}
},
{	B(scoreAfterExchange(7508, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	B(scoreAfterExchange(7508, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(scoreAfterExchange(7508, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>50)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	if	B(not receivedP(1, 7508, closed(A)))
	then	{	adoptz(respondToRequest(7508, 50) : Infinite, priority 10)
		}
},
{	B(Answer=accept);
	if	B(yes=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(yes>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	B(Answer=accept);
	if	B(yes=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(yes>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[B(scoreAfterExchange(7508, Score)); B(Answer=accept); if B(Score=yes) then B(Answer=accept) else if B(Score=no) then B(Answer=reject) else if B(Score>50) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<50) then B(Answer=reject); sendResponse(7508, Answer), if B(not receivedP(1, 7508, closed(A))) then adoptz(respondToRequest(7508, 50) : Infinite, priority 10), B(Answer=accept); if B(yes=yes) then B(Answer=accept) else if B(yes=no) then B(Answer=reject) else if B(yes>300) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<300) then B(Answer=reject); sendResponse(7508, Answer), B(Answer=accept); if B(yes=yes) then B(Answer=accept) else if B(yes=no) then B(Answer=reject) else if B(yes>200) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<200) then B(Answer=reject); sendResponse(7508, Answer), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	B(scoreAfterExchange(7508, Score));
	B(Answer=accept);
	if	B(Score=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(Score=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(Score>50)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	if	B(not receivedP(1, 7508, closed(A)))
	then	{	adoptz(respondToRequest(7508, 50) : Infinite, priority 10)
		}
},
{	B(Answer=accept);
	if	B(yes=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(yes>300)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	B(Answer=accept);
	if	B(yes=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(yes>200)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(Answer=accept);
	if	B(yes=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(yes>50)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	adoptz(respondToRequest(7508, 50) : Infinite, priority 10)
},
{	if	B(yes=yes)
	then	{	B(accept=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(accept=reject)
				}
			else	{	if	B(yes>300)
					then	{	B(accept=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(accept=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, accept)
},
{	if	B(yes=yes)
	then	{	B(accept=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(accept=reject)
				}
			else	{	if	B(yes>200)
					then	{	B(accept=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(accept=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, accept)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[B(Answer=accept); if B(yes=yes) then B(Answer=accept) else if B(yes=no) then B(Answer=reject) else if B(yes>50) then B(Answer=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<50) then B(Answer=reject); sendResponse(7508, Answer), adoptz(respondToRequest(7508, 50) : Infinite, priority 10), if B(yes=yes) then B(accept=accept) else if B(yes=no) then B(accept=reject) else if B(yes>300) then B(accept=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<300) then B(accept=reject); sendResponse(7508, accept), if B(yes=yes) then B(accept=accept) else if B(yes=no) then B(accept=reject) else if B(yes>200) then B(accept=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<200) then B(accept=reject); sendResponse(7508, accept), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	B(Answer=accept);
	if	B(yes=yes)
	then	{	B(Answer=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(Answer=reject)
				}
			else	{	if	B(yes>50)
					then	{	B(Answer=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(Answer=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, Answer)
},
{	adoptz(respondToRequest(7508, 50) : Infinite, priority 10)
},
{	if	B(yes=yes)
	then	{	B(accept=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(accept=reject)
				}
			else	{	if	B(yes>300)
					then	{	B(accept=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<300)
									then	{	B(accept=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, accept)
},
{	if	B(yes=yes)
	then	{	B(accept=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(accept=reject)
				}
			else	{	if	B(yes>200)
					then	{	B(accept=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<200)
									then	{	B(accept=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, accept)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


obligation to be adopted: respondToRequest(7508, 50) : Infinite, priority 10
[Planbase]:{	if	B(yes=yes)
	then	{	B(accept=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(accept=reject)
				}
			else	{	if	B(yes>50)
					then	{	B(accept=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(accept=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, accept)
},
{	B(accept=accept);
	sendResponse(7508, accept)
},
{	B(accept=accept);
	sendResponse(7508, accept)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[if G(acceptRequests(7508, V2)) then skip else if B(not receivedP(1, 7508, closed(A))) then adoptz(respondToRequest(7508, 50) : Infinite, priority 10), if B(yes=yes) then B(accept=accept) else if B(yes=no) then B(accept=reject) else if B(yes>50) then B(accept=reject) else if B(prohibition(rejectRequests(V2))) then if B(V2<50) then B(accept=reject); sendResponse(7508, accept), B(accept=accept); sendResponse(7508, accept), B(accept=accept); sendResponse(7508, accept), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	if	G(acceptRequests(7508, V2))
	then	{	skip
		}
	else	{	if	B(not receivedP(1, 7508, closed(A)))
			then	{	adoptz(respondToRequest(7508, 50) : Infinite, priority 10)
				}
		}
},
{	if	B(yes=yes)
	then	{	B(accept=accept)
		}
	else	{	if	B(yes=no)
			then	{	B(accept=reject)
				}
			else	{	if	B(yes>50)
					then	{	B(accept=reject)
						}
					else	{	if	B(prohibition(rejectRequests(V2)))
							then	{	if	B(V2<50)
									then	{	B(accept=reject)
										}
								}
						}
				}
		};
	sendResponse(7508, accept)
},
{	B(accept=accept);
	sendResponse(7508, accept)
},
{	B(accept=accept);
	sendResponse(7508, accept)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(not receivedP(1, 7508, closed(A)))
	then	{	adoptz(respondToRequest(7508, 50) : Infinite, priority 10)
		}
},
{	B(accept=accept);
	sendResponse(7508, accept)
},
{	sendResponse(7508, accept)
},
{	sendResponse(7508, accept)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[if B(not receivedP(1, 7508, closed(A))) then adoptz(respondToRequest(7508, 50) : Infinite, priority 10), B(accept=accept); sendResponse(7508, accept), sendResponse(7508, accept), sendResponse(7508, accept), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	if	B(not receivedP(1, 7508, closed(A)))
	then	{	adoptz(respondToRequest(7508, 50) : Infinite, priority 10)
		}
},
{	B(accept=accept);
	sendResponse(7508, accept)
},
{	sendResponse(7508, accept)
},
{	sendResponse(7508, accept)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	adoptz(respondToRequest(7508, 50) : Infinite, priority 10)
},
{	sendResponse(7508, accept)
},
{	@ctenv(sendResponse(7508, accept),L1,0);
	SentResponse(accept, 7508)
},
{	@ctenv(sendResponse(7508, accept),L1,0);
	SentResponse(accept, 7508)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[adoptz(respondToRequest(7508, 50) : Infinite, priority 10), sendResponse(7508, accept), @ctenv(sendResponse(7508, accept),L1,0); SentResponse(accept, 7508), @ctenv(sendResponse(7508, accept),L1,0); SentResponse(accept, 7508), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	adoptz(respondToRequest(7508, 50) : Infinite, priority 10)
},
{	sendResponse(7508, accept)
},
{	@ctenv(sendResponse(7508, accept),L1,0);
	SentResponse(accept, 7508)
},
{	@ctenv(sendResponse(7508, accept),L1,0);
	SentResponse(accept, 7508)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


a40[CTAH] sent response: Discourse Message...
From PerGameId: 3.
To PerGameId: 1.

a40[CTAH] sent response: Discourse Message...
From PerGameId: 3.
To PerGameId: 1.

obligation to be adopted: respondToRequest(7508, 50) : Infinite, priority 10
org notification: Response [id=7508, response=accepted, clock=16, time=2015-06-03 16:31:27.452]
org notification: Response [id=7508, response=accepted, clock=16, time=2015-06-03 16:31:27.463]
[Planbase]:{	@ctenv(sendResponse(7508, accept),L1,0);
	SentResponse(accept, 7508)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[@ctenv(sendResponse(7508, accept),L1,0); SentResponse(accept, 7508), ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	@ctenv(sendResponse(7508, accept),L1,0);
	SentResponse(accept, 7508)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


a40[CTAH] sent response: Discourse Message...
From PerGameId: 3.
To PerGameId: 1.

org notification: Response [id=7508, response=accepted, clock=16, time=2015-06-03 16:31:27.532]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


org notification: Position [subject=a20, id=null, cell=Cell [x=4, y=2], time=2015-06-03 16:31:31.635, clock=16]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


object notification: Time [clock=17, time=2015-06-03 16:31:35.938]
object notification: Time [clock=17, time=2015-06-03 16:31:35.938]
org notification: Time [clock=17, time=2015-06-03 16:31:35.938]
Event processed UpdateClock(17)
object notification: Time [clock=17, time=2015-06-03 16:31:35.938]
object notification: Points [subject=a10, time=2015-06-03 16:31:35.955, clock=17, value=900, id=null]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(17)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), UpdateClock(17)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(17)
}


object notification: Points [subject=a30, time=2015-06-03 16:31:35.964, clock=17, value=900, id=null]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


a10[CTAH] paths: 1000
Need to wait 3 more seconds
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
a10[CTAH] path: 0
a10[CTAH] path: Path: [6][3] [6][2] [6][1] [6][0] [5][0]

a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] moveStepToGoalTest proposals: null
a10[CTAH] found a chip....: (R:6,C:2)
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


a10[CTAH] moveStepToGoalTest sent proposal for: [6,2,1,7692]
org notification: Proposal [id=7692, agent=a10, agent2=a20, clock=17, time=2015-06-03 16:31:40.08]
Event processed UpdateClock(16)
Event processed UpdateClock(17)
Event processed UpdatePoints(900)
[Planbase]:{	B(clock(Clock));
	if	B(not 7692=no)
	then	{	NextStep(6, 2, 7692);
			SentProposal(7692, 1, open, Clock)
		}
	else	{	NextStep(6, 2)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	UpdateClock(16)
},
{	UpdateClock(17)
},
{	UpdatePoints(900)
}


[new scheduled]:[B(clock(Clock)); if B(not 7692=no) then {NextStep(6, 2, 7692); SentProposal(7692, 1, open, Clock)} else NextStep(6, 2), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), UpdateClock(16), UpdateClock(17), UpdatePoints(900)]
[After]:{	B(clock(Clock));
	if	B(not 7692=no)
	then	{	NextStep(6, 2, 7692);
			SentProposal(7692, 1, open, Clock)
		}
	else	{	NextStep(6, 2)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	UpdateClock(16)
},
{	UpdateClock(17)
},
{	UpdatePoints(900)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(not 7692=no)
	then	{	NextStep(6, 2, 7692);
			SentProposal(7692, 1, open, 15)
		}
	else	{	NextStep(6, 2)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(not 7692=no) then {NextStep(6, 2, 7692); SentProposal(7692, 1, open, 15)} else NextStep(6, 2), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(not 7692=no)
	then	{	NextStep(6, 2, 7692);
			SentProposal(7692, 1, open, 15)
		}
	else	{	NextStep(6, 2)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	NextStep(6, 2, 7692);
	SentProposal(7692, 1, open, 15)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[NextStep(6, 2, 7692); SentProposal(7692, 1, open, 15), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	NextStep(6, 2, 7692);
	SentProposal(7692, 1, open, 15)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	SentProposal(7692, 1, open, 15)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[SentProposal(7692, 1, open, 15), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	SentProposal(7692, 1, open, 15)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscussionDiscourseMessage
[MSG] Message is of type: basicproposaldiscussion
[MSG] Message is for: 0
[MSG] i'm: 0
AGENT : got response to offer
org notification: Response [id=7692, response=accepted, clock=17, time=2015-06-03 16:31:44.397]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


Event processed @ctenv(functionToList(message(response, 7692, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	@ctenv(functionToList(message(response, 7692, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), @ctenv(functionToList(message(response, 7692, accept)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	@ctenv(functionToList(message(response, 7692, accept)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[CTAH] Array of Terms: [Lapapl.data.Term;@a8c261e
[CTAH] The created APLList : [response,7692,accept]
[Planbase]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedResponse(accept, 7692)
		}
}


[new scheduled]:[B(timetowait(Wait)); if B(17>15+Wait) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), if B(response=response) then ReceivedResponse(accept, 7692)]
[After]:{	B(timetowait(Wait));
	if	B(17>15+Wait)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	if	B(response=response)
	then	{	ReceivedResponse(accept, 7692)
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	ReceivedResponse(accept, 7692)
}


[new scheduled]:[if B(17>15+7) then {NoNextStep(6, 2, 7692); ReceivedResponse(noresponse, 7692)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), ReceivedResponse(accept, 7692)]
[After]:{	if	B(17>15+7)
	then	{	NoNextStep(6, 2, 7692);
			ReceivedResponse(noresponse, 7692)
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	ReceivedResponse(accept, 7692)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	@ctenv(moveStepToGoal(neco, 6, 2),L2,0);
	if	B(L2=[actionresult([6,2])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 2, Clock)
		};
	NoNextStep(6, 2, 7692)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoal(neco, 6, 2),L2,0); if B(L2=[actionresult([6,2])]) then {B(clock(Clock)); UpdatePosition(6, 2, Clock)}; NoNextStep(6, 2, 7692), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	@ctenv(moveStepToGoal(neco, 6, 2),L2,0);
	if	B(L2=[actionresult([6,2])])
	then	{	B(clock(Clock));
			UpdatePosition(6, 2, Clock)
		};
	NoNextStep(6, 2, 7692)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


Need to wait 4 more seconds
org notification: Position [subject=a10, id=null, cell=Cell [x=6, y=2], time=2015-06-03 16:31:44.856, clock=17]
object notification: Position [subject=a10, id=null, cell=Cell [x=6, y=2], time=2015-06-03 16:31:44.856, clock=17]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


object notification: Time [clock=18, time=2015-06-03 16:31:45.943]
org notification: Time [clock=18, time=2015-06-03 16:31:45.943]
object notification: Time [clock=18, time=2015-06-03 16:31:45.943]
object notification: Time [clock=18, time=2015-06-03 16:31:45.943]
Event processed UpdateClock(18)
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(18)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), UpdateClock(18)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(18)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


a10[CTAH] moveStepToGoal returns: [6,2]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


Event processed UpdatePosition(6, 2, 17)
Event processed UpdateClock(18)
[Planbase]:{	B(clock(Clock));
	UpdatePosition(6, 2, Clock);
	NoNextStep(6, 2, 7692)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	UpdatePosition(6, 2, 17)
},
{	UpdateClock(18)
}


[new scheduled]:[B(clock(Clock)); UpdatePosition(6, 2, Clock); NoNextStep(6, 2, 7692), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100), UpdatePosition(6, 2, 17), UpdateClock(18)]
[After]:{	B(clock(Clock));
	UpdatePosition(6, 2, Clock);
	NoNextStep(6, 2, 7692)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
},
{	UpdatePosition(6, 2, 17)
},
{	UpdateClock(18)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	UpdatePosition(6, 2, 17);
	NoNextStep(6, 2, 7692)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[UpdatePosition(6, 2, 17); NoNextStep(6, 2, 7692), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	UpdatePosition(6, 2, 17);
	NoNextStep(6, 2, 7692)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	NoNextStep(6, 2, 7692)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[NoNextStep(6, 2, 7692), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	NoNextStep(6, 2, 7692)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[findNextStep(neco, 700), if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	findNextStep(neco, 700)
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	G(at(X, Y, V))
	then	{	B([A,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if G(at(X, Y, V)) then B([A,B]=[X,Y]) else if B(tile(neco, X, Y)) then B([A,B]=[X,Y]); if B(prohibition(useColor(Color2, V3))) then if B(V3>700) then @ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	G(at(X, Y, V))
	then	{	B([A,B]=[X,Y])
		}
	else	{	if	B(tile(neco, X, Y))
			then	{	B([A,B]=[X,Y])
				}
		};
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B([A,B]=[5,0]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[B([A,B]=[5,0]); if B(prohibition(useColor(Color2, V3))) then if B(V3>700) then @ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	B([A,B]=[5,0]);
	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, A, B, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, A, B, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 5, 0, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(prohibition(useColor(Color2, V3))) then if B(V3>700) then @ctenv(moveStepToGoalTest(Color2, no, 5, 0, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(prohibition(useColor(Color2, V3)))
	then	{	if	B(V3>700)
			then	{	@ctenv(moveStepToGoalTest(Color2, no, 5, 0, 8),L1,0)
				}
			else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
				}
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(100>700)
	then	{	@ctenv(moveStepToGoalTest(yellow, no, 5, 0, 8),L1,0)
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[if B(100>700) then @ctenv(moveStepToGoalTest(yellow, no, 5, 0, 8),L1,0) else @ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	if	B(100>700)
	then	{	@ctenv(moveStepToGoalTest(yellow, no, 5, 0, 8),L1,0)
		}
	else	{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0)
		};
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[new scheduled]:[@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0); if B(L1=[actionresult([Xa,Ya,Agent,ID])]) then {B(clock(Clock)); if B(not ID=no) then {NextStep(Xa, Ya, ID); SentProposal(ID, Agent, open, Clock)} else NextStep(Xa, Ya)}, if B(tile(blue, 5, 6)) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else if B(prohibition(useColor(blue, V2))) then if B(V2>100) then dropgoal(useColor(blue, 100) : Infinite, priority 10) else findNextStep(blue, 100)]
[After]:{	@ctenv(moveStepToGoalTest(neco, any, 5, 0, 8),L1,0);
	if	B(L1=[actionresult([Xa,Ya,Agent,ID])])
	then	{	B(clock(Clock));
			if	B(not ID=no)
			then	{	NextStep(Xa, Ya, ID);
					SentProposal(ID, Agent, open, Clock)
				}
			else	{	NextStep(Xa, Ya)
				}
		}
},
{	if	B(tile(blue, 5, 6))
	then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
		}
	else	{	if	B(prohibition(useColor(blue, V2)))
			then	{	if	B(V2>100)
					then	{	dropgoal(useColor(blue, 100) : Infinite, priority 10)
						}
				}
			else	{	findNextStep(blue, 100)
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


a10[CTAH] going goal: 5,0 color: neco
Received a class edu.harvard.eecs.airg.coloredtrails.shared.discourse.BasicProposalDiscourseMessage
[MSG] Message is of type: basicproposal
[MSG] Message is for: 2
[MSG] i'm: 2
Received a proposal creating event
org notification: Proposal [id=266, agent=a20, agent2=a30, clock=18, time=2015-06-03 16:31:49.626]
object notification: Obligation [subject=a30, obligation=[acceptRequest(266)], sanction=[reduce(a30, 200)], deadline=23, time=2015-06-03 16:31:49.634, clock=18]
object notification: Obligation [subject=a30, obligation=[respondToRequest(266)], sanction=[reduce(a30, 300)], deadline=23, time=2015-06-03 16:31:49.636, clock=18]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


org notification: Time [clock=19, time=2015-06-03 16:31:55.947]
object notification: Time [clock=19, time=2015-06-03 16:31:55.947]
object notification: Time [clock=19, time=2015-06-03 16:31:55.947]
object notification: Time [clock=19, time=2015-06-03 16:31:55.947]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


object notification: Points [subject=a30, time=2015-06-03 16:31:55.959, clock=19, value=700, id=null]
object notification: Points [subject=a30, time=2015-06-03 16:31:55.961, clock=19, value=400, id=null]
Event processed UpdateClock(19)
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(19)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), UpdateClock(19)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(19)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


object notification: Time [clock=20, time=2015-06-03 16:32:05.954]
object notification: Time [clock=20, time=2015-06-03 16:32:05.954]
org notification: Time [clock=20, time=2015-06-03 16:32:05.954]
object notification: Time [clock=20, time=2015-06-03 16:32:05.954]
Event processed UpdateClock(20)
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(20)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), UpdateClock(20)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(20)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


setPhases in ClientGameStatus, the current phase is Feedback Phase
setPhases in ClientGameStatus, the current phase is Feedback Phase
setPhases in ClientGameStatus, the current phase is Feedback Phase
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@231fd8eb
[CTAH] The created APLList : [phasechange]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedEvent(phasechange)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), ReceivedEvent(phasechange)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedEvent(phasechange)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[update, ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	update
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated, ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated, ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	GetPhase(feedbackphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[GetPhase(feedbackphase); B(clock(Clock)); if B(event(phasechange)) then Updated, ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	GetPhase(feedbackphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[B(clock(Clock)); if B(event(phasechange)) then Updated, ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[if B(event(phasechange)) then Updated, ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	Updated
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[Updated, ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	Updated
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


(((((((((((((((((Game ended)))))))))))
Game ended 
My PlayerStatus is: Game Player...
PerGameId: 0.
PIN: 10.
Pos: (R:6,C:2).
Chips: { chips  'blue':0 'white':5 'brown':0 'yellow':0 }.
Score: 900.
Team: -1.

(((((((((((((((((Game ended)))))))))))
Game ended 
My PlayerStatus is: Game Player...
PerGameId: 3.
PIN: 40.
Pos: (R:4,C:2).
Chips: { chips  'blue':0 'white':2 'brown':0 'yellow':2 }.
Score: 1000.
Team: -1.

[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
(((((((((((((((((Game ended)))))))))))
Game ended 
My PlayerStatus is: Game Player...
PerGameId: 2.
PIN: 30.
Pos: (R:0,C:5).
Chips: { chips  'blue':9 'white':0 'brown':0 'yellow':0 }.
Score: 400.
Team: -1.

[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


Event processed @ctenv(functionToList(message(game_ended)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	@ctenv(functionToList(message(game_ended)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), @ctenv(functionToList(message(game_ended)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	@ctenv(functionToList(message(game_ended)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@2e2cee6e
[CTAH] The created APLList : [game_ended]
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	if	B([actionresult([game_ended])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_ended])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), if B([actionresult([game_ended])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_ended])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	if	B([actionresult([game_ended])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_ended])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedEvent(game_ended)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), ReceivedEvent(game_ended)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	ReceivedEvent(game_ended)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


a10[CTAH] paths: 1000
a10[CTAH] going goal: 5,0 color: neco
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


org notification: Time [clock=21, time=2015-06-03 16:32:15.959]
object notification: Time [clock=21, time=2015-06-03 16:32:15.959]
object notification: Time [clock=21, time=2015-06-03 16:32:15.959]
object notification: Time [clock=21, time=2015-06-03 16:32:15.959]
Event processed UpdateClock(21)
[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(21)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080), UpdateClock(21)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
},
{	UpdateClock(21)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[Planbase]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


[new scheduled]:[ReceivedResponse(accept, 1080), ReceivedResponse(accept, 1080)]
[After]:{	ReceivedResponse(accept, 1080)
},
{	ReceivedResponse(accept, 1080)
}


