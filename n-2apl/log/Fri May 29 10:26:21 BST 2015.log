2015-05-29 10:26:22,654 CONFIG [com.gigaspaces.logger] - Log file: /Users/dxd/gigaspaces-xap-premium-9.5.1-ga/logs/2015-05-29~10.26-gigaspaces-service-192.168.0.40-46209.log
-------------------------last log tuples start--------------------------------
-------------------------last log tuples end----------------------------------
PAction created:   at(X, Y) -> reduce(Value), priority 0
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
PAction created:   at(X, Y) -> reduce(Value), priority 0
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
PAction created:   at(X, Y) -> reduce(Value), priority 0
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[CTAH] started agent 10
[CTAH] Added a new agent to the game by the name of 10.
[ENV] added agent a10
[CTAH] started agent 30
[CTAH] Added a new agent to the game by the name of 30.
[ENV] added agent a30
[CTAH] started agent 40
[CTAH] Added a new agent to the game by the name of 40.
[ENV] added agent a40
#########################Game started
#########################Game started
#########################Game started
[Planbase]:{	initialize
}


[new scheduled]:[initialize]
[After]:{	initialize
}


[Planbase]:{	initialize
}


[new scheduled]:[initialize]
[After]:{	initialize
}


[Planbase]:{	initialize
}


[new scheduled]:[initialize]
[After]:{	initialize
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!to remove]:getPhase; getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!to remove]:getPhase; getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!to remove]:getPhase; getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(at(X, Y, _), D, reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(surround(X, Y), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(color(Color, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(acceptRequest(Id), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(makeMove(X, Y, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(FUNCTION, NAME)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
Event processed @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(at(X, Y, _), D, reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(surround(X, Y), D, reduce(Group, Sanction))
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(color(Color, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(acceptRequest(Id), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(makeMove(X, Y, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(FUNCTION, NAME)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
Event processed @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(at(X, Y, _), D, reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(surround(X, Y), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(color(Color, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(acceptRequest(Id), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(makeMove(X, Y, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(FUNCTION, NAME)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
Event processed @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[getPhase; getId; B(agentId(ID)); getRole(ID); getPos, @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[getPhase; getId; B(agentId(ID)); getRole(ID); getPos, @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[getPhase; getId; B(agentId(ID)); getRole(ID); getPos, @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@6a02cb44
[CTAH] The created APLList : [game_initialized]
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[CTAH] Array of Terms: [Lapapl.data.Term;@24aaa392
[CTAH] The created APLList : [game_initialized]
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[CTAH] Array of Terms: [Lapapl.data.Term;@578caee7
[CTAH] The created APLList : [game_initialized]
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:ReceivedEvent(game_initialized)
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:ReceivedEvent(game_initialized)
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, ReceivedEvent(game_initialized)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:ReceivedEvent(game_initialized)
[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, ReceivedEvent(game_initialized)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, ReceivedEvent(game_initialized)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[Initialize, @ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos]
[After]:{	Initialize
},
{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:
setPhases in ClientGameStatus, the current phase is 
setPhases in ClientGameStatus, the current phase is 
setPhases in ClientGameStatus, the current phase is 
setPhases in ClientGameStatus, the current phase is Norm Phase
setPhases in ClientGameStatus, the current phase is Norm Phase
setPhases in ClientGameStatus, the current phase is Norm Phase
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[Initialize, @ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos]
[After]:{	Initialize
},
{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


org notification: Tile [id=null, cell=Cell [x=0, y=0], subject=brown, time=2015-05-29 10:26:28.943, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-05-29 10:26:29.006, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=0], subject=brown, time=2015-05-29 10:26:28.943, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=0], subject=brown, time=2015-05-29 10:26:28.943, clock=0]
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos
object notification: Tile [id=null, cell=Cell [x=0, y=0], subject=brown, time=2015-05-29 10:26:28.943, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-05-29 10:26:29.006, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-05-29 10:26:29.009, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-05-29 10:26:29.009, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-05-29 10:26:29.006, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-05-29 10:26:29.006, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=3], subject=yellow, time=2015-05-29 10:26:29.015, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=3], subject=yellow, time=2015-05-29 10:26:29.015, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-05-29 10:26:29.009, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-05-29 10:26:29.009, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-05-29 10:26:29.024, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-05-29 10:26:29.024, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=3], subject=yellow, time=2015-05-29 10:26:29.015, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=3], subject=yellow, time=2015-05-29 10:26:29.015, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-05-29 10:26:29.024, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-05-29 10:26:29.024, clock=0]
#########################Game Initialized
AGENT Thread-15: current phase name: Norm Phase
#########################Game Initialized
AGENT Thread-13: current phase name: Norm Phase
we have 1 goals
we have GoalWeight: 100  DistWeight: -10  ChipWeight: 5  CommWeight: 0 scoring
we have 1 goals
we have GoalWeight: 100  DistWeight: -10  ChipWeight: 5  CommWeight: 0 scoring
#########################Game Initialized
AGENT Thread-11: current phase name: Norm Phase
we have 1 goals
we have GoalWeight: 100  DistWeight: -10  ChipWeight: 5  CommWeight: 0 scoring
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
Event processed UpdateTile(brown, 0, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!to remove]:GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
Event processed UpdateTile(brown, 0, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
Event processed UpdateTile(white, 0, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
Event processed UpdateTile(yellow, 0, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
Event processed UpdateTile(brown, 0, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
Event processed UpdateTile(brown, 0, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
Event processed UpdateTile(brown, 0, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
Event processed UpdateTile(white, 0, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
Event processed UpdateTile(yellow, 0, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
Event processed UpdateTile(brown, 0, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
Event processed UpdateTile(brown, 0, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
Event processed UpdateTile(brown, 0, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
Event processed UpdateTile(white, 0, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
Event processed UpdateTile(yellow, 0, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
Event processed UpdateTile(brown, 0, 4)
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateTile(brown, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
}


[new scheduled]:[Initialize, @ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, UpdateTile(brown, 0, 0), UpdateTile(brown, 0, 1), UpdateTile(white, 0, 2), UpdateTile(yellow, 0, 3), UpdateTile(brown, 0, 4)]
[After]:{	Initialize
},
{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateTile(brown, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
}


[Planbase]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateTile(brown, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
}


[new scheduled]:[GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos, UpdateTile(brown, 0, 0), UpdateTile(brown, 0, 1), UpdateTile(white, 0, 2), UpdateTile(yellow, 0, 3), UpdateTile(brown, 0, 4)]
[After]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateTile(brown, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
}


[!!!!!!!!to remove]:getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateTile(brown, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
}


[new scheduled]:[GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos, UpdateTile(brown, 0, 0), UpdateTile(brown, 0, 1), UpdateTile(white, 0, 2), UpdateTile(yellow, 0, 3), UpdateTile(brown, 0, 4)]
[After]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateTile(brown, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
}


[!!!!!!!!to remove]:getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[getId; B(agentId(ID)); getRole(ID); getPos]
[After]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos]
[After]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[getId; B(agentId(ID)); getRole(ID); getPos]
[After]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!to remove]:@ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!to remove]:@ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos
[Planbase]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[@ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos]
[After]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
}


object notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-05-29 10:26:29.028, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-05-29 10:26:29.028, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-05-29 10:26:29.028, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-05-29 10:26:29.028, clock=0]
[Planbase]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[getId; B(agentId(ID)); getRole(ID); getPos]
[After]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[@ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos]
[After]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[!!!!!!!!to remove]:GetAgentId(0); B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!to remove]:@ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:GetAgentId(2); B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
Event processed UpdateTile(blue, 0, 5)
[Planbase]:{	GetAgentId(0);
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateTile(blue, 0, 5)
}


[new scheduled]:[GetAgentId(0); B(agentId(ID)); getRole(ID); getPos, UpdateTile(blue, 0, 5)]
[After]:{	GetAgentId(0);
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateTile(blue, 0, 5)
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
Event processed UpdateTile(blue, 0, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
Event processed UpdateTile(blue, 0, 5)
[Planbase]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateTile(blue, 0, 5)
}


[new scheduled]:[@ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos, UpdateTile(blue, 0, 5)]
[After]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateTile(blue, 0, 5)
}


[Planbase]:{	GetAgentId(2);
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateTile(blue, 0, 5)
}


[new scheduled]:[GetAgentId(2); B(agentId(ID)); getRole(ID); getPos, UpdateTile(blue, 0, 5)]
[After]:{	GetAgentId(2);
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateTile(blue, 0, 5)
}


[!!!!!!!!to remove]:B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:GetAgentId(3); B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:
[Planbase]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[B(agentId(ID)); getRole(ID); getPos]
[After]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[B(agentId(ID)); getRole(ID); getPos]
[After]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	GetAgentId(3);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[GetAgentId(3); B(agentId(ID)); getRole(ID); getPos]
[After]:{	GetAgentId(3);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[!!!!!!!!to remove]:getRole(0); getPos
[!!!!!!!!to remove]:getRole(2); getPos
[!!!!!!!!to remove]:B(agentId(ID)); getRole(ID); getPos
[Planbase]:{	getRole(0);
	getPos
}


[new scheduled]:[getRole(0); getPos]
[After]:{	getRole(0);
	getPos
}


[Planbase]:{	getRole(2);
	getPos
}


[new scheduled]:[getRole(2); getPos]
[After]:{	getRole(2);
	getPos
}


[Planbase]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[B(agentId(ID)); getRole(ID); getPos]
[After]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!to remove]:@ctenv(getRole(0),L1,0); B(L1=[actionresult(X)]); GetRole(0, X); getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!to remove]:@ctenv(getRole(2),L1,0); B(L1=[actionresult(X)]); GetRole(2, X); getPos
[!!!!!!!!to remove]:getRole(3); getPos
[Planbase]:{	@ctenv(getRole(0),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(0, X);
	getPos
}


[new scheduled]:[@ctenv(getRole(0),L1,0); B(L1=[actionresult(X)]); GetRole(0, X); getPos]
[After]:{	@ctenv(getRole(0),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(0, X);
	getPos
}


[Planbase]:{	@ctenv(getRole(2),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(2, X);
	getPos
}


[new scheduled]:[@ctenv(getRole(2),L1,0); B(L1=[actionresult(X)]); GetRole(2, X); getPos]
[After]:{	@ctenv(getRole(2),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(2, X);
	getPos
}


[Planbase]:{	getRole(3);
	getPos
}


[new scheduled]:[getRole(3); getPos]
[After]:{	getRole(3);
	getPos
}


[!!!!!!!!to remove]:GetRole(0, ra); getPos
[!!!!!!!!to remove]:GetRole(2, none); getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!to remove]:@ctenv(getRole(3),L1,0); B(L1=[actionresult(X)]); GetRole(3, X); getPos
[Planbase]:{	GetRole(0, ra);
	getPos
}


[new scheduled]:[GetRole(0, ra); getPos]
[After]:{	GetRole(0, ra);
	getPos
}


[Planbase]:{	GetRole(2, none);
	getPos
}


[new scheduled]:[GetRole(2, none); getPos]
[After]:{	GetRole(2, none);
	getPos
}


[Planbase]:{	@ctenv(getRole(3),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(3, X);
	getPos
}


[new scheduled]:[@ctenv(getRole(3),L1,0); B(L1=[actionresult(X)]); GetRole(3, X); getPos]
[After]:{	@ctenv(getRole(3),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(3, X);
	getPos
}


[!!!!!!!!to remove]:getPos
[!!!!!!!!to remove]:getPos
[!!!!!!!!to remove]:GetRole(3, none); getPos
[Planbase]:{	getPos
}


[new scheduled]:[getPos]
[After]:{	getPos
}


[Planbase]:{	getPos
}


[new scheduled]:[getPos]
[After]:{	getPos
}


[Planbase]:{	GetRole(3, none);
	getPos
}


[new scheduled]:[GetRole(3, none); getPos]
[After]:{	GetRole(3, none);
	getPos
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!to remove]:@ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!to remove]:@ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)
[!!!!!!!!to remove]:getPos
[Planbase]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[new scheduled]:[@ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)]
[After]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[Planbase]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[new scheduled]:[@ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)]
[After]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[Planbase]:{	getPos
}


[new scheduled]:[getPos]
[After]:{	getPos
}


[CTAH] Agentposition: [0,0]
[!!!!!!!!to remove]:B(clock(C)); GetAgentPos(0, 0, C)
[CTAH] Agentposition: [6,6]
[!!!!!!!!to remove]:B(clock(C)); GetAgentPos(6, 6, C)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!to remove]:@ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)
[Planbase]:{	B(clock(C));
	GetAgentPos(0, 0, C)
}


[new scheduled]:[B(clock(C)); GetAgentPos(0, 0, C)]
[After]:{	B(clock(C));
	GetAgentPos(0, 0, C)
}


[Planbase]:{	B(clock(C));
	GetAgentPos(6, 6, C)
}


[new scheduled]:[B(clock(C)); GetAgentPos(6, 6, C)]
[After]:{	B(clock(C));
	GetAgentPos(6, 6, C)
}


[Planbase]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[new scheduled]:[@ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)]
[After]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[!!!!!!!!to remove]:GetAgentPos(0, 0, 0)
[!!!!!!!!to remove]:GetAgentPos(6, 6, 0)
[CTAH] Agentposition: [0,6]
[!!!!!!!!to remove]:B(clock(C)); GetAgentPos(0, 6, C)
[Planbase]:{	GetAgentPos(0, 0, 0)
}


[new scheduled]:[GetAgentPos(0, 0, 0)]
[After]:{	GetAgentPos(0, 0, 0)
}


[Planbase]:{	GetAgentPos(6, 6, 0)
}


[new scheduled]:[GetAgentPos(6, 6, 0)]
[After]:{	GetAgentPos(6, 6, 0)
}


[Planbase]:{	B(clock(C));
	GetAgentPos(0, 6, C)
}


[new scheduled]:[B(clock(C)); GetAgentPos(0, 6, C)]
[After]:{	B(clock(C));
	GetAgentPos(0, 6, C)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:GetAgentPos(0, 6, 0)
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	GetAgentPos(0, 6, 0)
}


[new scheduled]:[GetAgentPos(0, 6, 0)]
[After]:{	GetAgentPos(0, 6, 0)
}


[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


object notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-05-29 10:26:29.031, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-05-29 10:26:29.031, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-05-29 10:26:29.031, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-05-29 10:26:29.031, clock=0]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
Event processed UpdateTile(brown, 0, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
Event processed UpdateTile(brown, 0, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
Event processed UpdateTile(brown, 0, 6)
[Planbase]:{	UpdateTile(brown, 0, 6)
}


[new scheduled]:[UpdateTile(brown, 0, 6)]
[After]:{	UpdateTile(brown, 0, 6)
}


[Planbase]:{	UpdateTile(brown, 0, 6)
}


[new scheduled]:[UpdateTile(brown, 0, 6)]
[After]:{	UpdateTile(brown, 0, 6)
}


[Planbase]:{	UpdateTile(brown, 0, 6)
}


[new scheduled]:[UpdateTile(brown, 0, 6)]
[After]:{	UpdateTile(brown, 0, 6)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


org notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-05-29 10:26:29.035, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-05-29 10:26:29.035, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-05-29 10:26:29.035, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-05-29 10:26:29.035, clock=0]
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
Event processed UpdateTile(brown, 1, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
Event processed UpdateTile(brown, 1, 0)
[Planbase]:{	UpdateTile(brown, 1, 0)
}


[new scheduled]:[UpdateTile(brown, 1, 0)]
[After]:{	UpdateTile(brown, 1, 0)
}


[Planbase]:{	UpdateTile(brown, 1, 0)
}


[new scheduled]:[UpdateTile(brown, 1, 0)]
[After]:{	UpdateTile(brown, 1, 0)
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
Event processed UpdateTile(brown, 1, 0)
[!!!!!!!!to remove]:
[Planbase]:{	UpdateTile(brown, 1, 0)
}


[new scheduled]:[UpdateTile(brown, 1, 0)]
[After]:{	UpdateTile(brown, 1, 0)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Tile [id=null, cell=Cell [x=1, y=1], subject=yellow, time=2015-05-29 10:26:29.037, clock=0]
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
Event processed UpdateTile(yellow, 1, 1)
[Planbase]:{	UpdateTile(yellow, 1, 1)
}


[new scheduled]:[UpdateTile(yellow, 1, 1)]
[After]:{	UpdateTile(yellow, 1, 1)
}


[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


object notification: Tile [id=null, cell=Cell [x=1, y=1], subject=yellow, time=2015-05-29 10:26:29.037, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=1], subject=yellow, time=2015-05-29 10:26:29.037, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=1], subject=yellow, time=2015-05-29 10:26:29.037, clock=0]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
Event processed UpdateTile(yellow, 1, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
Event processed UpdateTile(yellow, 1, 1)
[Planbase]:{	UpdateTile(yellow, 1, 1)
}


[new scheduled]:[UpdateTile(yellow, 1, 1)]
[After]:{	UpdateTile(yellow, 1, 1)
}


[Planbase]:{	UpdateTile(yellow, 1, 1)
}


[new scheduled]:[UpdateTile(yellow, 1, 1)]
[After]:{	UpdateTile(yellow, 1, 1)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Tile [id=null, cell=Cell [x=1, y=2], subject=white, time=2015-05-29 10:26:29.04, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=2], subject=white, time=2015-05-29 10:26:29.04, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=2], subject=white, time=2015-05-29 10:26:29.04, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=2], subject=white, time=2015-05-29 10:26:29.04, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=3], subject=white, time=2015-05-29 10:26:29.046, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=3], subject=white, time=2015-05-29 10:26:29.046, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=3], subject=white, time=2015-05-29 10:26:29.046, clock=0]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
Event processed UpdateTile(white, 1, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
Event processed UpdateTile(white, 1, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
Event processed UpdateTile(white, 1, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
Event processed UpdateTile(white, 1, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
Event processed UpdateTile(white, 1, 3)
[Planbase]:{	UpdateTile(white, 1, 2)
},
{	UpdateTile(white, 1, 3)
}


[new scheduled]:[UpdateTile(white, 1, 2), UpdateTile(white, 1, 3)]
[After]:{	UpdateTile(white, 1, 2)
},
{	UpdateTile(white, 1, 3)
}


[Planbase]:{	UpdateTile(white, 1, 2)
}


[new scheduled]:[UpdateTile(white, 1, 2)]
[After]:{	UpdateTile(white, 1, 2)
}


[Planbase]:{	UpdateTile(white, 1, 2)
},
{	UpdateTile(white, 1, 3)
}


[new scheduled]:[UpdateTile(white, 1, 2), UpdateTile(white, 1, 3)]
[After]:{	UpdateTile(white, 1, 2)
},
{	UpdateTile(white, 1, 3)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Tile [id=null, cell=Cell [x=1, y=3], subject=white, time=2015-05-29 10:26:29.046, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=4], subject=blue, time=2015-05-29 10:26:29.053, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=4], subject=blue, time=2015-05-29 10:26:29.053, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=4], subject=blue, time=2015-05-29 10:26:29.053, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=4], subject=blue, time=2015-05-29 10:26:29.053, clock=0]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
Event processed UpdateTile(white, 1, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
Event processed UpdateTile(blue, 1, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
Event processed UpdateTile(blue, 1, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[Planbase]:{	UpdateTile(white, 1, 3)
},
{	UpdateTile(blue, 1, 4)
}


[!!!!!!!!pc rule head]:update
[new scheduled]:[UpdateTile(white, 1, 3), UpdateTile(blue, 1, 4)]
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[After]:{	UpdateTile(white, 1, 3)
},
{	UpdateTile(blue, 1, 4)
}


[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
Event processed UpdateTile(blue, 1, 4)
[Planbase]:{	UpdateTile(blue, 1, 4)
}


[new scheduled]:[UpdateTile(blue, 1, 4)]
[After]:{	UpdateTile(blue, 1, 4)
}


[Planbase]:{	UpdateTile(blue, 1, 4)
}


[new scheduled]:[UpdateTile(blue, 1, 4)]
[After]:{	UpdateTile(blue, 1, 4)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-05-29 10:26:29.056, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-05-29 10:26:29.056, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-05-29 10:26:29.056, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-05-29 10:26:29.056, clock=0]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
Event processed UpdateTile(brown, 1, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
Event processed UpdateTile(brown, 1, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
Event processed UpdateTile(brown, 1, 5)
[Planbase]:{	UpdateTile(brown, 1, 5)
}


[new scheduled]:[UpdateTile(brown, 1, 5)]
[After]:{	UpdateTile(brown, 1, 5)
}


[Planbase]:{	UpdateTile(brown, 1, 5)
}


[new scheduled]:[UpdateTile(brown, 1, 5)]
[After]:{	UpdateTile(brown, 1, 5)
}


[Planbase]:{	UpdateTile(brown, 1, 5)
}


[new scheduled]:[UpdateTile(brown, 1, 5)]
[After]:{	UpdateTile(brown, 1, 5)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
object notification: Tile [id=null, cell=Cell [x=1, y=6], subject=yellow, time=2015-05-29 10:26:29.058, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=6], subject=yellow, time=2015-05-29 10:26:29.058, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=6], subject=yellow, time=2015-05-29 10:26:29.058, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=6], subject=yellow, time=2015-05-29 10:26:29.058, clock=0]
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
Event processed UpdateTile(yellow, 1, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[Planbase]:


[new scheduled]:[]
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[After]:


[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
Event processed UpdateTile(yellow, 1, 6)
[Planbase]:{	UpdateTile(yellow, 1, 6)
}


[new scheduled]:[UpdateTile(yellow, 1, 6)]
[After]:{	UpdateTile(yellow, 1, 6)
}


[Planbase]:{	UpdateTile(yellow, 1, 6)
}


[new scheduled]:[UpdateTile(yellow, 1, 6)]
[After]:{	UpdateTile(yellow, 1, 6)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
Event processed UpdateTile(yellow, 1, 6)
[Planbase]:{	UpdateTile(yellow, 1, 6)
}


[new scheduled]:[UpdateTile(yellow, 1, 6)]
[After]:{	UpdateTile(yellow, 1, 6)
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


object notification: Tile [id=null, cell=Cell [x=2, y=0], subject=white, time=2015-05-29 10:26:29.06, clock=0]
[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
Event processed UpdateTile(white, 2, 0)
[Planbase]:{	UpdateTile(white, 2, 0)
}


[new scheduled]:[UpdateTile(white, 2, 0)]
[After]:{	UpdateTile(white, 2, 0)
}


[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


setPhases in ClientGameStatus, the current phase is Communication Phase
setPhases in ClientGameStatus, the current phase is Communication Phase
setPhases in ClientGameStatus, the current phase is Communication Phase
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(at(X, Y, _), D, reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(surround(X, Y), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(color(Color, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(acceptRequest(Id), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(makeMove(X, Y, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(FUNCTION, NAME)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(at(X, Y, _), D, reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(surround(X, Y), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(color(Color, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(acceptRequest(Id), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(makeMove(X, Y, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(FUNCTION, NAME)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(at(X, Y, _), D, reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(surround(X, Y), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(color(Color, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(acceptRequest(Id), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(makeMove(X, Y, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(FUNCTION, NAME)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@1bca52f3
[CTAH] The created APLList : [phasechange]
[!!!!!!!!to remove]:if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[CTAH] Array of Terms: [Lapapl.data.Term;@17e581f9
[CTAH] The created APLList : [phasechange]
[!!!!!!!!to remove]:if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[CTAH] Array of Terms: [Lapapl.data.Term;@413eabd9
[CTAH] The created APLList : [phasechange]
[!!!!!!!!to remove]:if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[!!!!!!!!to remove]:ReceivedEvent(phasechange)
[!!!!!!!!to remove]:ReceivedEvent(phasechange)
[!!!!!!!!to remove]:ReceivedEvent(phasechange)
[Planbase]:{	ReceivedEvent(phasechange)
}


[new scheduled]:[ReceivedEvent(phasechange)]
[After]:{	ReceivedEvent(phasechange)
}


[Planbase]:{	ReceivedEvent(phasechange)
}


[new scheduled]:[ReceivedEvent(phasechange)]
[After]:{	ReceivedEvent(phasechange)
}


[Planbase]:{	ReceivedEvent(phasechange)
}


[new scheduled]:[ReceivedEvent(phasechange)]
[After]:{	ReceivedEvent(phasechange)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[update]
[After]:{	update
}


[Planbase]:


[new scheduled]:[update]
[After]:{	update
}


[Planbase]:


[new scheduled]:[update]
[After]:{	update
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!to remove]:getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!to remove]:getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!to remove]:getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated
[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[!!!!!!!!to remove]:GetPhase(communicationphase); B(clock(Clock)); if B(event(phasechange)) then Updated
[!!!!!!!!to remove]:GetPhase(communicationphase); B(clock(Clock)); if B(event(phasechange)) then Updated
[!!!!!!!!to remove]:GetPhase(communicationphase); B(clock(Clock)); if B(event(phasechange)) then Updated
[Planbase]:{	GetPhase(communicationphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[GetPhase(communicationphase); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	GetPhase(communicationphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	GetPhase(communicationphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[GetPhase(communicationphase); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	GetPhase(communicationphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	GetPhase(communicationphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[GetPhase(communicationphase); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	GetPhase(communicationphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[!!!!!!!!to remove]:B(clock(Clock)); if B(event(phasechange)) then Updated
[!!!!!!!!to remove]:B(clock(Clock)); if B(event(phasechange)) then Updated
[!!!!!!!!to remove]:B(clock(Clock)); if B(event(phasechange)) then Updated
[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[!!!!!!!!to remove]:if B(event(phasechange)) then Updated
[!!!!!!!!to remove]:if B(event(phasechange)) then Updated
[!!!!!!!!to remove]:if B(event(phasechange)) then Updated
[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[if B(event(phasechange)) then Updated]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[if B(event(phasechange)) then Updated]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[if B(event(phasechange)) then Updated]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
}


[!!!!!!!!to remove]:Updated
[!!!!!!!!to remove]:Updated
[!!!!!!!!to remove]:Updated
object notification: Tile [id=null, cell=Cell [x=2, y=0], subject=white, time=2015-05-29 10:26:29.06, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=0], subject=white, time=2015-05-29 10:26:29.06, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=0], subject=white, time=2015-05-29 10:26:29.06, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-05-29 10:26:29.073, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-05-29 10:26:29.073, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=2], subject=brown, time=2015-05-29 10:26:29.078, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=3], subject=blue, time=2015-05-29 10:26:29.08, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=4], subject=white, time=2015-05-29 10:26:29.082, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-05-29 10:26:29.073, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=2], subject=brown, time=2015-05-29 10:26:29.078, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-05-29 10:26:29.083, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-05-29 10:26:29.085, clock=0]
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
Event processed UpdateTile(white, 2, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
Event processed UpdateTile(white, 2, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
Event processed UpdateTile(brown, 2, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
object notification: Tile [id=null, cell=Cell [x=2, y=3], subject=blue, time=2015-05-29 10:26:29.08, clock=0]
Event processed UpdateTile(blue, 2, 3)
object notification: Tile [id=null, cell=Cell [x=2, y=4], subject=white, time=2015-05-29 10:26:29.082, clock=0]
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
Event processed UpdateTile(white, 2, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-05-29 10:26:29.073, clock=0]
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
Event processed UpdateTile(white, 2, 0)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=2, y=2], subject=brown, time=2015-05-29 10:26:29.078, clock=0]
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
Event processed UpdateTile(brown, 2, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
Event processed UpdateTile(brown, 2, 6)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
Event processed UpdateTile(white, 2, 1)
org notification: Tile [id=null, cell=Cell [x=2, y=3], subject=blue, time=2015-05-29 10:26:29.08, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=4], subject=white, time=2015-05-29 10:26:29.082, clock=0]
org notification: Goal [id=null, cell=Cell [x=3, y=3], agent=null, time=2015-05-29 10:26:29.22, clock=0]
Error while procession organization notification
java.lang.ArrayIndexOutOfBoundsException: -1
	at aplprolog.Parsing.IntPrologTokenManager.jjMoveNfa_0(IntPrologTokenManager.java:343)
	at aplprolog.Parsing.IntPrologTokenManager.jjMoveStringLiteralDfa0_0(IntPrologTokenManager.java:131)
	at aplprolog.Parsing.IntPrologTokenManager.getNextToken(IntPrologTokenManager.java:1042)
	at aplprolog.Parsing.IntProlog.jj_ntk(IntProlog.java:1333)
	at aplprolog.Parsing.IntProlog.PosLiteral(IntProlog.java:315)
	at aplprolog.Parsing.IntProlog.Rule(IntProlog.java:250)
	at aplprolog.Parsing.IntProlog.parseFact(IntProlog.java:80)
	at ctMW.EnvCT.notifyOrg(EnvCT.java:700)
	at ctMW.OrgHandler.notify(OrgHandler.java:31)
	at com.j_spaces.core.client.NotifyDelegator.notify(NotifyDelegator.java:142)
	at com.gigaspaces.events.fifo.BlockedOrderedQueue$NotifyFifoTask.dequeueAndTrigger(BlockedOrderedQueue.java:319)
	at com.gigaspaces.events.fifo.BlockedOrderedQueue$NotifyFifoTask.run(BlockedOrderedQueue.java:290)
	at com.gigaspaces.internal.utils.concurrent.RunnableContextClassLoaderDecorator.run(RunnableContextClassLoaderDecorator.java:40)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
	at java.lang.Thread.run(Thread.java:695)
org notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-05-29 10:26:29.083, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-05-29 10:26:29.085, clock=0]
org notification: Tile [id=null, cell=Cell [x=3, y=0], subject=white, time=2015-05-29 10:26:29.087, clock=0]
org notification: Tile [id=null, cell=Cell [x=3, y=1], subject=yellow, time=2015-05-29 10:26:29.089, clock=0]
object notification: Time [clock=1, time=2015-05-29 10:26:33.504]
org notification: Group [name=g, ra=a10, clock=0, time=2015-05-29 10:26:29.279]
org notification: Time [clock=1, time=2015-05-29 10:26:33.504]
object notification: Time [clock=2, time=2015-05-29 10:26:43.529]
object notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-05-29 10:26:29.083, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=0], subject=white, time=2015-05-29 10:26:29.087, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-05-29 10:26:29.085, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=1], subject=yellow, time=2015-05-29 10:26:29.089, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=0], subject=white, time=2015-05-29 10:26:29.087, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=2], subject=blue, time=2015-05-29 10:26:29.091, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=1], subject=yellow, time=2015-05-29 10:26:29.089, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=3], subject=blue, time=2015-05-29 10:26:29.092, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-05-29 10:26:29.094, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-05-29 10:26:29.096, clock=0]
object notification: Time [clock=1, time=2015-05-29 10:26:33.504]
object notification: Tile [id=null, cell=Cell [x=3, y=6], subject=white, time=2015-05-29 10:26:29.098, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=2], subject=brown, time=2015-05-29 10:26:29.078, clock=0]
object notification: Time [clock=3, time=2015-05-29 10:26:53.532]
object notification: Tile [id=null, cell=Cell [x=3, y=2], subject=blue, time=2015-05-29 10:26:29.091, clock=0]
org notification: Tile [id=null, cell=Cell [x=3, y=2], subject=blue, time=2015-05-29 10:26:29.091, clock=0]
object notification: Time [clock=2, time=2015-05-29 10:26:43.529]
object notification: Tile [id=null, cell=Cell [x=2, y=3], subject=blue, time=2015-05-29 10:26:29.08, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=4], subject=white, time=2015-05-29 10:26:29.082, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-05-29 10:26:29.083, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-05-29 10:26:29.085, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=0], subject=white, time=2015-05-29 10:26:29.087, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=1], subject=yellow, time=2015-05-29 10:26:29.089, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=2], subject=blue, time=2015-05-29 10:26:29.091, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=3], subject=blue, time=2015-05-29 10:26:29.092, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-05-29 10:26:29.094, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-05-29 10:26:29.096, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=6], subject=white, time=2015-05-29 10:26:29.098, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=0], subject=brown, time=2015-05-29 10:26:29.099, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-05-29 10:26:29.101, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-05-29 10:26:29.102, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=3], subject=blue, time=2015-05-29 10:26:29.104, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=3], subject=blue, time=2015-05-29 10:26:29.092, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-05-29 10:26:29.106, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=0], subject=brown, time=2015-05-29 10:26:29.099, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-05-29 10:26:29.094, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=5], subject=yellow, time=2015-05-29 10:26:29.107, clock=0]
object notification: Time [clock=3, time=2015-05-29 10:26:53.532]
object notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-05-29 10:26:29.101, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-05-29 10:26:29.109, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=0], subject=yellow, time=2015-05-29 10:26:29.111, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-05-29 10:26:29.096, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-05-29 10:26:29.113, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=2], subject=brown, time=2015-05-29 10:26:29.115, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=3], subject=yellow, time=2015-05-29 10:26:29.117, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=4], subject=blue, time=2015-05-29 10:26:29.119, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=5], subject=brown, time=2015-05-29 10:26:29.121, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-05-29 10:26:29.123, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=0], subject=blue, time=2015-05-29 10:26:29.125, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=1], subject=brown, time=2015-05-29 10:26:29.127, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=2], subject=white, time=2015-05-29 10:26:29.129, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=3], subject=brown, time=2015-05-29 10:26:29.13, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=4], subject=white, time=2015-05-29 10:26:29.132, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=5], subject=brown, time=2015-05-29 10:26:29.134, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-05-29 10:26:29.135, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=6], subject=white, time=2015-05-29 10:26:29.098, clock=0]
object notification: Time [clock=1, time=2015-05-29 10:26:33.504]
object notification: Time [clock=2, time=2015-05-29 10:26:43.529]
object notification: Tile [id=null, cell=Cell [x=4, y=0], subject=brown, time=2015-05-29 10:26:29.099, clock=0]
object notification: Time [clock=3, time=2015-05-29 10:26:53.532]
object notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-05-29 10:26:29.101, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-05-29 10:26:29.102, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=3], subject=blue, time=2015-05-29 10:26:29.104, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-05-29 10:26:29.106, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=5], subject=yellow, time=2015-05-29 10:26:29.107, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-05-29 10:26:29.102, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-05-29 10:26:29.109, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=0], subject=yellow, time=2015-05-29 10:26:29.111, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-05-29 10:26:29.113, clock=0]
object notification: Prohibition [subject=a10, prohibition=[rejectRequests(a10)], sanction=[reduce(a10, 500)], clock=3, time=2015-05-29 10:27:00.455]
object notification: Tile [id=null, cell=Cell [x=5, y=2], subject=brown, time=2015-05-29 10:26:29.115, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=3], subject=yellow, time=2015-05-29 10:26:29.117, clock=0]
org notification: Tile [id=null, cell=Cell [x=3, y=3], subject=blue, time=2015-05-29 10:26:29.092, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=4], subject=blue, time=2015-05-29 10:26:29.119, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=5], subject=brown, time=2015-05-29 10:26:29.121, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-05-29 10:26:29.123, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=0], subject=blue, time=2015-05-29 10:26:29.125, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=1], subject=brown, time=2015-05-29 10:26:29.127, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=2], subject=white, time=2015-05-29 10:26:29.129, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=3], subject=brown, time=2015-05-29 10:26:29.13, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=4], subject=white, time=2015-05-29 10:26:29.132, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=5], subject=brown, time=2015-05-29 10:26:29.134, clock=0]
[Planbase]:{	Updated
},
{	UpdateTile(white, 2, 0)
},
{	UpdateTile(white, 2, 1)
}


[new scheduled]:[Updated, UpdateTile(white, 2, 0), UpdateTile(white, 2, 1)]
[After]:{	Updated
},
{	UpdateTile(white, 2, 0)
},
{	UpdateTile(white, 2, 1)
}


org notification: Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-05-29 10:26:29.094, clock=0]
org notification: Time [clock=2, time=2015-05-29 10:26:43.529]
Error while procession organization notification
java.lang.NumberFormatException: For input string: ")."
	at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1222)
	at java.lang.Double.parseDouble(Double.java:510)
	at aplprolog.Parsing.IntProlog.Number(IntProlog.java:516)
	at aplprolog.Parsing.IntProlog.Argument(IntProlog.java:400)
	at aplprolog.Parsing.IntProlog.Arguments(IntProlog.java:360)
	at aplprolog.Parsing.IntProlog.PosLiteral(IntProlog.java:317)
	at aplprolog.Parsing.IntProlog.Rule(IntProlog.java:250)
	at aplprolog.Parsing.IntProlog.parseFact(IntProlog.java:80)
	at ctMW.EnvCT.notifyOrg(EnvCT.java:700)
	at ctMW.OrgHandler.notify(OrgHandler.java:31)
	at com.j_spaces.core.client.NotifyDelegator.notify(NotifyDelegator.java:142)
	at com.gigaspaces.events.fifo.BlockedOrderedQueue$NotifyFifoTask.dequeueAndTrigger(BlockedOrderedQueue.java:319)
	at com.gigaspaces.events.fifo.BlockedOrderedQueue$NotifyFifoTask.run(BlockedOrderedQueue.java:290)
	at com.gigaspaces.internal.utils.concurrent.RunnableContextClassLoaderDecorator.run(RunnableContextClassLoaderDecorator.java:40)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
	at java.lang.Thread.run(Thread.java:695)
org notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-05-29 10:26:29.096, clock=0]
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
aplprolog.Parsing.ParseException: Encountered " ")" ") "" at line 1, column 24.
Was expecting one of:
    <INTEGER_LITERAL> ...
    <FLOATING_POINT_LITERAL> ...
    <CHARACTER_LITERAL> ...
    <STD_IDENTIFIER> ...
    <VAR_IDENTIFIER> ...
    "(" ...
    "[" ...
    ";" ...
    "!" ...
    "-" ...
    "->" ...
    "\\+" ...
    "|" ...
    "-" ...
    <STD_IDENTIFIER> ...
    <CHARACTER_LITERAL> ...
    "->" ...
    ";" ...
    "|" ...
    "\\+" ...
    <INTEGER_LITERAL> ...
    <FLOATING_POINT_LITERAL> ...
    <VAR_IDENTIFIER> ...
    "!" ...
    "(" ...
    "[" ...
    
Error while procession organization notification
java.lang.NullPointerException
	at oopl.DistributedOOPL.handleEvent(DistributedOOPL.java:49)
	at ctMW.EnvCT.notifyOrg(EnvCT.java:700)
	at ctMW.OrgHandler.notify(OrgHandler.java:31)
	at com.j_spaces.core.client.NotifyDelegator.notify(NotifyDelegator.java:142)
	at com.gigaspaces.events.fifo.BlockedOrderedQueue$NotifyFifoTask.dequeueAndTrigger(BlockedOrderedQueue.java:319)
	at com.gigaspaces.events.fifo.BlockedOrderedQueue$NotifyFifoTask.run(BlockedOrderedQueue.java:290)
	at com.gigaspaces.internal.utils.concurrent.RunnableContextClassLoaderDecorator.run(RunnableContextClassLoaderDecorator.java:40)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
	at java.lang.Thread.run(Thread.java:695)
org notification: Time [clock=3, time=2015-05-29 10:26:53.532]
[Planbase]:{	Updated
}


[new scheduled]:[Updated]
[After]:{	Updated
}


org notification: Tile [id=null, cell=Cell [x=3, y=6], subject=white, time=2015-05-29 10:26:29.098, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-05-29 10:26:29.135, clock=0]
[Planbase]:{	Updated
},
{	UpdateTile(white, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateTile(brown, 2, 2)
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
}


[new scheduled]:[Updated, UpdateTile(white, 2, 0), UpdateTile(white, 2, 1), UpdateTile(brown, 2, 2), UpdateTile(blue, 2, 3), UpdateTile(white, 2, 4), UpdateTile(brown, 2, 5), UpdateTile(brown, 2, 6)]
[After]:{	Updated
},
{	UpdateTile(white, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateTile(brown, 2, 2)
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
}


object notification: Tile [id=null, cell=Cell [x=4, y=3], subject=blue, time=2015-05-29 10:26:29.104, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-05-29 10:26:29.106, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=5], subject=yellow, time=2015-05-29 10:26:29.107, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-05-29 10:26:29.109, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=0], subject=yellow, time=2015-05-29 10:26:29.111, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-05-29 10:26:29.113, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=2], subject=brown, time=2015-05-29 10:26:29.115, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=3], subject=yellow, time=2015-05-29 10:26:29.117, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=4], subject=blue, time=2015-05-29 10:26:29.119, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=5], subject=brown, time=2015-05-29 10:26:29.121, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-05-29 10:26:29.123, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=0], subject=blue, time=2015-05-29 10:26:29.125, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=1], subject=brown, time=2015-05-29 10:26:29.127, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=2], subject=white, time=2015-05-29 10:26:29.129, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=3], subject=brown, time=2015-05-29 10:26:29.13, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=4], subject=white, time=2015-05-29 10:26:29.132, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=5], subject=brown, time=2015-05-29 10:26:29.134, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-05-29 10:26:29.135, clock=0]
org notification: Tile [id=null, cell=Cell [x=4, y=0], subject=brown, time=2015-05-29 10:26:29.099, clock=0]
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
org notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-05-29 10:26:29.101, clock=0]
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
org notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-05-29 10:26:29.102, clock=0]
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
Event processed UpdateClock(1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
Event processed UpdateTile(brown, 2, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
Event processed UpdateClock(2)
org notification: Tile [id=null, cell=Cell [x=4, y=3], subject=blue, time=2015-05-29 10:26:29.104, clock=0]
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
Event processed UpdateTile(blue, 2, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
Event processed UpdateTile(white, 2, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-05-29 10:26:29.106, clock=0]
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
Event processed UpdateTile(brown, 2, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
Event processed UpdateTile(brown, 2, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
Event processed UpdateTile(white, 3, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=4, y=5], subject=yellow, time=2015-05-29 10:26:29.107, clock=0]
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
Event processed UpdateTile(yellow, 3, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
Event processed UpdateTile(blue, 3, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
Event processed UpdateTile(blue, 3, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-05-29 10:26:29.109, clock=0]
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
Event processed UpdateTile(yellow, 3, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
Event processed UpdateTile(yellow, 3, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=5, y=0], subject=yellow, time=2015-05-29 10:26:29.111, clock=0]
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
Event processed UpdateTile(white, 3, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
Event processed UpdateTile(brown, 4, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
Event processed UpdateTile(blue, 4, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-05-29 10:26:29.113, clock=0]
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
Event processed UpdateTile(yellow, 4, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
Event processed UpdateTile(blue, 4, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=5, y=2], subject=brown, time=2015-05-29 10:26:29.115, clock=0]
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
Event processed UpdateTile(brown, 4, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
Event processed UpdateTile(yellow, 4, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
org notification: Tile [id=null, cell=Cell [x=5, y=3], subject=yellow, time=2015-05-29 10:26:29.117, clock=0]
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
Event processed UpdateClock(3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
Event processed UpdateTile(brown, 4, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
Event processed UpdateTile(yellow, 5, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=5, y=4], subject=blue, time=2015-05-29 10:26:29.119, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=5], subject=brown, time=2015-05-29 10:26:29.121, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-05-29 10:26:29.123, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=0], subject=blue, time=2015-05-29 10:26:29.125, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=1], subject=brown, time=2015-05-29 10:26:29.127, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=2], subject=white, time=2015-05-29 10:26:29.129, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=3], subject=brown, time=2015-05-29 10:26:29.13, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=4], subject=white, time=2015-05-29 10:26:29.132, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=5], subject=brown, time=2015-05-29 10:26:29.134, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-05-29 10:26:29.135, clock=0]
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
Event processed UpdateTile(white, 5, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
Event processed UpdateTile(brown, 5, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
Event processed UpdateTile(yellow, 5, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
Event processed UpdateTile(blue, 5, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
Event processed UpdateTile(brown, 5, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
Event processed UpdateTile(white, 5, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
Event processed UpdateTile(blue, 6, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
Event processed UpdateTile(brown, 6, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
Event processed UpdateTile(white, 6, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
Event processed UpdateTile(brown, 6, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
Event processed UpdateTile(white, 6, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
Event processed UpdateTile(brown, 6, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
Event processed UpdateTile(white, 6, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
Event processed UpdateTile(white, 2, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
Event processed UpdateTile(brown, 2, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
Event processed UpdateTile(blue, 2, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
Event processed UpdateTile(white, 2, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
Event processed UpdateTile(brown, 2, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
Event processed UpdateTile(brown, 2, 6)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
Event processed UpdateClock(1)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
Event processed UpdateClock(2)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
Event processed UpdateTile(white, 3, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
Event processed UpdateTile(yellow, 3, 1)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
Event processed UpdateTile(white, 3, 0)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
Event processed UpdateTile(blue, 3, 2)
Event processed UpdateTile(yellow, 3, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
Event processed UpdateTile(blue, 3, 3)
Event processed UpdateTile(blue, 3, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
Event processed UpdateTile(yellow, 3, 4)
Event processed UpdateTile(blue, 3, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
Event processed UpdateTile(yellow, 3, 5)
Event processed UpdateTile(yellow, 3, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
Event processed UpdateTile(white, 3, 6)
Event processed UpdateTile(yellow, 3, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
Event processed UpdateClock(1)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
Event processed UpdateTile(white, 3, 6)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
Event processed UpdateClock(2)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
Event processed UpdateClock(3)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
Event processed UpdateTile(brown, 4, 0)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
Event processed UpdateTile(brown, 4, 0)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
Event processed UpdateClock(3)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
Event processed UpdateTile(blue, 4, 1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
Event processed UpdateTile(blue, 4, 1)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
Event processed UpdateTile(yellow, 4, 2)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
Event processed UpdateTile(yellow, 4, 2)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
Event processed UpdateTile(blue, 4, 3)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
Event processed adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
Event processed UpdateTile(brown, 4, 4)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
Event processed UpdateTile(blue, 4, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
Event processed UpdateTile(yellow, 4, 5)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
Event processed UpdateTile(brown, 4, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
Event processed UpdateTile(brown, 4, 6)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
Event processed UpdateTile(yellow, 4, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
Event processed UpdateTile(yellow, 5, 0)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
Event processed UpdateTile(brown, 4, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
Event processed UpdateTile(white, 5, 1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
Event processed UpdateTile(yellow, 5, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
Event processed UpdateTile(brown, 5, 2)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
Event processed UpdateTile(white, 5, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
Event processed UpdateTile(yellow, 5, 3)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
Event processed UpdateTile(brown, 5, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
Event processed UpdateTile(blue, 5, 4)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
Event processed UpdateTile(yellow, 5, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
Event processed UpdateTile(brown, 5, 5)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
Event processed UpdateTile(blue, 5, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
Event processed UpdateTile(white, 5, 6)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
Event processed UpdateTile(brown, 5, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
Event processed UpdateTile(white, 5, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
Event processed UpdateTile(blue, 6, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
Event processed UpdateTile(brown, 6, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
Event processed UpdateTile(blue, 6, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[Planbase]:{	UpdateClock(1)
},
{	UpdateTile(brown, 2, 2)
},
{	UpdateClock(2)
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateClock(3)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[new scheduled]:[UpdateClock(1), UpdateTile(brown, 2, 2), UpdateClock(2), UpdateTile(blue, 2, 3), UpdateTile(white, 2, 4), UpdateTile(brown, 2, 5), UpdateTile(brown, 2, 6), UpdateTile(white, 3, 0), UpdateTile(yellow, 3, 1), UpdateTile(blue, 3, 2), UpdateTile(blue, 3, 3), UpdateTile(yellow, 3, 4), UpdateTile(yellow, 3, 5), UpdateTile(white, 3, 6), UpdateTile(brown, 4, 0), UpdateTile(blue, 4, 1), UpdateTile(yellow, 4, 2), UpdateTile(blue, 4, 3), UpdateTile(brown, 4, 4), UpdateTile(yellow, 4, 5), UpdateClock(3), UpdateTile(brown, 4, 6), UpdateTile(yellow, 5, 0), UpdateTile(white, 5, 1), UpdateTile(brown, 5, 2), UpdateTile(yellow, 5, 3), UpdateTile(blue, 5, 4), UpdateTile(brown, 5, 5), UpdateTile(white, 5, 6), UpdateTile(blue, 6, 0), UpdateTile(brown, 6, 1), UpdateTile(white, 6, 2), UpdateTile(brown, 6, 3), UpdateTile(white, 6, 4), UpdateTile(brown, 6, 5), UpdateTile(white, 6, 6)]
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[After]:{	UpdateClock(1)
},
{	UpdateTile(brown, 2, 2)
},
{	UpdateClock(2)
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateClock(3)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
}


[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
Event processed UpdateTile(brown, 6, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
Event processed UpdateTile(white, 6, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
Event processed UpdateTile(brown, 6, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
Event processed UpdateTile(white, 6, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!to remove]:
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
Event processed UpdateTile(brown, 6, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!to remove]:
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
Event processed UpdateTile(white, 6, 6)
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
Event processed UpdateTile(white, 6, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
Event processed UpdateTile(brown, 6, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
Event processed UpdateTile(white, 6, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
Event processed UpdateTile(brown, 6, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
Event processed UpdateTile(white, 6, 6)
[Planbase]:{	UpdateTile(white, 2, 1)
},
{	UpdateTile(brown, 2, 2)
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateClock(1)
},
{	UpdateClock(2)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateClock(3)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
}


[new scheduled]:[UpdateTile(white, 2, 1), UpdateTile(brown, 2, 2), UpdateTile(blue, 2, 3), UpdateTile(white, 2, 4), UpdateTile(brown, 2, 5), UpdateTile(brown, 2, 6), UpdateTile(white, 3, 0), UpdateTile(yellow, 3, 1), UpdateTile(blue, 3, 2), UpdateTile(blue, 3, 3), UpdateTile(yellow, 3, 4), UpdateTile(yellow, 3, 5), UpdateTile(white, 3, 6), UpdateClock(1), UpdateClock(2), UpdateTile(brown, 4, 0), UpdateClock(3), UpdateTile(blue, 4, 1), UpdateTile(yellow, 4, 2), UpdateTile(blue, 4, 3), UpdateTile(brown, 4, 4), UpdateTile(yellow, 4, 5), UpdateTile(brown, 4, 6), UpdateTile(yellow, 5, 0), UpdateTile(white, 5, 1), UpdateTile(brown, 5, 2), UpdateTile(yellow, 5, 3), UpdateTile(blue, 5, 4), UpdateTile(brown, 5, 5), UpdateTile(white, 5, 6), UpdateTile(blue, 6, 0), UpdateTile(brown, 6, 1), UpdateTile(white, 6, 2), UpdateTile(brown, 6, 3), UpdateTile(white, 6, 4), UpdateTile(brown, 6, 5), UpdateTile(white, 6, 6)]
[After]:{	UpdateTile(white, 2, 1)
},
{	UpdateTile(brown, 2, 2)
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateClock(1)
},
{	UpdateClock(2)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateClock(3)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	UpdateClock(1)
},
{	UpdateClock(2)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateClock(3)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	adoptProhibition(rejectRequests(a10), reduce(a10, 500))
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
}


[new scheduled]:[UpdateClock(1), UpdateClock(2), UpdateTile(white, 3, 0), UpdateTile(yellow, 3, 1), UpdateTile(blue, 3, 2), UpdateTile(blue, 3, 3), UpdateTile(yellow, 3, 4), UpdateTile(yellow, 3, 5), UpdateTile(white, 3, 6), UpdateClock(3), UpdateTile(brown, 4, 0), UpdateTile(blue, 4, 1), UpdateTile(yellow, 4, 2), adoptProhibition(rejectRequests(a10), reduce(a10, 500)), UpdateTile(blue, 4, 3), UpdateTile(brown, 4, 4), UpdateTile(yellow, 4, 5), UpdateTile(brown, 4, 6), UpdateTile(yellow, 5, 0), UpdateTile(white, 5, 1), UpdateTile(brown, 5, 2), UpdateTile(yellow, 5, 3), UpdateTile(blue, 5, 4), UpdateTile(brown, 5, 5), UpdateTile(white, 5, 6), UpdateTile(blue, 6, 0), UpdateTile(brown, 6, 1), UpdateTile(white, 6, 2), UpdateTile(brown, 6, 3), UpdateTile(white, 6, 4), UpdateTile(brown, 6, 5), UpdateTile(white, 6, 6)]
[After]:{	UpdateClock(1)
},
{	UpdateClock(2)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateClock(3)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	adoptProhibition(rejectRequests(a10), reduce(a10, 500))
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!to remove]:AdoptP(rejectRequests(500)); aprohibition(rejectRequests(500) -> reduce(500), priority 0)
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:{	AdoptP(rejectRequests(500));
	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
}


[new scheduled]:[AdoptP(rejectRequests(500)); aprohibition(rejectRequests(500) -> reduce(500), priority 0)]
[After]:{	AdoptP(rejectRequests(500));
	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
}


[!!!!!!!!to remove]:aprohibition(rejectRequests(500) -> reduce(500), priority 0)
[Planbase]:{	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
}


[new scheduled]:[aprohibition(rejectRequests(500) -> reduce(500), priority 0)]
[After]:{	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
}


called PAction:   rejectRequests(500) -> reduce(500), priority 0
PAction:   rejectRequests(500) -> reduce(500), priority 0
PAction:   rejectRequests(500) -> reduce(500), priority 0
PAction:   rejectRequests(500) -> reduce(500), priority 0
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


object notification: Prohibition [subject=a30, prohibition=[rejectRequests(a30)], sanction=[reduce(a30, 500)], clock=3, time=2015-05-29 10:27:00.467]
[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a30)], [reduce(a30, 500)]), ctenv)
Event processed adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[Planbase]:{	adoptProhibition(rejectRequests(a30), reduce(a30, 500))
}


[new scheduled]:[adoptProhibition(rejectRequests(a30), reduce(a30, 500))]
[After]:{	adoptProhibition(rejectRequests(a30), reduce(a30, 500))
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a30), reduce(a30, 500))
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!to remove]:AdoptP(rejectRequests(500)); aprohibition(rejectRequests(500) -> reduce(500), priority 0)
[Planbase]:{	AdoptP(rejectRequests(500));
	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
}


[new scheduled]:[AdoptP(rejectRequests(500)); aprohibition(rejectRequests(500) -> reduce(500), priority 0)]
[After]:{	AdoptP(rejectRequests(500));
	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
}


[!!!!!!!!to remove]:aprohibition(rejectRequests(500) -> reduce(500), priority 0)
[Planbase]:{	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
}


[new scheduled]:[aprohibition(rejectRequests(500) -> reduce(500), priority 0)]
[After]:{	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
}


called PAction:   rejectRequests(500) -> reduce(500), priority 0
PAction:   rejectRequests(500) -> reduce(500), priority 0
PAction:   rejectRequests(500) -> reduce(500), priority 0
PAction:   rejectRequests(500) -> reduce(500), priority 0
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


object notification: Prohibition [subject=a10, prohibition=[moveTooFast(a10)], sanction=[reduce(a10, 300)], clock=3, time=2015-05-29 10:27:00.499]
object notification: Prohibition [subject=a40, prohibition=[rejectRequests(a40)], sanction=[reduce(a40, 500)], clock=3, time=2015-05-29 10:27:00.491]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
Event processed adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a40)], [reduce(a40, 500)]), ctenv)
Event processed adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[Planbase]:{	adoptProhibition(moveTooFast(a10), reduce(a10, 300))
}


[new scheduled]:[adoptProhibition(moveTooFast(a10), reduce(a10, 300))]
[After]:{	adoptProhibition(moveTooFast(a10), reduce(a10, 300))
}


[Planbase]:{	adoptProhibition(rejectRequests(a40), reduce(a40, 500))
}


[new scheduled]:[adoptProhibition(rejectRequests(a40), reduce(a40, 500))]
[After]:{	adoptProhibition(rejectRequests(a40), reduce(a40, 500))
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!to remove]:AdoptP(moveTooFast(300)); aprohibition(moveTooFast(300) -> reduce(300), priority 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a40), reduce(a40, 500))
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!to remove]:AdoptP(rejectRequests(500)); aprohibition(rejectRequests(500) -> reduce(500), priority 0)
[Planbase]:{	AdoptP(moveTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[AdoptP(moveTooFast(300)); aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	AdoptP(moveTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[Planbase]:{	AdoptP(rejectRequests(500));
	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
}


[new scheduled]:[AdoptP(rejectRequests(500)); aprohibition(rejectRequests(500) -> reduce(500), priority 0)]
[After]:{	AdoptP(rejectRequests(500));
	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
}


[!!!!!!!!to remove]:aprohibition(moveTooFast(300) -> reduce(300), priority 0)
[!!!!!!!!to remove]:aprohibition(rejectRequests(500) -> reduce(500), priority 0)
[Planbase]:{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[Planbase]:{	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
}


[new scheduled]:[aprohibition(rejectRequests(500) -> reduce(500), priority 0)]
[After]:{	aprohibition(rejectRequests(500) -> reduce(500), priority 0)
}


called PAction:   moveTooFast(300) -> reduce(300), priority 0
PAction:   moveTooFast(300) -> reduce(300), priority 0
PAction:   moveTooFast(300) -> reduce(300), priority 0
PAction:   moveTooFast(300) -> reduce(300), priority 0
[!!!!!!!!to remove]:
called PAction:   rejectRequests(500) -> reduce(500), priority 0
PAction:   rejectRequests(500) -> reduce(500), priority 0
PAction:   rejectRequests(500) -> reduce(500), priority 0
PAction:   rejectRequests(500) -> reduce(500), priority 0
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Prohibition [subject=a30, prohibition=[moveTooFast(a30)], sanction=[reduce(a30, 300)], clock=3, time=2015-05-29 10:27:00.504]
object notification: Prohibition [subject=a40, prohibition=[moveTooFast(a40)], sanction=[reduce(a40, 300)], clock=3, time=2015-05-29 10:27:00.508]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a30)], [reduce(a30, 300)]), ctenv)
Event processed adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a40)], [reduce(a40, 300)]), ctenv)
Event processed adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[Planbase]:{	adoptProhibition(moveTooFast(a30), reduce(a30, 300))
}


[new scheduled]:[adoptProhibition(moveTooFast(a30), reduce(a30, 300))]
[After]:{	adoptProhibition(moveTooFast(a30), reduce(a30, 300))
}


[Planbase]:{	adoptProhibition(moveTooFast(a40), reduce(a40, 300))
}


[new scheduled]:[adoptProhibition(moveTooFast(a40), reduce(a40, 300))]
[After]:{	adoptProhibition(moveTooFast(a40), reduce(a40, 300))
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a30), reduce(a30, 300))
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!to remove]:AdoptP(moveTooFast(300)); aprohibition(moveTooFast(300) -> reduce(300), priority 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a40), reduce(a40, 300))
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!to remove]:AdoptP(moveTooFast(300)); aprohibition(moveTooFast(300) -> reduce(300), priority 0)
[Planbase]:{	AdoptP(moveTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[AdoptP(moveTooFast(300)); aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	AdoptP(moveTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[Planbase]:{	AdoptP(moveTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[AdoptP(moveTooFast(300)); aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	AdoptP(moveTooFast(300));
	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[!!!!!!!!to remove]:aprohibition(moveTooFast(300) -> reduce(300), priority 0)
[!!!!!!!!to remove]:aprohibition(moveTooFast(300) -> reduce(300), priority 0)
[Planbase]:{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[Planbase]:{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


[new scheduled]:[aprohibition(moveTooFast(300) -> reduce(300), priority 0)]
[After]:{	aprohibition(moveTooFast(300) -> reduce(300), priority 0)
}


called PAction:   moveTooFast(300) -> reduce(300), priority 0
PAction:   moveTooFast(300) -> reduce(300), priority 0
PAction:   moveTooFast(300) -> reduce(300), priority 0
PAction:   moveTooFast(300) -> reduce(300), priority 0
[!!!!!!!!to remove]:
called PAction:   moveTooFast(300) -> reduce(300), priority 0
PAction:   moveTooFast(300) -> reduce(300), priority 0
PAction:   moveTooFast(300) -> reduce(300), priority 0
PAction:   moveTooFast(300) -> reduce(300), priority 0
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Time [clock=4, time=2015-05-29 10:27:03.536]
org notification: Time [clock=4, time=2015-05-29 10:27:03.536]
[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
Event processed UpdateClock(4)
[Planbase]:{	UpdateClock(4)
}


[new scheduled]:[UpdateClock(4)]
[After]:{	UpdateClock(4)
}


[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


object notification: Time [clock=4, time=2015-05-29 10:27:03.536]
object notification: Time [clock=4, time=2015-05-29 10:27:03.536]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
Event processed UpdateClock(4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
Event processed UpdateClock(4)
[Planbase]:{	UpdateClock(4)
}


[new scheduled]:[UpdateClock(4)]
[After]:{	UpdateClock(4)
}


[Planbase]:{	UpdateClock(4)
}


[new scheduled]:[UpdateClock(4)]
[After]:{	UpdateClock(4)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


org notification: Time [clock=5, time=2015-05-29 10:27:13.538]
object notification: Time [clock=5, time=2015-05-29 10:27:13.538]
object notification: Time [clock=5, time=2015-05-29 10:27:13.538]
object notification: Time [clock=5, time=2015-05-29 10:27:13.538]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
Event processed UpdateClock(5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
Event processed UpdateClock(5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(5), ctenv)
Event processed UpdateClock(5)
[Planbase]:{	UpdateClock(5)
}


[new scheduled]:[UpdateClock(5)]
[After]:{	UpdateClock(5)
}


[Planbase]:{	UpdateClock(5)
}


[new scheduled]:[UpdateClock(5)]
[After]:{	UpdateClock(5)
}


[Planbase]:{	UpdateClock(5)
}


[new scheduled]:[UpdateClock(5)]
[After]:{	UpdateClock(5)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Time [clock=6, time=2015-05-29 10:27:23.541]
object notification: Time [clock=6, time=2015-05-29 10:27:23.541]
object notification: Time [clock=6, time=2015-05-29 10:27:23.541]
org notification: Time [clock=6, time=2015-05-29 10:27:23.541]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
Event processed UpdateClock(6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
Event processed UpdateClock(6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(6), ctenv)
Event processed UpdateClock(6)
[Planbase]:{	UpdateClock(6)
}


[new scheduled]:[UpdateClock(6)]
[After]:{	UpdateClock(6)
}


[Planbase]:{	UpdateClock(6)
}


[new scheduled]:[UpdateClock(6)]
[After]:{	UpdateClock(6)
}


[Planbase]:{	UpdateClock(6)
}


[new scheduled]:[UpdateClock(6)]
[After]:{	UpdateClock(6)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


org notification: Time [clock=7, time=2015-05-29 10:27:33.543]
object notification: Time [clock=7, time=2015-05-29 10:27:33.543]
object notification: Time [clock=7, time=2015-05-29 10:27:33.543]
object notification: Time [clock=7, time=2015-05-29 10:27:33.543]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
Event processed UpdateClock(7)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
Event processed UpdateClock(7)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(7), ctenv)
Event processed UpdateClock(7)
[Planbase]:{	UpdateClock(7)
}


[new scheduled]:[UpdateClock(7)]
[After]:{	UpdateClock(7)
}


[Planbase]:{	UpdateClock(7)
}


[new scheduled]:[UpdateClock(7)]
[After]:{	UpdateClock(7)
}


[Planbase]:{	UpdateClock(7)
}


[new scheduled]:[UpdateClock(7)]
[After]:{	UpdateClock(7)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


org notification: Time [clock=8, time=2015-05-29 10:27:43.547]
object notification: Time [clock=8, time=2015-05-29 10:27:43.547]
object notification: Time [clock=8, time=2015-05-29 10:27:43.547]
object notification: Time [clock=8, time=2015-05-29 10:27:43.547]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
Event processed UpdateClock(8)
[Planbase]:{	UpdateClock(8)
}


[new scheduled]:[UpdateClock(8)]
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[After]:{	UpdateClock(8)
}


[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
Event processed UpdateClock(8)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(8), ctenv)
Event processed UpdateClock(8)
[Planbase]:{	UpdateClock(8)
}


[new scheduled]:[UpdateClock(8)]
[After]:{	UpdateClock(8)
}


[Planbase]:{	UpdateClock(8)
}


[new scheduled]:[UpdateClock(8)]
[After]:{	UpdateClock(8)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Time [clock=9, time=2015-05-29 10:27:53.55]
object notification: Time [clock=9, time=2015-05-29 10:27:53.55]
org notification: Time [clock=9, time=2015-05-29 10:27:53.55]
object notification: Time [clock=9, time=2015-05-29 10:27:53.55]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
Event processed UpdateClock(9)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
Event processed UpdateClock(9)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(9), ctenv)
Event processed UpdateClock(9)
[Planbase]:{	UpdateClock(9)
}


[new scheduled]:[UpdateClock(9)]
[After]:{	UpdateClock(9)
}


[Planbase]:{	UpdateClock(9)
}


[new scheduled]:[UpdateClock(9)]
[After]:{	UpdateClock(9)
}


[Planbase]:{	UpdateClock(9)
}


[new scheduled]:[UpdateClock(9)]
[After]:{	UpdateClock(9)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


setPhases in ClientGameStatus, the current phase is Movement Phase
setPhases in ClientGameStatus, the current phase is Movement Phase
setPhases in ClientGameStatus, the current phase is Movement Phase
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(at(X, Y, _), D, reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(surround(X, Y), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(color(Color, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(acceptRequest(Id), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(makeMove(X, Y, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(FUNCTION, NAME)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(at(X, Y, _), D, reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(surround(X, Y), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(color(Color, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(acceptRequest(Id), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(makeMove(X, Y, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(FUNCTION, NAME)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(at(X, Y, _), D, reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(surround(X, Y), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(color(Color, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(acceptRequest(Id), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(makeMove(X, Y, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(FUNCTION, NAME)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@4cfa1baf
[CTAH] The created APLList : [phasechange]
[!!!!!!!!to remove]:if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[CTAH] Array of Terms: [Lapapl.data.Term;@2feaad1
[CTAH] The created APLList : [phasechange]
[!!!!!!!!to remove]:if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[CTAH] Array of Terms: [Lapapl.data.Term;@71ac4afb
[CTAH] The created APLList : [phasechange]
[!!!!!!!!to remove]:if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[!!!!!!!!to remove]:ReceivedEvent(phasechange)
[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[!!!!!!!!to remove]:ReceivedEvent(phasechange)
[!!!!!!!!to remove]:ReceivedEvent(phasechange)
[Planbase]:{	ReceivedEvent(phasechange)
}


[new scheduled]:[ReceivedEvent(phasechange)]
[After]:{	ReceivedEvent(phasechange)
}


[Planbase]:{	ReceivedEvent(phasechange)
}


[new scheduled]:[ReceivedEvent(phasechange)]
[After]:{	ReceivedEvent(phasechange)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:{	ReceivedEvent(phasechange)
}


[new scheduled]:[ReceivedEvent(phasechange)]
[After]:{	ReceivedEvent(phasechange)
}


[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[update]
[After]:{	update
}


[Planbase]:


[new scheduled]:[update]
[After]:{	update
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!to remove]:getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!to remove]:getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated
[Planbase]:


[new scheduled]:[update]
[After]:{	update
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!to remove]:getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated
[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated
[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[!!!!!!!!to remove]:GetPhase(movementphase); B(clock(Clock)); if B(event(phasechange)) then Updated
[!!!!!!!!to remove]:GetPhase(movementphase); B(clock(Clock)); if B(event(phasechange)) then Updated
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[!!!!!!!!to remove]:GetPhase(movementphase); B(clock(Clock)); if B(event(phasechange)) then Updated
[Planbase]:{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[GetPhase(movementphase); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[GetPhase(movementphase); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[!!!!!!!!to remove]:B(clock(Clock)); if B(event(phasechange)) then Updated
[!!!!!!!!to remove]:B(clock(Clock)); if B(event(phasechange)) then Updated
[Planbase]:{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[GetPhase(movementphase); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	GetPhase(movementphase);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[!!!!!!!!to remove]:B(clock(Clock)); if B(event(phasechange)) then Updated
[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[!!!!!!!!to remove]:if B(event(phasechange)) then Updated
[!!!!!!!!to remove]:if B(event(phasechange)) then Updated
[Planbase]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[!!!!!!!!to remove]:if B(event(phasechange)) then Updated
[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[if B(event(phasechange)) then Updated]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[if B(event(phasechange)) then Updated]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
}


[!!!!!!!!to remove]:Updated
[!!!!!!!!to remove]:Updated
[Planbase]:{	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[if B(event(phasechange)) then Updated]
[After]:{	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	Updated
}


[new scheduled]:[Updated]
[After]:{	Updated
}


[!!!!!!!!to remove]:Updated
[Planbase]:{	Updated
}


[new scheduled]:[Updated]
[After]:{	Updated
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:{	Updated
}


[new scheduled]:[Updated]
[After]:{	Updated
}


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


object notification: Time [clock=10, time=2015-05-29 10:28:03.554]
org notification: Time [clock=10, time=2015-05-29 10:28:03.554]
object notification: Time [clock=10, time=2015-05-29 10:28:03.554]
object notification: Time [clock=10, time=2015-05-29 10:28:03.554]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
Event processed UpdateClock(10)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
Event processed UpdateClock(10)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(10), ctenv)
Event processed UpdateClock(10)
[Planbase]:{	UpdateClock(10)
}


[new scheduled]:[UpdateClock(10)]
[After]:{	UpdateClock(10)
}


[Planbase]:{	UpdateClock(10)
}


[new scheduled]:[UpdateClock(10)]
[After]:{	UpdateClock(10)
}


[Planbase]:{	UpdateClock(10)
}


[new scheduled]:[UpdateClock(10)]
[After]:{	UpdateClock(10)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


org notification: Time [clock=11, time=2015-05-29 10:28:13.556]
object notification: Time [clock=11, time=2015-05-29 10:28:13.556]
object notification: Time [clock=11, time=2015-05-29 10:28:13.556]
object notification: Time [clock=11, time=2015-05-29 10:28:13.556]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
Event processed UpdateClock(11)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
Event processed UpdateClock(11)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(11), ctenv)
Event processed UpdateClock(11)
[Planbase]:{	UpdateClock(11)
}


[new scheduled]:[UpdateClock(11)]
[After]:{	UpdateClock(11)
}


[Planbase]:{	UpdateClock(11)
}


[new scheduled]:[UpdateClock(11)]
[After]:{	UpdateClock(11)
}


[Planbase]:{	UpdateClock(11)
}


[new scheduled]:[UpdateClock(11)]
[After]:{	UpdateClock(11)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


org notification: Time [clock=12, time=2015-05-29 10:28:23.558]
object notification: Time [clock=12, time=2015-05-29 10:28:23.558]
object notification: Time [clock=12, time=2015-05-29 10:28:23.558]
object notification: Time [clock=12, time=2015-05-29 10:28:23.558]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
Event processed UpdateClock(12)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
Event processed UpdateClock(12)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(12), ctenv)
Event processed UpdateClock(12)
[Planbase]:{	UpdateClock(12)
}


[new scheduled]:[UpdateClock(12)]
[After]:{	UpdateClock(12)
}


[Planbase]:{	UpdateClock(12)
}


[new scheduled]:[UpdateClock(12)]
[After]:{	UpdateClock(12)
}


[Planbase]:{	UpdateClock(12)
}


[new scheduled]:[UpdateClock(12)]
[After]:{	UpdateClock(12)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Time [clock=13, time=2015-05-29 10:28:33.562]
org notification: Time [clock=13, time=2015-05-29 10:28:33.562]
object notification: Time [clock=13, time=2015-05-29 10:28:33.562]
object notification: Time [clock=13, time=2015-05-29 10:28:33.562]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
Event processed UpdateClock(13)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
Event processed UpdateClock(13)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(13), ctenv)
Event processed UpdateClock(13)
[Planbase]:{	UpdateClock(13)
}


[new scheduled]:[UpdateClock(13)]
[After]:{	UpdateClock(13)
}


[Planbase]:{	UpdateClock(13)
}


[new scheduled]:[UpdateClock(13)]
[After]:{	UpdateClock(13)
}


[Planbase]:{	UpdateClock(13)
}


[new scheduled]:[UpdateClock(13)]
[After]:{	UpdateClock(13)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Time [clock=14, time=2015-05-29 10:28:43.565]
object notification: Time [clock=14, time=2015-05-29 10:28:43.565]
object notification: Time [clock=14, time=2015-05-29 10:28:43.565]
org notification: Time [clock=14, time=2015-05-29 10:28:43.565]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
Event processed UpdateClock(14)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
Event processed UpdateClock(14)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(14), ctenv)
Event processed UpdateClock(14)
[Planbase]:{	UpdateClock(14)
}


[new scheduled]:[UpdateClock(14)]
[After]:{	UpdateClock(14)
}


[Planbase]:{	UpdateClock(14)
}


[new scheduled]:[UpdateClock(14)]
[After]:{	UpdateClock(14)
}


[Planbase]:{	UpdateClock(14)
}


[new scheduled]:[UpdateClock(14)]
[After]:{	UpdateClock(14)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


org notification: Time [clock=15, time=2015-05-29 10:28:53.569]
object notification: Time [clock=15, time=2015-05-29 10:28:53.569]
object notification: Time [clock=15, time=2015-05-29 10:28:53.569]
object notification: Time [clock=15, time=2015-05-29 10:28:53.569]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
Event processed UpdateClock(15)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
Event processed UpdateClock(15)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(15), ctenv)
Event processed UpdateClock(15)
[Planbase]:{	UpdateClock(15)
}


[new scheduled]:[UpdateClock(15)]
[After]:{	UpdateClock(15)
}


[Planbase]:{	UpdateClock(15)
}


[new scheduled]:[UpdateClock(15)]
[After]:{	UpdateClock(15)
}


[Planbase]:{	UpdateClock(15)
}


[new scheduled]:[UpdateClock(15)]
[After]:{	UpdateClock(15)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


org notification: Time [clock=16, time=2015-05-29 10:29:03.573]
object notification: Time [clock=16, time=2015-05-29 10:29:03.573]
object notification: Time [clock=16, time=2015-05-29 10:29:03.573]
object notification: Time [clock=16, time=2015-05-29 10:29:03.573]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
Event processed UpdateClock(16)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
Event processed UpdateClock(16)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(16), ctenv)
Event processed UpdateClock(16)
[Planbase]:{	UpdateClock(16)
}


[new scheduled]:[UpdateClock(16)]
[After]:{	UpdateClock(16)
}


[Planbase]:{	UpdateClock(16)
}


[new scheduled]:[UpdateClock(16)]
[After]:{	UpdateClock(16)
}


[Planbase]:{	UpdateClock(16)
}


[new scheduled]:[UpdateClock(16)]
[After]:{	UpdateClock(16)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Time [clock=17, time=2015-05-29 10:29:13.576]
org notification: Time [clock=17, time=2015-05-29 10:29:13.576]
object notification: Time [clock=17, time=2015-05-29 10:29:13.576]
object notification: Time [clock=17, time=2015-05-29 10:29:13.576]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
Event processed UpdateClock(17)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
Event processed UpdateClock(17)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(17), ctenv)
Event processed UpdateClock(17)
[Planbase]:{	UpdateClock(17)
}


[new scheduled]:[UpdateClock(17)]
[After]:{	UpdateClock(17)
}


[Planbase]:{	UpdateClock(17)
}


[new scheduled]:[UpdateClock(17)]
[After]:{	UpdateClock(17)
}


[Planbase]:{	UpdateClock(17)
}


[new scheduled]:[UpdateClock(17)]
[After]:{	UpdateClock(17)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Time [clock=18, time=2015-05-29 10:29:23.58]
org notification: Time [clock=18, time=2015-05-29 10:29:23.58]
object notification: Time [clock=18, time=2015-05-29 10:29:23.58]
object notification: Time [clock=18, time=2015-05-29 10:29:23.58]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
Event processed UpdateClock(18)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
Event processed UpdateClock(18)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(18), ctenv)
Event processed UpdateClock(18)
[Planbase]:{	UpdateClock(18)
}


[new scheduled]:[UpdateClock(18)]
[After]:{	UpdateClock(18)
}


[Planbase]:{	UpdateClock(18)
}


[new scheduled]:[UpdateClock(18)]
[After]:{	UpdateClock(18)
}


[Planbase]:{	UpdateClock(18)
}


[new scheduled]:[UpdateClock(18)]
[After]:{	UpdateClock(18)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Time [clock=19, time=2015-05-29 10:29:33.585]
org notification: Time [clock=19, time=2015-05-29 10:29:33.585]
object notification: Time [clock=19, time=2015-05-29 10:29:33.585]
object notification: Time [clock=19, time=2015-05-29 10:29:33.585]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
Event processed UpdateClock(19)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
Event processed UpdateClock(19)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(19), ctenv)
Event processed UpdateClock(19)
[Planbase]:{	UpdateClock(19)
}


[new scheduled]:[UpdateClock(19)]
[After]:{	UpdateClock(19)
}


[Planbase]:{	UpdateClock(19)
}


[new scheduled]:[UpdateClock(19)]
[After]:{	UpdateClock(19)
}


[Planbase]:{	UpdateClock(19)
}


[new scheduled]:[UpdateClock(19)]
[After]:{	UpdateClock(19)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


org notification: Time [clock=20, time=2015-05-29 10:29:43.588]
object notification: Time [clock=20, time=2015-05-29 10:29:43.588]
object notification: Time [clock=20, time=2015-05-29 10:29:43.588]
object notification: Time [clock=20, time=2015-05-29 10:29:43.588]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
Event processed UpdateClock(20)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
Event processed UpdateClock(20)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(20), ctenv)
Event processed UpdateClock(20)
[Planbase]:{	UpdateClock(20)
}


[new scheduled]:[UpdateClock(20)]
[After]:{	UpdateClock(20)
}


[Planbase]:{	UpdateClock(20)
}


[new scheduled]:[UpdateClock(20)]
[After]:{	UpdateClock(20)
}


[Planbase]:{	UpdateClock(20)
}


[new scheduled]:[UpdateClock(20)]
[After]:{	UpdateClock(20)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Time [clock=21, time=2015-05-29 10:29:53.591]
org notification: Time [clock=21, time=2015-05-29 10:29:53.591]
object notification: Time [clock=21, time=2015-05-29 10:29:53.591]
object notification: Time [clock=21, time=2015-05-29 10:29:53.591]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
Event processed UpdateClock(21)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
Event processed UpdateClock(21)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(21), ctenv)
Event processed UpdateClock(21)
[Planbase]:{	UpdateClock(21)
}


[new scheduled]:[UpdateClock(21)]
[After]:{	UpdateClock(21)
}


[Planbase]:{	UpdateClock(21)
}


[new scheduled]:[UpdateClock(21)]
[After]:{	UpdateClock(21)
}


[Planbase]:{	UpdateClock(21)
}


[new scheduled]:[UpdateClock(21)]
[After]:{	UpdateClock(21)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


object notification: Time [clock=22, time=2015-05-29 10:30:03.595]
object notification: Time [clock=22, time=2015-05-29 10:30:03.595]
object notification: Time [clock=22, time=2015-05-29 10:30:03.595]
org notification: Time [clock=22, time=2015-05-29 10:30:03.595]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
Event processed UpdateClock(22)
[Planbase]:{	UpdateClock(22)
}


[new scheduled]:[UpdateClock(22)]
[After]:{	UpdateClock(22)
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
Event processed UpdateClock(22)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(22), ctenv)
Event processed UpdateClock(22)
[Planbase]:{	UpdateClock(22)
}


[new scheduled]:[UpdateClock(22)]
[After]:{	UpdateClock(22)
}


[Planbase]:{	UpdateClock(22)
}


[new scheduled]:[UpdateClock(22)]
[After]:{	UpdateClock(22)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


org notification: Time [clock=23, time=2015-05-29 10:30:13.599]
object notification: Time [clock=23, time=2015-05-29 10:30:13.599]
object notification: Time [clock=23, time=2015-05-29 10:30:13.599]
object notification: Time [clock=23, time=2015-05-29 10:30:13.599]
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
Event processed UpdateClock(23)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
Event processed UpdateClock(23)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(23), ctenv)
Event processed UpdateClock(23)
[Planbase]:{	UpdateClock(23)
}


[new scheduled]:[UpdateClock(23)]
[After]:{	UpdateClock(23)
}


[Planbase]:{	UpdateClock(23)
}


[new scheduled]:[UpdateClock(23)]
[After]:{	UpdateClock(23)
}


[Planbase]:{	UpdateClock(23)
}


[new scheduled]:[UpdateClock(23)]
[After]:{	UpdateClock(23)
}


[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


