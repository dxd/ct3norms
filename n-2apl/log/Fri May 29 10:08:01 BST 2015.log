2015-05-29 10:08:02,348 CONFIG [com.gigaspaces.logger] - Log file: /Users/dxd/gigaspaces-xap-premium-9.5.1-ga/logs/2015-05-29~10.08-gigaspaces-service-192.168.0.40-46034.log
-------------------------last log tuples start--------------------------------
Time [clock=1, time=2015-05-29 10:07:42.233]
-------------------------last log tuples end----------------------------------
PAction created:   at(X, Y) -> reduce(Value), priority 0
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
PAction created:   at(X, Y) -> reduce(Value), priority 0
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
PAction created:   at(X, Y) -> reduce(Value), priority 0
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[CTAH] started agent 10
[CTAH] Added a new agent to the game by the name of 10.
[ENV] added agent a10
[CTAH] started agent 30
[CTAH] Added a new agent to the game by the name of 30.
[ENV] added agent a30
[CTAH] started agent 40
[CTAH] Added a new agent to the game by the name of 40.
[ENV] added agent a40
object notification: Time [clock=1, time=2015-05-29 10:08:13.301]
object notification: Time [clock=1, time=2015-05-29 10:08:13.301]
object notification: Time [clock=1, time=2015-05-29 10:08:13.301]
org notification: Time [clock=1, time=2015-05-29 10:08:13.301]
#########################Game started
#########################Game started
#########################Game started
setPhases in ClientGameStatus, the current phase is 
setPhases in ClientGameStatus, the current phase is 
setPhases in ClientGameStatus, the current phase is 
setPhases in ClientGameStatus, the current phase is Norm Phase
setPhases in ClientGameStatus, the current phase is Norm Phase
setPhases in ClientGameStatus, the current phase is Norm Phase
object notification: Tile [id=null, cell=Cell [x=0, y=0], subject=brown, time=2015-05-29 10:08:16.614, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=0], subject=brown, time=2015-05-29 10:08:16.614, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=0], subject=brown, time=2015-05-29 10:08:16.614, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=0], subject=brown, time=2015-05-29 10:08:16.614, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-05-29 10:08:16.645, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-05-29 10:08:16.645, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-05-29 10:08:16.645, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=1], subject=brown, time=2015-05-29 10:08:16.645, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-05-29 10:08:16.647, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-05-29 10:08:16.647, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-05-29 10:08:16.647, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=3], subject=yellow, time=2015-05-29 10:08:16.652, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=3], subject=yellow, time=2015-05-29 10:08:16.652, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=3], subject=yellow, time=2015-05-29 10:08:16.652, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-05-29 10:08:16.655, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=2], subject=white, time=2015-05-29 10:08:16.647, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=3], subject=yellow, time=2015-05-29 10:08:16.652, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-05-29 10:08:16.655, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-05-29 10:08:16.655, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-05-29 10:08:16.659, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=4], subject=brown, time=2015-05-29 10:08:16.655, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-05-29 10:08:16.659, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-05-29 10:08:16.664, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-05-29 10:08:16.667, clock=0]
#########################Game Initialized
AGENT Thread-11: current phase name: Norm Phase
#########################Game Initialized
AGENT Thread-13: current phase name: Norm Phase
we have 1 goals
we have GoalWeight: 100  DistWeight: -10  ChipWeight: 5  CommWeight: 0 scoring
we have 1 goals
we have GoalWeight: 100  DistWeight: -10  ChipWeight: 5  CommWeight: 0 scoring
#########################Game Initialized
AGENT Thread-15: current phase name: Norm Phase
we have 1 goals
we have GoalWeight: 100  DistWeight: -10  ChipWeight: 5  CommWeight: 0 scoring
[Planbase]:{	initialize
}


[new scheduled]:[initialize]
[After]:{	initialize
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[Planbase]:{	initialize
}


[new scheduled]:[initialize]
[After]:{	initialize
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!to remove]:getPhase; getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!to remove]:getPhase; getId; B(agentId(ID)); getRole(ID); getPos
[Planbase]:{	initialize
}


[new scheduled]:[initialize]
[After]:{	initialize
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:initialize
[!!!!!!!!to remove]:getPhase; getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
Event processed UpdateClock(1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
Event processed UpdateClock(1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(1), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
Event processed UpdateClock(1)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(at(X, Y, _), D, reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:adoptObligation(surround(X, Y), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(color(Color, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(acceptRequest(Id), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(makeMove(X, Y, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(FUNCTION, NAME)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
Event processed @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(at(X, Y, _), D, reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(surround(X, Y), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(color(Color, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(acceptRequest(Id), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(makeMove(X, Y, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(FUNCTION, NAME)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
Event processed @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
Event processed UpdateTile(brown, 0, 0)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:update
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getPhase
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(at(X, Y, _), D, reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:adoptObligation(surround(X, Y), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(color(Color, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(acceptRequest(Id), D, reduce(Group, Sanction))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(makeMove(X, Y, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(FUNCTION, NAME)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(message(game_initialized), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
Event processed @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
Event processed UpdateTile(brown, 0, 1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
Event processed UpdateTile(brown, 0, 0)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
Event processed UpdateTile(brown, 0, 0)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
Event processed UpdateTile(white, 0, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
Event processed UpdateTile(yellow, 0, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
Event processed UpdateTile(brown, 0, 1)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
Event processed UpdateTile(brown, 0, 4)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
Event processed UpdateTile(white, 0, 2)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
Event processed UpdateTile(blue, 0, 5)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
Event processed UpdateTile(yellow, 0, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
Event processed UpdateTile(brown, 0, 1)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
Event processed UpdateTile(brown, 0, 4)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 0, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
Event processed UpdateTile(white, 0, 2)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
Event processed UpdateTile(blue, 0, 5)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 0, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
Event processed UpdateTile(yellow, 0, 3)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
Event processed UpdateTile(brown, 0, 6)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
Event processed UpdateTile(brown, 1, 0)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 4, 0), ctenv)
Event processed UpdateTile(brown, 0, 4)
[Planbase]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateClock(1)
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	UpdateTile(brown, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateTile(blue, 0, 5)
}


[new scheduled]:[getPhase; getId; B(agentId(ID)); getRole(ID); getPos, UpdateClock(1), @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), UpdateTile(brown, 0, 0), UpdateTile(brown, 0, 1), UpdateTile(white, 0, 2), UpdateTile(yellow, 0, 3), UpdateTile(brown, 0, 4), UpdateTile(blue, 0, 5)]
[After]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateClock(1)
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	UpdateTile(brown, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateTile(blue, 0, 5)
}


[CTAH] Array of Terms: [Lapapl.data.Term;@726c3aa5
[CTAH] The created APLList : [game_initialized]
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateClock(1)
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	UpdateTile(brown, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateTile(blue, 0, 5)
},
{	UpdateTile(brown, 0, 6)
},
{	UpdateTile(brown, 1, 0)
}


[new scheduled]:[getPhase; getId; B(agentId(ID)); getRole(ID); getPos, UpdateClock(1), @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), UpdateTile(brown, 0, 0), UpdateTile(brown, 0, 1), UpdateTile(white, 0, 2), UpdateTile(yellow, 0, 3), UpdateTile(brown, 0, 4), UpdateTile(blue, 0, 5), UpdateTile(brown, 0, 6), UpdateTile(brown, 1, 0)]
[After]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateClock(1)
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	UpdateTile(brown, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
},
{	UpdateTile(blue, 0, 5)
},
{	UpdateTile(brown, 0, 6)
},
{	UpdateTile(brown, 1, 0)
}


[Planbase]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateClock(1)
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	UpdateTile(brown, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
}


[new scheduled]:[getPhase; getId; B(agentId(ID)); getRole(ID); getPos, UpdateClock(1), @ctenv(functionToList(message(game_initialized)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE), UpdateTile(brown, 0, 0), UpdateTile(brown, 0, 1), UpdateTile(white, 0, 2), UpdateTile(yellow, 0, 3), UpdateTile(brown, 0, 4)]
[After]:{	getPhase;
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	UpdateClock(1)
},
{	@ctenv(functionToList(message(game_initialized)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
},
{	UpdateTile(brown, 0, 0)
},
{	UpdateTile(brown, 0, 1)
},
{	UpdateTile(white, 0, 2)
},
{	UpdateTile(yellow, 0, 3)
},
{	UpdateTile(brown, 0, 4)
}


[CTAH] Array of Terms: [Lapapl.data.Term;@5c57b13a
[CTAH] The created APLList : [game_initialized]
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[CTAH] Array of Terms: [Lapapl.data.Term;@31731b2f
[CTAH] The created APLList : [game_initialized]
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[!!!!!!!!to remove]:GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:ReceivedEvent(game_initialized)
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); getId; B(agentId(ID)); getRole(ID); getPos, if B([actionresult([game_initialized])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	if	B([actionresult([game_initialized])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([game_initialized])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[!!!!!!!!to remove]:GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:ReceivedEvent(game_initialized)
[Planbase]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[new scheduled]:[GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos, ReceivedEvent(game_initialized)]
[After]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[!!!!!!!!to remove]:GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:ReceivedEvent(game_initialized)
[!!!!!!!!to remove]:getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:
[Planbase]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[new scheduled]:[GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos, ReceivedEvent(game_initialized)]
[After]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[Planbase]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[Initialize, getId; B(agentId(ID)); getRole(ID); getPos]
[After]:{	Initialize
},
{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[new scheduled]:[GetPhase(normphase); getId; B(agentId(ID)); getRole(ID); getPos, ReceivedEvent(game_initialized)]
[After]:{	GetPhase(normphase);
	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
},
{	ReceivedEvent(game_initialized)
}


[!!!!!!!!to remove]:getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!to remove]:@ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:getId; B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:
[Planbase]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[Initialize, getId; B(agentId(ID)); getRole(ID); getPos]
[After]:{	Initialize
},
{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[@ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos]
[After]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[Initialize, getId; B(agentId(ID)); getRole(ID); getPos]
[After]:{	Initialize
},
{	getId;
	B(agentId(ID));
	getRole(ID);
	getPos
}


[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!to remove]:@ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:GetAgentId(2); B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getId
[!!!!!!!!to remove]:@ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos
[Planbase]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[@ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos]
[After]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	GetAgentId(2);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[GetAgentId(2); B(agentId(ID)); getRole(ID); getPos]
[After]:{	GetAgentId(2);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[!!!!!!!!to remove]:B(agentId(ID)); getRole(ID); getPos
[Planbase]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[@ctenv(getAgentId,L1,0); B(L1=[actionresult(X)]); GetAgentId(X); B(agentId(ID)); getRole(ID); getPos]
[After]:{	@ctenv(getAgentId,L1,0);
	B(L1=[actionresult(X)]);
	GetAgentId(X);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[!!!!!!!!to remove]:GetAgentId(0); B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:GetAgentId(3); B(agentId(ID)); getRole(ID); getPos
[Planbase]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[B(agentId(ID)); getRole(ID); getPos]
[After]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[!!!!!!!!to remove]:getRole(2); getPos
[Planbase]:{	GetAgentId(0);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[GetAgentId(0); B(agentId(ID)); getRole(ID); getPos]
[After]:{	GetAgentId(0);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	GetAgentId(3);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[GetAgentId(3); B(agentId(ID)); getRole(ID); getPos]
[After]:{	GetAgentId(3);
	B(agentId(ID));
	getRole(ID);
	getPos
}


[!!!!!!!!to remove]:B(agentId(ID)); getRole(ID); getPos
[!!!!!!!!to remove]:B(agentId(ID)); getRole(ID); getPos
[Planbase]:{	getRole(2);
	getPos
}


[new scheduled]:[getRole(2); getPos]
[After]:{	getRole(2);
	getPos
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:getRole(2)
[!!!!!!!!to remove]:@ctenv(getRole(2),L1,0); B(L1=[actionresult(X)]); GetRole(2, X); getPos
[Planbase]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[B(agentId(ID)); getRole(ID); getPos]
[After]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[Planbase]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[new scheduled]:[B(agentId(ID)); getRole(ID); getPos]
[After]:{	B(agentId(ID));
	getRole(ID);
	getPos
}


[!!!!!!!!to remove]:getRole(0); getPos
[!!!!!!!!to remove]:getRole(3); getPos
[Planbase]:{	@ctenv(getRole(2),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(2, X);
	getPos
}


[new scheduled]:[@ctenv(getRole(2),L1,0); B(L1=[actionresult(X)]); GetRole(2, X); getPos]
[After]:{	@ctenv(getRole(2),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(2, X);
	getPos
}


[!!!!!!!!to remove]:GetRole(2, none); getPos
[Planbase]:{	getRole(0);
	getPos
}


[new scheduled]:[getRole(0); getPos]
[After]:{	getRole(0);
	getPos
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:getRole(0)
[!!!!!!!!to remove]:@ctenv(getRole(0),L1,0); B(L1=[actionresult(X)]); GetRole(0, X); getPos
[Planbase]:{	getRole(3);
	getPos
}


[new scheduled]:[getRole(3); getPos]
[After]:{	getRole(3);
	getPos
}


[Planbase]:{	GetRole(2, none);
	getPos
}


[new scheduled]:[GetRole(2, none); getPos]
[After]:{	GetRole(2, none);
	getPos
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:getRole(3)
[!!!!!!!!to remove]:@ctenv(getRole(3),L1,0); B(L1=[actionresult(X)]); GetRole(3, X); getPos
[!!!!!!!!to remove]:getPos
[Planbase]:{	@ctenv(getRole(0),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(0, X);
	getPos
}


[new scheduled]:[@ctenv(getRole(0),L1,0); B(L1=[actionresult(X)]); GetRole(0, X); getPos]
[After]:{	@ctenv(getRole(0),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(0, X);
	getPos
}


[!!!!!!!!to remove]:GetRole(0, ra); getPos
[Planbase]:{	getPos
}


[new scheduled]:[getPos]
[After]:{	getPos
}


[Planbase]:{	@ctenv(getRole(3),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(3, X);
	getPos
}


[new scheduled]:[@ctenv(getRole(3),L1,0); B(L1=[actionresult(X)]); GetRole(3, X); getPos]
[After]:{	@ctenv(getRole(3),L1,0);
	B(L1=[actionresult(X)]);
	GetRole(3, X);
	getPos
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!to remove]:@ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)
[Planbase]:{	GetRole(0, ra);
	getPos
}


[new scheduled]:[GetRole(0, ra); getPos]
[After]:{	GetRole(0, ra);
	getPos
}


[!!!!!!!!to remove]:GetRole(3, none); getPos
[!!!!!!!!to remove]:getPos
[Planbase]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[new scheduled]:[@ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)]
[After]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[Planbase]:{	GetRole(3, none);
	getPos
}


[new scheduled]:[GetRole(3, none); getPos]
[After]:{	GetRole(3, none);
	getPos
}


[CTAH] Agentposition: [6,6]
[!!!!!!!!to remove]:B(clock(C)); GetAgentPos(6, 6, C)
[Planbase]:{	getPos
}


[new scheduled]:[getPos]
[After]:{	getPos
}


[!!!!!!!!to remove]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!to remove]:@ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)
[Planbase]:{	B(clock(C));
	GetAgentPos(6, 6, C)
}


[new scheduled]:[B(clock(C)); GetAgentPos(6, 6, C)]
[After]:{	B(clock(C));
	GetAgentPos(6, 6, C)
}


[Planbase]:{	getPos
}


[new scheduled]:[getPos]
[After]:{	getPos
}


[!!!!!!!!to remove]:GetAgentPos(6, 6, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:getPos
[!!!!!!!!to remove]:@ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)
[Planbase]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[new scheduled]:[@ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)]
[After]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[Planbase]:{	GetAgentPos(6, 6, 1)
}


[new scheduled]:[GetAgentPos(6, 6, 1)]
[After]:{	GetAgentPos(6, 6, 1)
}


[CTAH] Agentposition: [0,0]
[!!!!!!!!to remove]:B(clock(C)); GetAgentPos(0, 0, C)
[Planbase]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[new scheduled]:[@ctenv(getAgentPos,L1,0); B(L1=[actionresult([X,Y])]); B(clock(C)); GetAgentPos(X, Y, C)]
[After]:{	@ctenv(getAgentPos,L1,0);
	B(L1=[actionresult([X,Y])]);
	B(clock(C));
	GetAgentPos(X, Y, C)
}


[!!!!!!!!to remove]:
[CTAH] Agentposition: [0,6]
[!!!!!!!!to remove]:B(clock(C)); GetAgentPos(0, 6, C)
[Planbase]:{	B(clock(C));
	GetAgentPos(0, 0, C)
}


[new scheduled]:[B(clock(C)); GetAgentPos(0, 0, C)]
[After]:{	B(clock(C));
	GetAgentPos(0, 0, C)
}


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!to remove]:GetAgentPos(0, 0, 1)
[Planbase]:{	B(clock(C));
	GetAgentPos(0, 6, C)
}


[new scheduled]:[B(clock(C)); GetAgentPos(0, 6, C)]
[After]:{	B(clock(C));
	GetAgentPos(0, 6, C)
}


[Planbase]:{	GetAgentPos(0, 0, 1)
}


[new scheduled]:[GetAgentPos(0, 0, 1)]
[After]:{	GetAgentPos(0, 0, 1)
}


[!!!!!!!!to remove]:GetAgentPos(0, 6, 1)
[!!!!!!!!to remove]:
[Planbase]:{	GetAgentPos(0, 6, 1)
}


[new scheduled]:[GetAgentPos(0, 6, 1)]
[After]:{	GetAgentPos(0, 6, 1)
}


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!to remove]:
[Planbase]:


[new scheduled]:[]
[After]:


setPhases in ClientGameStatus, the current phase is Communication Phase
setPhases in ClientGameStatus, the current phase is Communication Phase
[Planbase]:


[new scheduled]:[]
[After]:


setPhases in ClientGameStatus, the current phase is Communication Phase
[Planbase]:


[new scheduled]:[]
[After]:


[Planbase]:


[new scheduled]:[]
[After]:


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(at(X, Y, _), D, reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(surround(X, Y), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(color(Color, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(acceptRequest(Id), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(makeMove(X, Y, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(FUNCTION, NAME)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(at(X, Y, _), D, reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(surround(X, Y), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(color(Color, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(acceptRequest(Id), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(makeMove(X, Y, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(FUNCTION, NAME)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[CTAH] Array of Terms: [Lapapl.data.Term;@776ecadb
[CTAH] The created APLList : [phasechange]
[!!!!!!!!to remove]:if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(at(X, Y, _), D, reduce(_, Value))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(surround(X, Y), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(color(Color, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(acceptRequest(Id), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:adoptObligation(makeMove(X, Y, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
[!!!!!!!!pc rule head]:event(FUNCTION, NAME)
[!!!!!!!!pc rule a.clone]:event(message(phasechange), ctenv)
Event processed @ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[Planbase]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[new scheduled]:[@ctenv(functionToList(message(phasechange)),LIST,0); if B(LIST=[actionresult([TYPE,ID,RESPONSE])]) then if B(TYPE=response) then ReceivedResponse(RESPONSE, ID) else if B(LIST=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	@ctenv(functionToList(message(phasechange)),LIST,0);
	if	B(LIST=[actionresult([TYPE,ID,RESPONSE])])
	then	{	if	B(TYPE=response)
			then	{	ReceivedResponse(RESPONSE, ID)
				}
		}
	else	{	if	B(LIST=[actionresult([TYPE])])
			then	{	ReceivedEvent(TYPE)
				}
			else	{	if	B(LIST=[actionresult([TYPE,AGENT,ID,RESPONSE])])
					then	{	if	B(TYPE=proposal)
							then	{	ReceivedProposal(AGENT, ID, RESPONSE)
								}
						}
				}
		}
}


[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[CTAH] Array of Terms: [Lapapl.data.Term;@f598d5f
[CTAH] The created APLList : [phasechange]
[!!!!!!!!to remove]:if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[CTAH] Array of Terms: [Lapapl.data.Term;@24295637
[CTAH] The created APLList : [phasechange]
[!!!!!!!!to remove]:if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)
[!!!!!!!!to remove]:ReceivedEvent(phasechange)
[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[new scheduled]:[if B([actionresult([phasechange])]=[actionresult([TYPE])]) then ReceivedEvent(TYPE) else if B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])]) then if B(TYPE=proposal) then ReceivedProposal(AGENT, ID, RESPONSE)]
[After]:{	if	B([actionresult([phasechange])]=[actionresult([TYPE])])
	then	{	ReceivedEvent(TYPE)
		}
	else	{	if	B([actionresult([phasechange])]=[actionresult([TYPE,AGENT,ID,RESPONSE])])
			then	{	if	B(TYPE=proposal)
					then	{	ReceivedProposal(AGENT, ID, RESPONSE)
						}
				}
		}
}


[Planbase]:{	ReceivedEvent(phasechange)
}


[new scheduled]:[ReceivedEvent(phasechange)]
[After]:{	ReceivedEvent(phasechange)
}


[!!!!!!!!to remove]:ReceivedEvent(phasechange)
[!!!!!!!!to remove]:ReceivedEvent(phasechange)
[!!!!!!!!to remove]:
[Planbase]:{	ReceivedEvent(phasechange)
}


[new scheduled]:[ReceivedEvent(phasechange)]
[After]:{	ReceivedEvent(phasechange)
}


[!!!!!!!!to remove]:
[Planbase]:{	ReceivedEvent(phasechange)
}


[new scheduled]:[ReceivedEvent(phasechange)]
[After]:{	ReceivedEvent(phasechange)
}


[Planbase]:


[new scheduled]:[update]
[After]:{	update
}


[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!to remove]:getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated
[Planbase]:


[new scheduled]:[update]
[After]:{	update
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!to remove]:getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated
[Planbase]:


[new scheduled]:[update]
[After]:{	update
}


[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:update
[!!!!!!!!to remove]:getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated
[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated
[Planbase]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[getPhase; B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	getPhase;
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


object notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-05-29 10:08:16.664, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=1], subject=yellow, time=2015-05-29 10:08:16.671, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-05-29 10:08:16.667, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=1], subject=yellow, time=2015-05-29 10:08:16.671, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=2], subject=white, time=2015-05-29 10:08:16.676, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=2], subject=white, time=2015-05-29 10:08:16.676, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=3], subject=white, time=2015-05-29 10:08:16.679, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=3], subject=white, time=2015-05-29 10:08:16.679, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-05-29 10:08:16.659, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=4], subject=blue, time=2015-05-29 10:08:16.681, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=4], subject=blue, time=2015-05-29 10:08:16.681, clock=0]
org notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-05-29 10:08:16.664, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-05-29 10:08:16.683, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=5], subject=blue, time=2015-05-29 10:08:16.659, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-05-29 10:08:16.667, clock=0]
object notification: Tile [id=null, cell=Cell [x=0, y=6], subject=brown, time=2015-05-29 10:08:16.664, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-05-29 10:08:16.683, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=0], subject=brown, time=2015-05-29 10:08:16.667, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=6], subject=yellow, time=2015-05-29 10:08:16.688, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=0], subject=white, time=2015-05-29 10:08:16.691, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=1], subject=yellow, time=2015-05-29 10:08:16.671, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=1], subject=yellow, time=2015-05-29 10:08:16.671, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=6], subject=yellow, time=2015-05-29 10:08:16.688, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=2], subject=white, time=2015-05-29 10:08:16.676, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=3], subject=white, time=2015-05-29 10:08:16.679, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=2], subject=white, time=2015-05-29 10:08:16.676, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=3], subject=white, time=2015-05-29 10:08:16.679, clock=0]
object notification: Time [clock=2, time=2015-05-29 10:08:23.317]
org notification: Tile [id=null, cell=Cell [x=1, y=4], subject=blue, time=2015-05-29 10:08:16.681, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-05-29 10:08:16.683, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-05-29 10:08:16.693, clock=0]
org notification: Tile [id=null, cell=Cell [x=1, y=6], subject=yellow, time=2015-05-29 10:08:16.688, clock=0]
object notification: Time [clock=2, time=2015-05-29 10:08:23.317]
object notification: Tile [id=null, cell=Cell [x=2, y=2], subject=brown, time=2015-05-29 10:08:16.695, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=4], subject=blue, time=2015-05-29 10:08:16.681, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=0], subject=white, time=2015-05-29 10:08:16.691, clock=0]
object notification: Tile [id=null, cell=Cell [x=1, y=5], subject=brown, time=2015-05-29 10:08:16.683, clock=0]
org notification: Time [clock=2, time=2015-05-29 10:08:23.317]
object notification: Tile [id=null, cell=Cell [x=1, y=6], subject=yellow, time=2015-05-29 10:08:16.688, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-05-29 10:08:16.693, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=0], subject=white, time=2015-05-29 10:08:16.691, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-05-29 10:08:16.693, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=2], subject=brown, time=2015-05-29 10:08:16.695, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=2], subject=brown, time=2015-05-29 10:08:16.695, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=3], subject=blue, time=2015-05-29 10:08:16.697, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=3], subject=blue, time=2015-05-29 10:08:16.697, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=4], subject=white, time=2015-05-29 10:08:16.698, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=4], subject=white, time=2015-05-29 10:08:16.698, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-05-29 10:08:16.7, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-05-29 10:08:16.701, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=0], subject=white, time=2015-05-29 10:08:16.703, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=1], subject=yellow, time=2015-05-29 10:08:16.705, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=2], subject=blue, time=2015-05-29 10:08:16.707, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=3], subject=blue, time=2015-05-29 10:08:16.709, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-05-29 10:08:16.71, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-05-29 10:08:16.711, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=6], subject=white, time=2015-05-29 10:08:16.713, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=0], subject=brown, time=2015-05-29 10:08:16.714, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-05-29 10:08:16.715, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-05-29 10:08:16.716, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=3], subject=blue, time=2015-05-29 10:08:16.718, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-05-29 10:08:16.719, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=5], subject=yellow, time=2015-05-29 10:08:16.72, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-05-29 10:08:16.722, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=0], subject=yellow, time=2015-05-29 10:08:16.723, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-05-29 10:08:16.725, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=2], subject=brown, time=2015-05-29 10:08:16.726, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=3], subject=yellow, time=2015-05-29 10:08:16.727, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=4], subject=blue, time=2015-05-29 10:08:16.728, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=5], subject=brown, time=2015-05-29 10:08:16.729, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-05-29 10:08:16.731, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=0], subject=blue, time=2015-05-29 10:08:16.732, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=1], subject=brown, time=2015-05-29 10:08:16.733, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=2], subject=white, time=2015-05-29 10:08:16.734, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=3], subject=brown, time=2015-05-29 10:08:16.735, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=4], subject=white, time=2015-05-29 10:08:16.737, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=5], subject=brown, time=2015-05-29 10:08:16.738, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-05-29 10:08:16.74, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-05-29 10:08:16.7, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-05-29 10:08:16.701, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=0], subject=white, time=2015-05-29 10:08:16.703, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=1], subject=yellow, time=2015-05-29 10:08:16.705, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=2], subject=blue, time=2015-05-29 10:08:16.707, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=0], subject=white, time=2015-05-29 10:08:16.691, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=1], subject=white, time=2015-05-29 10:08:16.693, clock=0]
org notification: Group [name=g, ra=a10, clock=0, time=2015-05-29 10:08:16.833]
object notification: Tile [id=null, cell=Cell [x=2, y=3], subject=blue, time=2015-05-29 10:08:16.697, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=4], subject=white, time=2015-05-29 10:08:16.698, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-05-29 10:08:16.7, clock=0]
object notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-05-29 10:08:16.701, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=0], subject=white, time=2015-05-29 10:08:16.703, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=1], subject=yellow, time=2015-05-29 10:08:16.705, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=2], subject=blue, time=2015-05-29 10:08:16.707, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=3], subject=blue, time=2015-05-29 10:08:16.709, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-05-29 10:08:16.71, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-05-29 10:08:16.711, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=2], subject=brown, time=2015-05-29 10:08:16.695, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=6], subject=white, time=2015-05-29 10:08:16.713, clock=0]
object notification: Time [clock=2, time=2015-05-29 10:08:23.317]
object notification: Tile [id=null, cell=Cell [x=4, y=0], subject=brown, time=2015-05-29 10:08:16.714, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-05-29 10:08:16.715, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-05-29 10:08:16.716, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=3], subject=blue, time=2015-05-29 10:08:16.718, clock=0]
object notification: Time [clock=3, time=2015-05-29 10:08:33.322]
object notification: Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-05-29 10:08:16.719, clock=0]
object notification: Time [clock=4, time=2015-05-29 10:08:43.326]
object notification: Tile [id=null, cell=Cell [x=4, y=5], subject=yellow, time=2015-05-29 10:08:16.72, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-05-29 10:08:16.722, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=0], subject=yellow, time=2015-05-29 10:08:16.723, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-05-29 10:08:16.725, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=2], subject=brown, time=2015-05-29 10:08:16.726, clock=0]
object notification: Time [clock=3, time=2015-05-29 10:08:33.322]
object notification: Tile [id=null, cell=Cell [x=5, y=3], subject=yellow, time=2015-05-29 10:08:16.727, clock=0]
object notification: Time [clock=4, time=2015-05-29 10:08:43.326]
object notification: Tile [id=null, cell=Cell [x=5, y=4], subject=blue, time=2015-05-29 10:08:16.728, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=5], subject=brown, time=2015-05-29 10:08:16.729, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-05-29 10:08:16.731, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=0], subject=blue, time=2015-05-29 10:08:16.732, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=3], subject=blue, time=2015-05-29 10:08:16.697, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=1], subject=brown, time=2015-05-29 10:08:16.733, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=2], subject=white, time=2015-05-29 10:08:16.734, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=3], subject=brown, time=2015-05-29 10:08:16.735, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=4], subject=white, time=2015-05-29 10:08:16.737, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=5], subject=brown, time=2015-05-29 10:08:16.738, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-05-29 10:08:16.74, clock=0]
org notification: Time [clock=3, time=2015-05-29 10:08:33.322]
object notification: Time [clock=3, time=2015-05-29 10:08:33.322]
object notification: Time [clock=4, time=2015-05-29 10:08:43.326]
org notification: Goal [id=null, cell=Cell [x=3, y=3], agent=null, time=2015-05-29 10:08:16.769, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=3], subject=blue, time=2015-05-29 10:08:16.709, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-05-29 10:08:16.71, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-05-29 10:08:16.711, clock=0]
object notification: Tile [id=null, cell=Cell [x=3, y=6], subject=white, time=2015-05-29 10:08:16.713, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=0], subject=brown, time=2015-05-29 10:08:16.714, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-05-29 10:08:16.715, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-05-29 10:08:16.716, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=3], subject=blue, time=2015-05-29 10:08:16.718, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-05-29 10:08:16.719, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=5], subject=yellow, time=2015-05-29 10:08:16.72, clock=0]
org notification: Tile [id=null, cell=Cell [x=2, y=4], subject=white, time=2015-05-29 10:08:16.698, clock=0]
object notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-05-29 10:08:16.722, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=0], subject=yellow, time=2015-05-29 10:08:16.723, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-05-29 10:08:16.725, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=2], subject=brown, time=2015-05-29 10:08:16.726, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=3], subject=yellow, time=2015-05-29 10:08:16.727, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=4], subject=blue, time=2015-05-29 10:08:16.728, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=5], subject=brown, time=2015-05-29 10:08:16.729, clock=0]
object notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-05-29 10:08:16.731, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=0], subject=blue, time=2015-05-29 10:08:16.732, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=1], subject=brown, time=2015-05-29 10:08:16.733, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=2], subject=white, time=2015-05-29 10:08:16.734, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=3], subject=brown, time=2015-05-29 10:08:16.735, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=4], subject=white, time=2015-05-29 10:08:16.737, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=5], subject=brown, time=2015-05-29 10:08:16.738, clock=0]
object notification: Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-05-29 10:08:16.74, clock=0]
object notification: Prohibition [subject=a10, prohibition=[rejectRequests(a10)], sanction=[reduce(a10, 500)], clock=4, time=2015-05-29 10:08:48.182]
object notification: Prohibition [subject=a10, prohibition=[moveTooFast(a10)], sanction=[reduce(a10, 300)], clock=4, time=2015-05-29 10:08:48.198]
object notification: Prohibition [subject=a30, prohibition=[rejectRequests(a30)], sanction=[reduce(a30, 500)], clock=4, time=2015-05-29 10:08:48.193]
object notification: Prohibition [subject=a40, prohibition=[rejectRequests(a40)], sanction=[reduce(a40, 500)], clock=4, time=2015-05-29 10:08:48.196]
object notification: Prohibition [subject=a30, prohibition=[moveTooFast(a30)], sanction=[reduce(a30, 300)], clock=4, time=2015-05-29 10:08:48.225]
object notification: Prohibition [subject=a40, prohibition=[moveTooFast(a40)], sanction=[reduce(a40, 300)], clock=4, time=2015-05-29 10:08:48.244]
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:getPhase
[!!!!!!!!to remove]:@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated
[!!!!!!!!to remove]:GetPhase(communicationphase); B(clock(Clock)); if B(event(phasechange)) then Updated
org notification: Tile [id=null, cell=Cell [x=2, y=5], subject=brown, time=2015-05-29 10:08:16.7, clock=0]
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
}


object notification: Obligation [subject=a10, obligation=[surround(3, 3)], sanction=[reduce(g, 700)], deadline=32, time=2015-05-29 10:08:48.283, clock=4]
org notification: Time [clock=4, time=2015-05-29 10:08:43.326]
[!!!!!!!!to remove]:GetPhase(communicationphase); B(clock(Clock)); if B(event(phasechange)) then Updated
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
Event processed UpdateTile(yellow, 1, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
Event processed UpdateTile(white, 1, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=2, y=6], subject=brown, time=2015-05-29 10:08:16.701, clock=0]
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
Event processed UpdateTile(white, 1, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
Event processed UpdateTile(blue, 1, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
Event processed UpdateTile(brown, 1, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
Event processed UpdateTile(yellow, 1, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
Event processed UpdateTile(white, 2, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
Event processed UpdateTile(white, 2, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
Event processed UpdateClock(2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
Event processed UpdateTile(brown, 2, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
Event processed UpdateTile(blue, 2, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
Event processed UpdateTile(white, 2, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
Event processed UpdateTile(brown, 2, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
Event processed UpdateTile(brown, 2, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
Event processed UpdateTile(white, 3, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=3, y=0], subject=white, time=2015-05-29 10:08:16.703, clock=0]
Event processed UpdateTile(yellow, 3, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
Event processed UpdateTile(blue, 3, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
Event processed UpdateTile(blue, 3, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
Event processed UpdateTile(yellow, 3, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
Event processed UpdateTile(yellow, 3, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
Event processed UpdateTile(white, 3, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
Event processed UpdateTile(brown, 4, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
org notification: Tile [id=null, cell=Cell [x=3, y=1], subject=yellow, time=2015-05-29 10:08:16.705, clock=0]
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
Event processed UpdateTile(blue, 4, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
Event processed UpdateTile(yellow, 4, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
Event processed UpdateTile(blue, 4, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
Event processed UpdateTile(brown, 4, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
Event processed UpdateTile(yellow, 4, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
Event processed UpdateTile(brown, 4, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
org notification: Tile [id=null, cell=Cell [x=3, y=2], subject=blue, time=2015-05-29 10:08:16.707, clock=0]
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
Event processed UpdateTile(yellow, 5, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
Event processed UpdateTile(white, 5, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
Event processed UpdateTile(brown, 5, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=3, y=3], subject=blue, time=2015-05-29 10:08:16.709, clock=0]
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 0, 5, 0), ctenv)
Event processed UpdateTile(blue, 0, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
Event processed UpdateTile(brown, 0, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
Event processed UpdateTile(brown, 1, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
Event processed UpdateTile(yellow, 1, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
Event processed UpdateTile(white, 1, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
Event processed UpdateClock(3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
Event processed UpdateTile(white, 1, 3)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
Event processed UpdateTile(yellow, 5, 3)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
Event processed UpdateClock(2)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
Event processed UpdateClock(4)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
Event processed UpdateTile(blue, 1, 4)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
Event processed UpdateTile(blue, 5, 4)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:getRole(ID)
org notification: Tile [id=null, cell=Cell [x=3, y=4], subject=yellow, time=2015-05-29 10:08:16.71, clock=0]
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
Event processed UpdateTile(brown, 1, 5)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
Event processed UpdateTile(brown, 5, 5)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
Event processed UpdateTile(yellow, 1, 6)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
Event processed UpdateTile(white, 5, 6)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
Event processed UpdateTile(white, 2, 0)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 6, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
Event processed UpdateTile(blue, 6, 0)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
Event processed UpdateTile(white, 2, 1)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
Event processed UpdateTile(brown, 6, 1)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
Event processed UpdateTile(brown, 2, 2)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
Event processed UpdateTile(white, 6, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
Event processed UpdateTile(blue, 2, 3)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 0, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
Event processed UpdateTile(brown, 0, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=3, y=5], subject=yellow, time=2015-05-29 10:08:16.711, clock=0]
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:getChipsRedundant
Event processed UpdateTile(brown, 6, 3)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
Event processed UpdateTile(brown, 1, 0)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
Event processed UpdateTile(white, 2, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
Event processed UpdateTile(white, 6, 4)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 1, 0), ctenv)
Event processed UpdateTile(brown, 2, 5)
Event processed UpdateTile(yellow, 1, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
Event processed UpdateTile(brown, 2, 6)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
Event processed UpdateTile(white, 1, 2)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=3, y=6], subject=white, time=2015-05-29 10:08:16.713, clock=0]
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 1, 3, 0), ctenv)
Event processed UpdateTile(white, 1, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 1, 4, 0), ctenv)
Event processed UpdateTile(blue, 1, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 6, 5, 0), ctenv)
Event processed UpdateTile(brown, 6, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 1, 5, 0), ctenv)
Event processed UpdateTile(brown, 1, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 1, 6, 0), ctenv)
Event processed UpdateTile(yellow, 1, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=4, y=0], subject=brown, time=2015-05-29 10:08:16.714, clock=0]
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 0, 0), ctenv)
Event processed UpdateTile(white, 2, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 1, 0), ctenv)
Event processed UpdateTile(white, 2, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 2, 0), ctenv)
Event processed UpdateTile(brown, 2, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 6, 6, 0), ctenv)
Event processed UpdateTile(white, 6, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=4, y=1], subject=blue, time=2015-05-29 10:08:16.715, clock=0]
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 2, 3, 0), ctenv)
Event processed UpdateTile(blue, 2, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 2, 4, 0), ctenv)
Event processed UpdateTile(white, 2, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=4, y=2], subject=yellow, time=2015-05-29 10:08:16.716, clock=0]
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
Event processed UpdateTile(brown, 2, 5)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([rejectRequests(a10)], [reduce(a10, 500)]), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
Event processed adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 2, 6, 0), ctenv)
Event processed UpdateTile(brown, 2, 6)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
org notification: Tile [id=null, cell=Cell [x=4, y=3], subject=blue, time=2015-05-29 10:08:16.718, clock=0]
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(prohibition([moveTooFast(a10)], [reduce(a10, 300)]), ctenv)
Event processed adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
Event processed UpdateTile(white, 3, 0)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(obligation([surround(3, 3)], 32, [reduce(g, 700)]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
Event processed adoptObligation(surround(3, 3), 32, reduce(g, 700))
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
Event processed UpdateTile(white, 3, 0)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
Event processed UpdateTile(yellow, 3, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
Event processed UpdateTile(yellow, 3, 1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
Event processed UpdateTile(blue, 3, 2)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
org notification: Tile [id=null, cell=Cell [x=4, y=4], subject=brown, time=2015-05-29 10:08:16.719, clock=0]
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(2), ctenv)
Event processed UpdateClock(2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
org notification: Tile [id=null, cell=Cell [x=4, y=5], subject=yellow, time=2015-05-29 10:08:16.72, clock=0]
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(3), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
Event processed UpdateClock(3)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
Event processed UpdateTile(blue, 3, 2)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
org notification: Tile [id=null, cell=Cell [x=4, y=6], subject=brown, time=2015-05-29 10:08:16.722, clock=0]
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(clock(4), ctenv)
Event processed UpdateClock(4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
Event processed UpdateTile(blue, 3, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 3, 3, 0), ctenv)
Event processed UpdateTile(blue, 3, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 4, 0), ctenv)
Event processed UpdateTile(yellow, 3, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
Event processed UpdateTile(yellow, 3, 4)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=5, y=0], subject=yellow, time=2015-05-29 10:08:16.723, clock=0]
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
Event processed UpdateTile(yellow, 3, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=5, y=1], subject=white, time=2015-05-29 10:08:16.725, clock=0]
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
Event processed UpdateTile(white, 3, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=5, y=2], subject=brown, time=2015-05-29 10:08:16.726, clock=0]
org notification: Tile [id=null, cell=Cell [x=5, y=3], subject=yellow, time=2015-05-29 10:08:16.727, clock=0]
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=5, y=4], subject=blue, time=2015-05-29 10:08:16.728, clock=0]
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
Event processed UpdateTile(brown, 4, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=5, y=5], subject=brown, time=2015-05-29 10:08:16.729, clock=0]
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
org notification: Tile [id=null, cell=Cell [x=5, y=6], subject=white, time=2015-05-29 10:08:16.731, clock=0]
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 3, 5, 0), ctenv)
Event processed UpdateTile(yellow, 3, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
org notification: Tile [id=null, cell=Cell [x=6, y=0], subject=blue, time=2015-05-29 10:08:16.732, clock=0]
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=6, y=1], subject=brown, time=2015-05-29 10:08:16.733, clock=0]
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 3, 6, 0), ctenv)
Event processed UpdateTile(white, 3, 6)
org notification: Tile [id=null, cell=Cell [x=6, y=2], subject=white, time=2015-05-29 10:08:16.734, clock=0]
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
Event processed UpdateTile(blue, 4, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[Planbase]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	UpdateTile(yellow, 1, 1)
},
{	UpdateTile(white, 1, 2)
},
{	UpdateTile(white, 1, 3)
},
{	UpdateTile(blue, 1, 4)
},
{	UpdateTile(brown, 1, 5)
},
{	UpdateTile(yellow, 1, 6)
},
{	UpdateTile(white, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateClock(2)
},
{	UpdateTile(brown, 2, 2)
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateClock(3)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateClock(4)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
},
{	adoptProhibition(rejectRequests(a10), reduce(a10, 500))
},
{	adoptProhibition(moveTooFast(a10), reduce(a10, 300))
},
{	adoptObligation(surround(3, 3), 32, reduce(g, 700))
}


[new scheduled]:[@ctenv(getPhase,L1,0); B(L1=[actionresult(X)]); GetPhase(X); B(clock(Clock)); if B(event(phasechange)) then Updated, UpdateTile(yellow, 1, 1), UpdateTile(white, 1, 2), UpdateTile(white, 1, 3), UpdateTile(blue, 1, 4), UpdateTile(brown, 1, 5), UpdateTile(yellow, 1, 6), UpdateTile(white, 2, 0), UpdateTile(white, 2, 1), UpdateClock(2), UpdateTile(brown, 2, 2), UpdateTile(blue, 2, 3), UpdateTile(white, 2, 4), UpdateTile(brown, 2, 5), UpdateTile(brown, 2, 6), UpdateTile(white, 3, 0), UpdateTile(yellow, 3, 1), UpdateTile(blue, 3, 2), UpdateTile(blue, 3, 3), UpdateTile(yellow, 3, 4), UpdateTile(yellow, 3, 5), UpdateTile(white, 3, 6), UpdateTile(brown, 4, 0), UpdateTile(blue, 4, 1), UpdateTile(yellow, 4, 2), UpdateTile(blue, 4, 3), UpdateTile(brown, 4, 4), UpdateTile(yellow, 4, 5), UpdateTile(brown, 4, 6), UpdateTile(yellow, 5, 0), UpdateTile(white, 5, 1), UpdateTile(brown, 5, 2), UpdateClock(3), UpdateTile(yellow, 5, 3), UpdateClock(4), UpdateTile(blue, 5, 4), UpdateTile(brown, 5, 5), UpdateTile(white, 5, 6), UpdateTile(blue, 6, 0), UpdateTile(brown, 6, 1), UpdateTile(white, 6, 2), UpdateTile(brown, 6, 3), UpdateTile(white, 6, 4), UpdateTile(brown, 6, 5), UpdateTile(white, 6, 6), adoptProhibition(rejectRequests(a10), reduce(a10, 500)), adoptProhibition(moveTooFast(a10), reduce(a10, 300)), adoptObligation(surround(3, 3), 32, reduce(g, 700))]
[After]:{	@ctenv(getPhase,L1,0);
	B(L1=[actionresult(X)]);
	GetPhase(X);
	B(clock(Clock));
	if	B(event(phasechange))
	then	{	Updated
		}
},
{	UpdateTile(yellow, 1, 1)
},
{	UpdateTile(white, 1, 2)
},
{	UpdateTile(white, 1, 3)
},
{	UpdateTile(blue, 1, 4)
},
{	UpdateTile(brown, 1, 5)
},
{	UpdateTile(yellow, 1, 6)
},
{	UpdateTile(white, 2, 0)
},
{	UpdateTile(white, 2, 1)
},
{	UpdateClock(2)
},
{	UpdateTile(brown, 2, 2)
},
{	UpdateTile(blue, 2, 3)
},
{	UpdateTile(white, 2, 4)
},
{	UpdateTile(brown, 2, 5)
},
{	UpdateTile(brown, 2, 6)
},
{	UpdateTile(white, 3, 0)
},
{	UpdateTile(yellow, 3, 1)
},
{	UpdateTile(blue, 3, 2)
},
{	UpdateTile(blue, 3, 3)
},
{	UpdateTile(yellow, 3, 4)
},
{	UpdateTile(yellow, 3, 5)
},
{	UpdateTile(white, 3, 6)
},
{	UpdateTile(brown, 4, 0)
},
{	UpdateTile(blue, 4, 1)
},
{	UpdateTile(yellow, 4, 2)
},
{	UpdateTile(blue, 4, 3)
},
{	UpdateTile(brown, 4, 4)
},
{	UpdateTile(yellow, 4, 5)
},
{	UpdateTile(brown, 4, 6)
},
{	UpdateTile(yellow, 5, 0)
},
{	UpdateTile(white, 5, 1)
},
{	UpdateTile(brown, 5, 2)
},
{	UpdateClock(3)
},
{	UpdateTile(yellow, 5, 3)
},
{	UpdateClock(4)
},
{	UpdateTile(blue, 5, 4)
},
{	UpdateTile(brown, 5, 5)
},
{	UpdateTile(white, 5, 6)
},
{	UpdateTile(blue, 6, 0)
},
{	UpdateTile(brown, 6, 1)
},
{	UpdateTile(white, 6, 2)
},
{	UpdateTile(brown, 6, 3)
},
{	UpdateTile(white, 6, 4)
},
{	UpdateTile(brown, 6, 5)
},
{	UpdateTile(white, 6, 6)
},
{	adoptProhibition(rejectRequests(a10), reduce(a10, 500))
},
{	adoptProhibition(moveTooFast(a10), reduce(a10, 300))
},
{	adoptObligation(surround(3, 3), 32, reduce(g, 700))
}


[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 0, 0), ctenv)
Event processed UpdateTile(brown, 4, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=6, y=3], subject=brown, time=2015-05-29 10:08:16.735, clock=0]
org notification: Tile [id=null, cell=Cell [x=6, y=4], subject=white, time=2015-05-29 10:08:16.737, clock=0]
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
Event processed UpdateTile(yellow, 4, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 1, 0), ctenv)
Event processed UpdateTile(blue, 4, 1)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!to remove]:GetPhase(communicationphase); B(clock(Clock)); if B(event(phasechange)) then Updated
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=6, y=5], subject=brown, time=2015-05-29 10:08:16.738, clock=0]
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!to remove]:
Event processed UpdateTile(blue, 4, 3)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
org notification: Tile [id=null, cell=Cell [x=6, y=6], subject=white, time=2015-05-29 10:08:16.74, clock=0]
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
Event processed UpdateTile(brown, 4, 4)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
Event processed UpdateTile(yellow, 4, 5)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 6, 0), ctenv)
Event processed UpdateTile(brown, 4, 6)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 2, 0), ctenv)
Event processed UpdateTile(yellow, 4, 2)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!to remove]:
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!to remove]:
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 0, 0), ctenv)
Event processed UpdateTile(yellow, 5, 0)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!to remove]:
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 4, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
Event processed UpdateTile(blue, 4, 3)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!to remove]:
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(white, 5, 1, 0), ctenv)
Event processed UpdateTile(white, 5, 1)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 5, 2, 0), ctenv)
Event processed UpdateTile(brown, 5, 2)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!to remove]:
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 5, 3, 0), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
PAction created:   at(X, Y) -> reduce(Value), priority 0
Event processed UpdateTile(yellow, 5, 3)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:moveTo(X, Y)
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:adoptObligation(at(X, Y, _), D, reduce(_, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:adoptObligation(surround(X, Y), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:adoptObligation(color(Color, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:adoptObligation(acceptRequest(Id), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:adoptObligation(makeMove(X, Y, Thing), D, reduce(Group, Sanction))
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:event(FUNCTION, NAME)
[!!!!!!!!pc rule a.clone]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!to remove]:adoptProhibition(rejectRequests(a10), reduce(a10, 500))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:initialize
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:sendSouth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:sendEast(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:sendWest(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:color(Color, Agent, Yes, S)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:update
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getPhase
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getPos
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getChipsNeeded(OPPID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getChipsRedundant
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getOpponentChips
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getGoalId(TYPE, X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getGoalId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getGoalPos(TYPE)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentPin
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getOpponentId
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule head]:getOpponentPos
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getPin
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(obligation([Goal], Deadline, [Sanction]), ctenv)
[!!!!!!!!pc rule head]:getRole(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(prohibition([State], [Sanction]), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:getScoreAfterExchange(MSGID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScore(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:getScoreCurrentChips(ID)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:sendResponse(MSGID, Response)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule head]:event(clock(Clock), ctenv)
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(brown, 4, 4, 0), ctenv)
Event processed UpdateTile(brown, 4, 4)
[!!!!!!!!pc rule head]:event(points(Points), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule head]:event(position(X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:event(tile(Color, X, Y, Clock), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
PAction created:   at(X, Y) -> reduce(Value), priority 0
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:adoptProhibition(at(X, Y, _), reduce(_, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
PAction created:   useColor(Color, Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(color(Color, Thing), reduce(_, Value))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
PAction created:   rejectRequests(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:moveTo(X, Y)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:event(tile(blue, 5, 4, 0), ctenv)
[!!!!!!!!pc rule head]:adoptProhibition(rejectRequests(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:findNextStep(Color, V1)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:initialize
PAction created:   moveTooFast(Value) -> reduce(Value), priority 0
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule a.clone]:adoptProhibition(moveTooFast(a10), reduce(a10, 300))
[!!!!!!!!pc rule head]:updatePos(NewX, NewY)
[!!!!!!!!pc rule head]:sendNorth(Agent, X, Y, S)
[!!!!!!!!pc rule a.clone]:event(tile(yellow, 4, 5, 0), ctenv)
[!!!!!!!!pc rule head]:adoptProhibition(moveTooFast(Thing), reduce(Thing, Value))
