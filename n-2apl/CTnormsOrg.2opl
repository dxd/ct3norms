Facts:

%group surround
norm(
    group_surround(G),
    G, // the subject agent
    ( group(G), goal(X,Y,Z)), // precondition - left blank for now
    obligation([surround(X,Y)],now + 20,[reduce(G,700)]) // prohibition format
    ).
    
%agents group norms from RA  
norm(
    group_task(group_surround(g)),
    Agent, // the subject agent
    ( pursuer(Agent), detached(group_surround(W)),goal(GX1,GY1,Z),agentSTask(Agent,X,Y,goal(GX,GY),S)), // precondition - add triggering condition
    obligation([at(X,Y,Agent)],now + 16,[reduce(Agent, 600)]) // prohibition format
    ).  
    
%individual prohibitions to use colored tiles raaa
norm(
	not_enter_tile(Thing),	
	Thing, // the subject agent
	( pursuer(Thing), color(Thing,Color,no,S),group(Z)), // precondition
	prohibition([color(Color,Thing)],[reduce(Thing,S)]) // prohibition format
).
 
%individual obligations to use colored tiles raaa
norm(
	enter_tile(Thing),
	Thing, // the subject agent
	( pursuer(Thing), color(Thing,Color,yes,S),group(Z)), // precondition
	obligation([color(Color,Thing)],now + 16,[reduce(Thing,S)]) // prohibition format
).

%Deactivated individual obligations to accept requests per each
norm(
	acceptRequest(Thing),
	Thing, // the subject agent
	( pursuer(Thing), proposal(Id,_,Thing,_),ra(_,_,x)), // precondition disabled
	obligation([acceptRequest(Id)],now + 3,[reduce(Thing,Sanction)]) // prohibition format
).

%individual obligations to accept requests raaa
norm(
	acceptRequests(Thing),
	Thing, // the subject agent
	( pursuer(Thing), groupObl(acceptRequests,Sanction)), // precondition disabled
	obligation([acceptRequests(Thing)],now + 15,[reduce(Thing,Sanction)]) // prohibition format
).

%individual prohibition for raaa
norm(
	restrictPlayer(Thing),
	Thing, // the subject agent
	( ra(_,Thing,raaa)), 
	prohibition([restrictPlayer(Thing)],[reduce(Thing,300)]) // prohibition format
).

%individual obligations to respond to requests per each
norm(
	respondToRequest(Thing),
	Thing, // the subject agent
	( pursuer(Thing), proposal(Id,_,Thing,_),group(Z)), // precondition
	obligation([respondToRequest(Id)],now + 3,[reduce(Thing,200)]) // prohibition format
).

%individual obligation to make a move during move phase
norm(
	makeMove(Thing),
	Thing, // the subject agent
	( pursuer(Thing), at(X,Y,Thing),group(Z), not detached(makeMove(Thing))), // precondition
	obligation([makeMove(X,Y,Thing)],now + 15,[reduce(Thing,200)]) // prohibition format
).

%Deactivated individual prohibitions to reject requests
norm(
	rejectRequests(Thing),
	Thing, // the subject agent
	( pursuer(Thing),group(Z),ra(_,_,x)), // precondition
	prohibition([rejectRequests(Thing)],[reduce(Thing,200)]) // prohibition format
).

%individual prohibition to move more than one field per turn
norm(
	moveTooFast(Thing),
	Thing, // the subject agent
	( pursuer(xx),group(Z)), // precondition
	prohibition([moveTooFast(Thing)],[reduce(Thing,100)]) // prohibition format
).

	
color(Color,Agent) :-
	at(X,Y,Agent),
	tile(X,Y,Color).
	
makeMove(X,Y,Thing) :-
	at(X1,Y,Thing),
	not(X is X1).
	
makeMove(X,Y,Thing) :-
	at(X,Y1,Thing),
	not(Y is Y1).	

rejectRequests(A) :- 
	response(Id,rejected,_),
	proposal(Id,_,A,_).
acceptRequests(A):- 
//	response(Id,accepted,_),
//	proposal(Id,_,A,_).
	not(rejectRequests(A)).
acceptRequest(Id):- 
	response(Id,accepted,_),
	proposal(Id,_,_,_).
respondToRequest(Id):- 
	response(Id,Response,_),
	proposal(Id,_,_,_).	
	
hierachical(group_task(_)).

at(X,Y,Agent) :- at(X,Y,Agent,_).

pursuer(a10).
pursuer(a20).
pursuer(a30).
pursuer(a40).


group_member(g,a10).
group_member(g,a20).
group_member(g,a30).
group_member(g,a40).


points(a10,1000).
points(a20,1000).
points(a30,1000).
points(a40,1000).

time_past(Time):- clock(Now), Now > Time.
time_since(Time):- clock(Now), Time > Now.
time_before(Time):- clock(Now), assert(checkingClock(Time,Now)), Now < Time.

not_area(X,Y):-
	X is 20, int(Y), Y > 0, Y < 20;
	
not_area(X,Y):-
	Y is 20, int(X), X > 0, X < 20;

area(X,Y):-
	int(X), int(Y), X > 0, Y > 0, X < 21, Y < 21.
	
east(X,Y,EX,Y) :- EX is X + 1.
west(X,Y,EX,Y) :- EX is X - 1.
north(X,Y,X,EY) :- EY is Y + 1.
south(X,Y,X,EY) :- EY is Y - 1.

surround(X,Y) :-
	East is X + 1, North is Y + 1, West is X - 1, South is Y - 1,
	at(East,Y,A),
	at(West,Y,B),
	at(X,North,C),
	at(X,South,D).
   
sanction([reduce(Agent,P)],viol(agent_directed(Label,Agent,prohibition(State,Sanction)))) :-
assert(sanctionp(Agent,P)),
   pursuer(Agent),
   points(Agent, Health),
   NewHealth is Health - P,
   clock(Now),
   retract(points(Agent, Health)),
   assert(points(Agent, NewHealth)),
   assert(sanctioned(viol(agent_directed(Label,Agent,prohibition(State,Sanction))))),!,
   @external(ctMW,write(points(Agent,Now,NewHealth),-1),_).
   
sanction([reduce(Agent,P)],viol(agent_directed(Label,Agent,obligation(State,D,Sanction)))) :-
assert(sanctiona(Agent,P)),
   pursuer(Agent),
   points(Agent, Health),
   NewHealth is Health - P,
   clock(Now),
   assert(sanctioned(viol(agent_directed(Label,Agent,obligation(State,D,Sanction))))),
   retract(points(Agent, Health)),
   assert(points(Agent, NewHealth)),!,
   @external(ctMW,write(points(Agent,Now,NewHealth),-1),_).
   
sanction_g(Agent,P) :-
assert(sanctiong(Agent,P)),
   pursuer(Agent),
   points(Agent, Health),
   NewHealth is Health - P,
   clock(Now),
   retract(points(Agent, Health)),
   assert(points(Agent, NewHealth)),!,
   @external(ctMW,write(points(Agent,Now,NewHealth),-1),_).
      
sanction([reduce(Group,P)],viol(agent_directed(Label,Agent,obligation(State,D,Sanction)))) :-
   group(Group),
   sanction_group(g,Sanction),
   assert(sanctioned(viol(agent_directed(Label,Agent,obligation(State,D,Sanction))))).

listTrue([H|T]):- H, listTrue(T).
listTrue([]).

clock(0).
//test
//goal(1,1,1).

check(GN):-
	setof(S, (group_member(G,A), violated(A,S)),Ss),
	sum(Ss,T), //sumlist
	sanction(GN,GS),
	GS =< T.

do_sanction([not(H)|T]):- retract(H),do_sanction(T).
do_sanction([H|T]):- uniqueassertz(H),do_sanction(T).
do_sanction([]).

do_sanction([],P,Group,0,S):-
		assert(group(Group,S)),
		ra(Group,RA,_),
		sanction_g(S,RA).
do_sanction([H|T],A,Group,L,X):- 
		sanction_g(H,A),
		do_sanction(T,A,Group,L,X).
do_sanction([],_,Group,L,X).

//group sanctions
sanction_policy(g,policy1).

policy1(Group,P,Label):-
	findall(M,(violated(group_task(Label),M),group_member(Group,M)),Vs),
	length(Vs,L),
assert(adelka(L)),
assert(agroupTS(Group)),
	S is P / L,
	do_sanction(Vs,S,Group,L,P).
	
sanction_group([reduce(Group,P)],viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction)))):-
	policy1(Group,P,Label),
	assert(sanctioned(viol(agent_directed(Label,Agent,obligation(State,D,Sanction))))).

Effects:
//{true} tuple_space_changed {true} // causes compliance checking

{clock(Old)} time(New) {not clock(Old), clock(New)}
{true} time(X) {clock(X)}

{at(X1,Y1,Agent,Clock)} position(Agent, cell(X,Y), Clock) {not at(X1,Y1,Agent,Clock), at(X,Y,Agent,Clock), moveTooFast(Agent)} 
{at(X1,Y1,Agent,Clock) and  moveTooFast(Agent)} position(Agent, cell(X,Y), Clock1) {not at(X1,Y1,Agent,Clock), at(X,Y,Agent,Clock1), not moveTooFast(Agent)} 
{at(X1,Y1,Agent,Clock)} position(Agent, cell(X,Y), Clock1) {not at(X1,Y1,Agent,Clock), at(X,Y,Agent,Clock1)} 
{true} position(Agent, cell(X,Y), Clock) {at(X,Y,Agent,Clock)}

{not goal(A,B,C)} goal(cell(X,Y), null, Clock) {goal(X,Y,Clock)}
{true} goal(cell(X,Y), Agent, Clock) {goal(X,Y, Agent,Clock)}
{true} proposal(Id,A1,A2,Clock) {proposal(Id,A1,A2,Clock)}
{true} response(Id,X,Clock) {response(Id,X,Clock)}
{tile(X,Y,Color)} tile(cell(X,Y),Color1,Clock) {not tile(X,Y,Color), tile(X,Y,Color1)}
{true} tile(cell(X,Y),Color,Clock) {tile(X,Y,Color)}
{chip(A,Color,Y,C)} chip(A,Color1,X,Clock) {not chip(A,Color,Y,C), chip(A,Color1,X,Clock)}
{true} chip(A,Color,X,Clock) {chip(A,Color,X,Clock)}

//{agentSTask(Agent,X,Y,goal(GX,GY))} setGoal(Agent,X,Y,GX,GY,Clock) {not agentSTask(Agent,X,Y,goal(GX,GY))}
{true} setGoal(Agent,X,Y,GX,GY,S,Clock) {agentSTask(Agent,X,Y,goal(GX,GY),S)}
{color(Agent,Color,Type,S)} color(Agent,Color2,Type2,S2,C) {color(Agent,Color2,Type2,S2), restrictPlayer(Agent)}
{true} color(Agent,Color,Type,S,C) {color(Agent,Color,Type,S)}
{true} group(Name,Agent,Type,C) {group(Name), ra(Name,Agent,Type)}
{true} groupObl(Obl,Sanction,C) {groupObl(Obl,Sanction)}

//{points(Agent,OldValue)} points(Agent, Clock, Value) {not points(Agent,OldValue), points(Agent,Value)}
//{true} points(Agent, Clock, Value) {points(Agent,Value,Clock)}



Temporal norms:
agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction)): 
	[norm(Label,Agent,Pre,obligation(ListA,Deadline,Sanction)) and Pre, 
	O(listTrue(ListA)), 
	time_past(Deadline)]

agent_directed(Label,Agent,prohibition(ListA,Sanction)): 
	[norm(Label,Agent,Pre,prohibition(ListA,Sanction)) and Pre, 
	F(listTrue(ListA)), 
	false]
	

Sanction rules:
//reduce(Agent,X) and do_reduce_health(Agent,X) => not reduce(Agent,X).

//obey(agent_directed(Label,Agent,Deontic)) => not viol(agent_directed(Label,Agent,Deontic)).

viol(agent_directed(Label,Agent,prohibition(State,Sanction))) and not sanctioned(viol(agent_directed(Label,Agent,prohibition(State,Sanction)))) and sanction(Sanction,viol(agent_directed(Label,Agent,prohibition(State,Sanction)))) => not viol(agent_directed(Label,Agent,prohibition(State,Sanction))).
//viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))), do_sanction_g(Sanction) => not viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))).
viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))) and not obey(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))) and not hierachical(Label) and not group(Agent) and not sanctioned(viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction)))) and sanction(Sanction,viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction)))) => not viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))).
viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))) and not obey(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))) and hierachical(Label) and not group(Agent) and not violated(Label,Agent) and assert(violated(Label,Agent)) => not viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))).
viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))) and not obey(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))) and group(Agent) and not sanctioned(viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction)))) and sanction_group(Sanction,viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction)))) => not viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))).

//obey(agent_directed(Label,Agent,Deontic)) => not viol(agent_directed(Label,Agent,Deontic)).
