Facts:

%RA group surround
//norm(
//    sanction_group(ra1),
//    ra1, // the subject agent
//    ( ra(ra1), sanction(Group,Sanction)), // precondition
//    obligation([atleast(agent_sanctions(g),Sanction)],now+15,[reduce(ra1,Sanction)]) // prohibition format
//    ).


     
%group surround
norm(
    group_surround(g),
    g, // the subject agent
    ( group(g), goal(X,Y,Z)), // precondition - left blank for now
    obligation([surround(X,Y)],now + 1,[reduce(g,500)]) // prohibition format
    ).
    
%agents group norms from RA
    
norm(
    group_task(group_surround(g)),
    Agent, // the subject agent
    ( pursuer(Agent), detached(group_surround(g)),goal(GX,GY,Z),agentSTask(Agent,X,Y,goal(GX,GY))), // precondition - add triggering condition
    obligation([at(X,Y,agent)],now + 1,[reduce(Agent, 500)]) // prohibition format
    ).  

%individual prohibitions to use colored tiles
norm(
not_enter_tile(Thing),
Thing, // the subject agent
( pursuer(Thing), color(Thing,Color,no), tile(X,Y,Color)), // precondition
prohibition([at(X,Y,Thing)],[reduce(Thing,50)]) // prohibition format
).

%individual obligations to use colored tiles
norm(
enter_tile(Thing),
Thing, // the subject agent
( pursuer(Thing), color(Thing,Color,yes), tile(X,Y,Color)), // precondition
obligation([at(X,Y,Thing)],now + 10,[reduce(Thing,50)]) // prohibition format
).

hierachical(group_task(_)).

pursuer(a10).
pursuer(a20).
pursuer(a30).
pursuer(a40).


group(g).
group_member(g,a10).
group_member(g,a20).
group_member(g,a30).
group_member(g,a40).
ra(g,a10).

//color(a10,red,yes).
//color(a20,blue,yes).
//color(a30,green,no).
//color(a40,yellow,no).
//tile(3,3,red).
//at(3,3,a10).

//gensym(1).
//gensym(X,5).
//gensym(Prefix, NewNumber) :-
//	retract(gensym(Number)),
//	NewNumber is Number + 1,
//	assert(gensym(NewNumber)).
//	name(Number, NList),
//	concat(Prefix, NList, AList),
//	name(Atom, AList).

points(a10,1000).
points(a20,1000).
points(a30,1000).
points(a40,1000).
points(c1,1000).
points(g,1000).

time_past(Time):- clock(Now), Now > Time.
time_since(Time):- clock(Now), Time > Now.

not_area(X,Y):-
	X is 20, int(Y), Y > 0, Y < 20;
	
not_area(X,Y):-
	Y is 20, int(X), X > 0, X < 20;

area(X,Y):-
	int(X), int(Y), X > 0, Y > 0, X < 21, Y < 21.
	
water(1,1).
water(2,2).
water(3,3).
water(4,4).

east(X,Y,EX,Y) :- EX is X + 1.
west(X,Y,EX,Y) :- EX is X - 1.
north(X,Y,X,EY) :- EY is Y + 1.
south(X,Y,X,EY) :- EY is Y - 1.

surround(X,Y) :-
	East is X + 1, North is Y + 1, West is X - 1, South is Y - 1,
	at(East,Y,A),
	at(West,Y,B),
	at(X,North,C),
	at(X,South,D).
	
	
//do_reduce_h(Group,P):- 
//   @external(ctMW,write(points(x,1,1),-1),_).
   
sanction([reduce(Agent,P)],viol(agent_directed(Label,Agent,prohibition(State,Sanction)))) :-
   //pursuer(Agent),
   points(Agent, Health),
   NewHealth is Health - P,
   clock(Now),
   assert(sanctioned(viol(agent_directed(Label,Agent,prohibition(State,Sanction))))),
   @external(ctMW,write(points(Agent,Now,NewHealth),-1),_).
   
sanction([reduce(Agent,P)],viol(agent_directed(Label,Agent,obligation(State,D,Sanction)))) :-
   //pursuer(Agent),
   points(Agent, Health),
   NewHealth is Health - P,
   clock(Now),
   assert(sanctioned(viol(agent_directed(Label,Agent,obligation(State,D,Sanction))))),
   @external(ctMW,write(points(Agent,Now,NewHealth),-1),_).
   
sanction_g(Agent,P) :-
   pursuer(Agent),
   points(Agent, Health),
   NewHealth is Health - P,
   clock(Now),
   @external(ctMW,write(points(Agent,Now,NewHealth),-1),_).
      
sanction([reduce(Group,P)],viol(agent_directed(Label,Agent,obligation(State,D,Sanction)))) :-
   group(Group),
   sanction_group(g,1000),
   assert(sanctioned(viol(agent_directed(Label,Agent,obligation(State,D,Sanction))))).
   
do_reduce_health(Agent,P):- 
   pursuer(Agent),
   points(Agent, Health),
   NewHealth is Health - P,
   clock(Now),
//   assert(points(Agent,Now,NewHealth)),
   @external(ctMW,write(points(Agent,Now,NewHealth),-1),_).
   
//do_reduce_health(Group,P):- 
//   group(Group),
//   clock(Now),
//   policy1(g,1000),
//   @external(ctMW,write(points(Group,Now,NewHealth),-1),_).

//listTrue(_).
listTrue([H|T]):- H, listTrue(T).
listTrue([]).

clock(0).
//test
//goal(1,1,1).

check(GN):-
	setof(S, (group_member(G,A), violated(A,S)),Ss),
	sum(Ss,T), //sumlist
	sanction(GN,GS),
	GS =< T.

do_sanction([not(H)|T]):- retract(H),do_sanction(T).
do_sanction([H|T]):- uniqueassertz(H),do_sanction(T).
do_sanction([]).

do_sanction([H|T],A):- sanction_g(H,A),do_sanction(T,A).
do_sanction([],_).

//group sanctions
sanction_policy(g,policy1).
policy1(Group,P,Label):-
//    assert(test(2)),
	findall(M,(violated(group_task(Label),M),group_member(Group,M)),Vs),
//	assert(povedlose(x))
	length(Vs,L),
	assert(length(L)),
	S is P / L,
	assert(povedlose(S)),
//	!,
	do_sanction(Vs,S).
//	assert(sanctioned(viol(agent_directed(Label,Agent,obligation(State,D,Sanction))))).
	
sanction_group([reduce(Group,P)],viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction)))):-
	
	sanction_policy(Group,Policy),	
//	assert(test(1)),
//	assert(sanctioned(viol(agent_directed(Label,Agent,obligation(State,D,Sanction))))).
	policy1(Group,P,Label),
//	call(Policy,Group,P),
	assert(sanctioned(viol(agent_directed(Label,Agent,obligation(State,D,Sanction))))).
//	!.

Effects:
{true} tuple_space_changed {true} // causes compliance checking

{clock(Old)} time(New) {not clock(Old), clock(New)}
{true} time(X) {clock(X)}

{at(X1,Y1,Agent)} position(Agent, cell(X,Y), Clock) {not at(X1,Y1,Agent), at(X,Y,Agent)} 
{true} position(Agent, cell(X,Y), Clock) {at(X,Y,Agent)}

{true} goal(cell(X,Y), null, Clock) {goal(X,Y,Clock)}
{true} goal(cell(X,Y), Agent, Clock) {goal(X,Y, Agent,Clock)}
{true} proposal(Id,A1,A2,Clock) {proposal(Id,A1,A2,Clock)}
{true} response(Id,X,Clock) {response(Id,X,Clock)}
{tile(X,Y,Color,B)} tile(cell(X1,Y1),Color1,Clock) {not tile(X,Y,Color,B), tile(X1,Y1,Color1,Clock)}
{true} tile(cell(X,Y),Color,Clock) {tile(X,Y,Color,Clock)}
{chip(A,Color,Y,C)} chip(A,Color1,X,Clock) {not chip(A,Color,Y,C), chip(A,Color1,X,Clock)}
{true} chip(A,Color,X,Clock) {chip(A,Color,X,Clock)}

//{agentSTask(Agent,X,Y,goal(GX,GY))} setGoal(Agent,X,Y,GX,GY,Clock) {not agentSTask(Agent,X,Y,goal(GX,GY))}
{true} setGoal(Agent,X,Y,GX,GY,Clock) {agentSTask(Agent,X,Y,goal(GX,GY))}
{true} color(Agent,Color,Type,C) {color(Agent,Color,Type)}

//{points(Agent,OldValue)} points(Agent, Clock, Value) {not points(Agent,OldValue), points(Agent,Value)}
//{true} points(Agent, Clock, Value) {points(Agent,Value,Clock)}



Temporal norms:
agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction)): 
	[norm(Label,Agent,Pre,obligation(ListA,Deadline,Sanction)) and Pre, 
	O(listTrue(ListA)), 
	time_past(Deadline)]

agent_directed(Label,Agent,prohibition(ListA,Sanction)): 
	[norm(Label,Agent,Pre,prohibition(ListA,Sanction)) and Pre, 
	F(listTrue(ListA)), 
	false]

Sanction rules:
reduce(Agent,X) and do_reduce_health(Agent,X) => not reduce(Agent,X).

viol(agent_directed(Label,Agent,prohibition(State,Sanction))) and not sanctioned(viol(agent_directed(Label,Agent,prohibition(State,Sanction)))) and sanction(Sanction,viol(agent_directed(Label,Agent,prohibition(State,Sanction)))) => not viol(agent_directed(Label,Agent,prohibition(State,Sanction))).
//viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))), do_sanction_g(Sanction) => not viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))).
viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))) and not hierachical(Label) and not group(Agent) and not sanctioned(viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction)))) and sanction(Sanction,viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction)))) => not viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))).
viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))) and hierachical(Label) and not group(Agent) and not violated(Label,Agent) and assert(violated(Label,Agent)) => not viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))).
viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))) and group(Agent) and not sanctioned(viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction)))) and sanction_group(Sanction,viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction)))) => not viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))).


obey(agent_directed(Label,Agent,Deontic)) => not obey(agent_directed(Label,Agent,Deontic)).
